#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Wrapper for scanning PHP files with various syntax checkers
#' @file phpanalysis
#' @version 2019.12.31
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ -z "${1:-}" ]; then
    printf 'ERROR: A parameter is required!\n' >&2
    exit 1
elif [ "$1" = '--help' ] || [ "$1" = 'help' ] || [ "$1" = '-h' ]; then
    printf 'Specify the pathname of each PHP file to scan.\n'
    exit 0
fi


# GLOBALS #


export LANG='en_US.UTF-8'
export LC_ALL='C'
export LC_CTYPE='C'


# SETUP COMMANDS #


PHP_EXISTS=0
if [ -n "$(command -v php)" ]; then
    PHP_EXISTS=1
else
    printf 'php: command not found!\n' >&2
fi

PHPCS_EXISTS=0
if [ -n "$(command -v phpcs)" ]; then
    PHPCS_EXISTS=1
else
    printf 'phpcs: command not found!\n' >&2
fi

PHPMD_EXISTS=0
if [ -n "$(command -v phpmd)" ]; then
    PHPMD_EXISTS=1
else
    printf 'phpmd: command not found!\n' >&2
fi

CODE_ANALYSIS_EXISTS=0
if [ -x "$(command -v code-analysis)" ]; then
    CODE_ANALYSIS_EXISTS=1
else
    printf 'code-analysis: command not found!\n' >&2
fi


# Use a faster alternative if possible
if [ -x "$(command -v mawk)" ]; then
    awk_cmd() { mawk "${1}"; }
    noblanks() { mawk NF; }
elif [ -x "$(command -v nawk)" ]; then
    awk_cmd() { nawk "${1}"; }
    noblanks() { nawk NF; }
else
    awk_cmd() { awk "${1}"; }
    noblanks() { awk NF; }
fi


# FUNCTIONS #


#' Run PHP-Syntax-Check
php_sc_func() {
    if [ "$PHP_EXISTS" -eq 1 ]; then
        printf '======  *PHP-SC*  ======\n'
        php --syntax-check "${1}" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); gsub(/\t/, ":1: "); if (NF > 0) { print; } }'
    fi
}


#' Run PHP-Codesniffer
phpcs_func() {
    if [ "$PHPCS_EXISTS" -eq 1 ]; then
        printf '======  *PHPCS*  ======\n'
        phpcs -d memory_limit=128M -s --report-width=512 --severity=1 --standard=PEAR,PSR2,Zend --exclude=Generic.Commenting.DocComment,Generic.Files.LineLength,Generic.Functions.OpeningFunctionBraceBsdAllman,Generic.WhiteSpace.DisallowTabIndent,PEAR.Commenting.FileComment,PEAR.Commenting.FunctionComment,PEAR.ControlStructures.ControlSignature,PEAR.Functions.FunctionDeclaration,PEAR.WhiteSpace.ScopeClosingBrace,Squiz.Commenting.DocCommentAlignment,Squiz.ControlStructures.ControlSignature,Squiz.Functions.GlobalFunction,Squiz.Functions.MultiLineFunctionDeclaration,Squiz.WhiteSpace.ScopeClosingBrace,Zend.Files.ClosingTag,Zend.NamingConventions.ValidVariableName --tab-width=4 "${1}" | awk_cmd '{ OFS=""; gsub(/^FILE: .+$/, ""); gsub(/^FOUND .+$/, ""); gsub(/^[\-]+$/, ""); gsub(/^0$/, ""); if (NF > 0) { print; } }' | tr '|' ':' | tr '\t' ' ' | sed -E -e 's|  | |g; s|  | |g; s| : |:|g; s|^ ([0-9]+):(.+)|'"${1}"':\1:1:\2|'
    fi
}


#' Run PHP-MD
phpmd_func() {
    if [ "$PHPMD_EXISTS" -eq 1 ]; then
        printf '======  *PHPMD*  ======\n'
        phpmd "${1}" text cleancode,codesize,controversial,design,naming,unusedcode | awk_cmd '{ OFS=""; gsub(/^0$/, ""); gsub(/\t/, ":1: "); if (NF > 0) { print; } }'
    fi
}


#' Run Code-Analysis
code_analysis_func() {
    if [ "$CODE_ANALYSIS_EXISTS" -eq 1 ]; then
        code-analysis "${1}"
    fi
}


# MAIN #


for file in "$@"; do
    { [ ! -r "$file" ] || [ -d "$file" ]; } && printf '%s: The specified file is non-readable or non-existent!\n' "$file" >&2 && continue

    PHP_BUFFER="/tmp/$(uuid).phpanalysis.tmp"
    PHPCS_BUFFER="/tmp/$(uuid).phpanalysis.tmp"
    PHPMD_BUFFER="/tmp/$(uuid).phpanalysis.tmp"
    CODE_ANALYSIS_BUFFER="/tmp/$(uuid).phpanalysis.tmp"

    php_sc_func "$file" > "${PHP_BUFFER}" &
    phpcs_func "$file" > "${PHPCS_BUFFER}" &
    phpmd_func "$file" > "${PHPMD_BUFFER}" &
    code_analysis_func "$file" > "${CODE_ANALYSIS_BUFFER}" &

    wait

    printf "%s\\n" "$(cat < "${PHP_BUFFER}")"
    rm -f "${PHP_BUFFER}" || true
    printf "%s\\n%s\\n" "$(cat < "${PHPCS_BUFFER}")" "$(cat < "${PHPMD_BUFFER}")"
    rm -f "${PHPCS_BUFFER}" "${PHPMD_BUFFER}" || true
    printf "%s\\n" "$(cat < "${CODE_ANALYSIS_BUFFER}")"
    rm -f "${CODE_ANALYSIS_BUFFER}" || true

done
