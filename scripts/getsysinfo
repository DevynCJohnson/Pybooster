#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on; line-numbers on;
# @brief Collect system information and generate a detailed report
# @file getsysinfo
# @version 2018.08.31
# @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
# @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


# SETUP #


if [ ! "$(id -u)" -eq 0 ]; then
    exec sudo -- "$0"
    exit $?
fi
readonly FILE="/tmp/System_Information.txt"

[ ! "$(id -u)" -eq 0 ] && printf 'Root permissions are required!\n' >&2 && exit 1

if [ -x "$(command -v inxi)" ]; then
    _ispresent_inxi=1
else
    _ispresent_inxi=0
fi


# GENERAL INFO #


printf '# GENERAL INFO #\n\n\nReport Generated: %s\n' "$(date +'%Y.%m.%d')" > "$FILE" || exit 1
[ -x "$(command -v uname)" ] && printf '%s\nKernel Version: %s\nHostname: %s\n' "$(uname -m -o)" "$(uname -r)" "$(uname -n)" >> "$FILE"
if [ -r /etc/debian_release ]; then
    printf 'Debian Version: %s\n' "$(cat /etc/debian_release)" >> "$FILE"
elif [ -r /etc/debian_version ]; then
    printf 'Debian Version: %s\n' "$(cat /etc/debian_version)" >> "$FILE"
elif [ -r /etc/gentoo-release ]; then
    printf 'Gentoo Version: %s\n' "$(cat /etc/gentoo-release)" >> "$FILE"
elif [ -r /etc/fedora-release ]; then
    printf 'Fedora Version: %s\n' "$(cat /etc/fedora-release)" >> "$FILE"
elif [ -r /etc/mandrake-release ]; then
    printf 'Mandrake Version: %s\n' "$(cat /etc/mandrake-release)" >> "$FILE"
elif [ -r /etc/redhat-release ]; then
    printf 'Redhat Version: %s\n' "$(cat /etc/redhat-release)" >> "$FILE"
elif [ -r /etc/redhat_version ]; then
    printf 'Redhat Version: %s\n' "$(cat /etc/redhat_version)" >> "$FILE"
elif [ -r /etc/slackware-release ]; then
    printf 'Slackware Version: %s\n' "$(cat /etc/slackware-release)" >> "$FILE"
elif [ -r /etc/slackware-version ]; then
    printf 'Slackware Version: %s\n' "$(cat /etc/slackware-version)" >> "$FILE"
elif [ -r /etc/sun-release ]; then
    printf 'Sun Version: %s\n' "$(cat /etc/sun-release)" >> "$FILE"
elif [ -r /etc/yellowdog-release ]; then
    printf 'Yellowdog Version: %s\n' "$(cat /etc/yellowdog-release)" >> "$FILE"
elif [ -r /etc/release ]; then
    printf 'OS Version: %s\n' "$(cat /etc/release)" >> "$FILE"
fi
[ -r /etc/machine-id ] && printf 'Machine ID: %s\n' "$(cat /etc/machine-id)" >> "$FILE"
if [ -r /etc/os-release ]; then
    cat /etc/os-release >> "$FILE"
elif [ -r /etc/lsb-release ]; then
    cat /etc/lsb-release >> "$FILE"
elif [ -x "$(command -v lsb_release)" ]; then
    lsb_release --all >> "$FILE"
elif [ "$_ispresent_inxi" -eq 1 ]; then
    printf '%s\n' "$(inxi -c 0 -M -S -x -x -x)" >> "$FILE"
fi
[ -x "$(command -v grub-install)" ] && printf '%s\n' "$(grub-install --version)" >> "$FILE"
[ -x "$(command -v lshw)" ] && printf '%s\n' "$(lshw -C system)" >> "$FILE"
[ -x "$(command -v systemctl)" ] && printf '\nSystemctl Enabled Services:\n%s\n' "$(systemctl list-unit-files | grep -F enabled)" >> "$FILE"


# KERNEL INFO #


printf '\n\n# KERNEL INFO #\n\n\n' >> "$FILE"
[ -x "$(command -v lsmod)" ] && printf '%s\n' "$(lsmod)" >> "$FILE"
if [ -x "$(command -v sysctl)" ]; then
    printf '\nKernel Parameters:\n%s\n' "$(sysctl -a 2> /dev/null)" >> "$FILE"
elif [ -x "$(command -v statgrab)" ]; then
    printf '\nKernel Parameters:\n%s\n' "$(statgrab)" >> "$FILE"
fi


# CPU INFO #


printf '\n\n# CPU INFO #\n\n\n' >> "$FILE"
[ -x "$(command -v lscpu)" ] && printf '%s\n' "$(lscpu)" >> "$FILE"
[ "$_ispresent_inxi" -eq 1 ] && printf '%s\n' "$(inxi -c 0 -C -f -x -x)" >> "$FILE"


# GPU INFO #


printf '\n\n# GPU INFO #\n\n\n' >> "$FILE"
[ "$_ispresent_inxi" -eq 1 ] && printf '%s\n' "$(inxi -c 0 -G -x -x -x)" >> "$FILE"
[ -x "$(command -v nvidia-smi)" ] && printf '%s\n%s\n' "$(nvidia-smi -L)" "$(nvidia-smi)" >> "$FILE"


# MEMORY INFO #


printf '\n\n# MEMORY INFO #\n\n\n' >> "$FILE"
[ "$_ispresent_inxi" -eq 1 ] && printf '%s\n' "$(inxi -c 0 -m -x -x -x)" >> "$FILE"
[ -x "$(command -v vmstat)" ] && printf '%s\n' "$(vmstat -a -n -s)" >> "$FILE"
[ -f /proc/meminfo ] && printf '%s\n' "$(cat /proc/meminfo)" >> "$FILE"
[ -x "$(command -v lsmem)" ] && printf '%s\n' "$(lsmem -a)" >> "$FILE"


# HARDWARE INFO #


printf '\n\n# HARDWARE INFO #\n\n\n' >> "$FILE"
[ -x "$(command -v lshw)" ] && printf '%s\n\n%s\n\n' "$(lshw)" "$(lshw -quiet -short)" >> "$FILE"
[ -x "$(command -v lspci)" ] && printf '%s\n\n%s\n\n' "$(lspci)" "$(lspci -k -t -v -v -v)" >> "$FILE"
[ -x "$(command -v lsusb)" ] && printf '%s\n' "$(lsusb --tree --verbose)" >> "$FILE"


# POWER & THERMAL INFO #


printf '\n\n# POWER & THERMAL INFO #\n\n\n' >> "$FILE"
[ "$_ispresent_inxi" -eq 1 ] && printf '%s\n' "$(inxi -c 0 -B -s -x -x -x)" >> "$FILE"
[ -x "$(command -v acpi)" ] && printf '%s\n' "$(acpi -i -s -V)" >> "$FILE"
[ -x "$(command -v sensors)" ] && printf '%s\n' "$(sensors)" >> "$FILE"
[ -x "$(command -v nvidia-smi)" ] && printf '%s\n' "$(nvidia-smi -q -d "POWER,TEMPERATURE" | awk 'NR > 6')" >> "$FILE"


# AUDIO INFO #


printf '\n\n# AUDIO INFO #\n\n\n' >> "$FILE"
[ "$_ispresent_inxi" -eq 1 ] && printf '%s\n' "$(inxi -c 0 -A -x -x -x)" >> "$FILE"
[ -x "$(command -v pulseaudio)" ] && printf '\nPulseAudio Settings\n%s\n\nPulseAudio Modules\n%s\n\nPulseAudio Resample Methods\n%s\n' "$(pulseaudio --dump-conf)" "$(pulseaudio --dump-modules)" "$(pulseaudio --dump-resample-methods)" >> "$FILE"


# STORAGE INFO #


printf '\n\n# STORAGE INFO #\n\n\n' >> "$FILE"
[ "$_ispresent_inxi" -eq 1 ] && printf '%s\n' "$(inxi -c 0 -D -d -l -o -P -p -R -u -x -x -x)" >> "$FILE"
[ -x "$(command -v free)" ] && printf '%s\n' "$(free)" >> "$FILE"
[ -x "$(command -v df)" ] && printf '%s\n' "$(df -a -h)" >> "$FILE"
[ -f /etc/fstab ] && printf '\nFilesystem Table:\n%s\n' "$(cat /etc/fstab)" >> "$FILE"
[ -f /etc/mtab ] && printf '\nMemory Table:\n%s\n' "$(cat /etc/mtab)" >> "$FILE"
[ -f /proc/partitions ] && printf '\nPartitions:\n%s\n' "$(cat /proc/partitions)" >> "$FILE"


# NETWORK INFO #


printf '\n\n# NETWORK INFO #\n\n\n' >> "$FILE"
[ -x "$(command -v hostname)" ] && printf '%s%s\n' 'Hostname: ' "$(hostname)" >> "$FILE"
[ "$_ispresent_inxi" -eq 1 ] && printf '%s\n' "$(inxi -c 0 -i -N -n -x -x -x)" >> "$FILE"
[ -x "$(command -v ifconfig)" ] && printf '%s\n\n' "$(ifconfig -a)" >> "$FILE"
[ -x "$(command -v netstat)" ] && printf '%s\n' "$(netstat -n -r)" >> "$FILE"
[ -x "$(command -v nmcli)" ] && printf '\n%s\n' "$(nmcli general status)" >> "$FILE"


# PACKAGE MANAGEMENT INFO #


printf '\n\n# PACKAGE MANAGEMENT INFO #\n\n\n' >> "$FILE"
[ "$_ispresent_inxi" -eq 1 ] && printf '%s\n' "$(inxi -c 0 -r)" >> "$FILE"
if [ -x "$(command -v dpkg)" ]; then
    printf 'Default Architecture: %s\n' "$(dpkg --print-architecture)" >> "$FILE"
    printf 'Supported Architectures: %s\n' "$(dpkg --print-foreign-architectures)" >> "$FILE"
fi


# LIBRARY INFO #


printf '\n\n# LIBRARY INFO #\n\n\n' >> "$FILE"
[ -x "$(command -v gcc)" ] && printf '→ %s\n' "$(gcc --version)" >> "$FILE"
[ -x "$(command -v bash)" ] && printf '→ %s\n' "$(bash --version)" >> "$FILE"
[ -x "$(command -v zsh)" ] && printf '→ %s\n' "$(zsh --version)" >> "$FILE"
[ -x "$(command -v npm)" ] && printf '→ %s\n' "$(npm version)" >> "$FILE"
[ -x "$(command -v ocamlrun)" ] && printf '→ %s\n' "$(ocamlrun -version)" >> "$FILE"
[ -x "$(command -v perl)" ] && printf '→ %s\n' "$(perl --version)" >> "$FILE"
[ -x "$(command -v php)" ] && printf '→ %s\n' "$(php --version)" >> "$FILE"
[ -x "$(command -v pip3)" ] && printf '→ %s\n' "$(pip3 --version)" >> "$FILE"
[ -x "$(command -v python3)" ] && printf '→ %s\n' "$(python3 --version)" >> "$FILE"
[ -x "$(command -v ruby)" ] && printf '→ %s\n' "$(ruby --version)" >> "$FILE"
[ -x "$(command -v ldd)" ] && printf '→ %s\n' "$(ldd --version)" >> "$FILE"


# GRAPHICS INFO #


printf '\n\n# GRAPHICS INFO #\n\n\n' >> "$FILE"
if [ -x "$(command -v ldd)" ] && [ -x "$(command -v clinfo)" ]; then
    printf '\n%s\n' "$(ldd -v "$(which clinfo)")" >> "$FILE"
elif [ -x "$(command -v ldd)" ] && [ -x "$(command -v glxinfo)" ]; then
    printf '\n%s\n' "$(ldd -v "$(which glxinfo)")" >> "$FILE"
fi
[ -x "$(command -v cginfo)" ] && printf '\nCg Library Info:\n%s\n' "$(cginfo 2> /dev/null)" >> "$FILE"
[ -x "$(command -v clinfo)" ] && printf '\nOpenCL Platforms:\n%s\n' "$(clinfo 2> /dev/null)" >> "$FILE"
[ -x "$(command -v eglinfo)" ] && printf '\nEGL Platforms:\n%s\n' "$(eglinfo 2> /dev/null)" >> "$FILE"
[ -x "$(command -v es2_info)" ] && printf '\nOpenGL ES Extensions:%s\n' "$(es2_info 2> /dev/null)" >> "$FILE"
[ -x "$(command -v glewinfo)" ] && printf '\nGLEW Extensions:\n%s\n' "$(glewinfo 2> /dev/null)" >> "$FILE"
[ -x "$(command -v glxinfo)" ] && printf '\nGLX Extensions:\n%s\n' "$(glxinfo -B -l 2> /dev/null)" >> "$FILE"
[ -x "$(command -v vdpauinfo)" ] && printf '\nVDPAU Driver Library:\n%s\n' "$(vdpauinfo 2> /dev/null)" >> "$FILE"
[ -x "$(command -v xdpyinfo)" ] && printf '\nX Server Info:\n%s\n' "$(xdpyinfo -ext all 2> /dev/null)" >> "$FILE"
[ -x "$(command -v xrandr)" ] && printf '\nRandR Extension:\n%s\n' "$(xrandr -q --verbose 2> /dev/null)" >> "$FILE"
[ -x "$(command -v xvinfo)" ] && printf '\nX-Video Extension:\n%s\n' "$(xvinfo 2> /dev/null)" >> "$FILE"
[ -x "$(command -v nvcc)" ] && printf '\nCuda Compiler:\n%s\n' "$(nvcc -V 2> /dev/null)" >> "$FILE"
[ -d /etc/OpenCL/vendors/ ] && printf '\nICD Files:\n%s\n' "$(ls /etc/OpenCL/vendors/)" >> "$FILE"


# FINISH #


chmod -f 644 "$FILE"
printf 'Report generated: /tmp/System_Information.txt\n'
exit 0
