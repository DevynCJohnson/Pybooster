#!/usr/bin/env python3
# -*- coding: utf-8-unix; Mode: Python; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=python syntax=python.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax python; indent-mode python; eol unix; replace-tabs off; indent-width 4; tab-width 4; remove-trailing-space on; line-numbers on;
"""@brief Convert CamelCase to lower_case_underscore and vice versa

@file CamelCase
@version 2018.04.27
@author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
@copyright LGPLv3

@section DESCRIPTION
In put comes from stdin and the output comes from stdout
Configure Geany: Edit→Format→Send Selection to→Set Custom Commands

@section LICENSE
GNU Lesser General Public License v3
Copyright (c) Devyn Collier Johnson, All rights reserved.

This software is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this software.
"""


# pylint: disable=C0103


from sys import argv, stderr, stdin, stdout
from traceback import format_exc


def camelcase_to_lowercase_underscore(string: str) -> str:
    """Split string by uppercase letters"""
    words = []
    from_char_position = 0
    for current_char_position, char in enumerate(string):
        if char.isupper() and from_char_position < current_char_position:
            words.append(string[from_char_position:current_char_position].lower())
            from_char_position = current_char_position
    words.append(string[from_char_position:].lower())
    return r'_'.join(words)


def lowercase_underscore_to_camelcase(string: str) -> str:
    """Convert string from lowercase-underscore to camel-case"""
    split_string = string.split(r'_')
    strclass = string.__class__
    return split_string[0] + strclass.join(r'', map(strclass.capitalize, split_string[1:]))


def detect_conversion_method(data: str) -> object:
    """Dynamically set the function that will be used"""
    return lowercase_underscore_to_camelcase if r'_' in data else camelcase_to_lowercase_underscore


if __name__ == '__main__':
    try:
        if len(argv) == 1:
            DATA = stdin.read().replace(r' ', r'_')
            conversion_method = detect_conversion_method(DATA)
            stdout.write(conversion_method(DATA))
        elif argv[1].lower() in (r'help', r'--help', r'-h', r'--usage', r'?'):
            stdout.write('Usage 1: command | CamelCase\nUsage 2: CamelCase "string"\nConvert CamelCase to lower_case_underscore and vice versa\n')
        elif argv[1]:
            if not argv[1].strip():
                stderr.write('No input found!\n')
            else:
                DATA = argv[1].replace(r' ', r'_')
                conversion_method = detect_conversion_method(DATA)
                stdout.write(conversion_method(DATA) + '\n')
        else:
            stdout.write('Usage 1: command | CamelCase\nUsage 2: CamelCase "string"\nConvert CamelCase to lower_case_underscore and vice versa\n')
    except BaseException:
        stderr.write(format_exc() + '\n')
