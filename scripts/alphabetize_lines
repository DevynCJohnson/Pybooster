#!/usr/bin/env python3
# -*- coding: utf-8; Mode: Python; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=python syntax=python.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax python; indent-mode python; eol unix; replace-tabs off; indent-width 4; tab-width 4; remove-trailing-space on;
"""@brief Sort lines (or list) in data stream alphabetically.

@file alphabetize_lines
@version 2019.10.06
@author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
@copyright LGPLv3

@section DESCRIPTION
This script can be integrated into Geany to sort selected lines or some single lines.
A single data line (without '\n') can be sorted if it is delimited by '|', ' ', ',', ';', ':', ' / ', or ', '.
Configure Geany: Edit→Format→Send Selection to→Set Custom Commands

@section LICENSE
GNU Lesser General Public License v3
Copyright (c) Devyn Collier Johnson, All rights reserved.

This software is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this software.
"""


from sys import argv, stderr, stdin, stdout
from typing import Callable, List, Union


__all__: list = [
    r'charsort_rmdup_codec',
    r'charsort_codec',
    r'alphadupsort_delimiter_codec',
    r'alphasort_delimiter_codec',
    r'alphabetize_string'
]


def charsort_rmdup_codec(data: str, unicode_sort: bool = True) -> str:
    """Sort the characters alphabetically or by unicode value and remove duplicates."""
    _sort_key: Union[Callable, None] = None if unicode_sort else str.lower
    return r''.join(sorted(list(set(list(data))), key=_sort_key))


def charsort_codec(data: str, unicode_sort: bool = True) -> str:
    """Sort the characters alphabetically or by unicode value."""
    _out: list = list(data)
    _sort_key: Union[Callable, None] = None if unicode_sort else str.lower
    _out.sort(key=_sort_key)
    return r''.join(_out)


def alphadupsort_delimiter_codec(data: str, delimiter: str) -> str:
    """Sort the lines alphabetically using the specified delimiter and remove duplicates."""
    return delimiter.join(sorted(list(set(data.split(delimiter))), key=str.lower)).rstrip()


def alphasort_delimiter_codec(data: str, delimiter: str) -> str:
    """Sort the lines alphabetically using the specified delimiter."""
    _out: list = data.split(delimiter)
    _out.sort(key=str.lower)
    return delimiter.join(_out).rstrip()


def alphabetize_string(_data: str, sort_func: Callable[[str, str], str]) -> str:  # pylint: disable=R0912
    """Alphabetize the data separated by a delimiter."""
    if not _data or not _data.strip():
        stderr.write('No input provided!\n')
        raise Exception(r'No input provided!')
    if '\n' in _data:
        # Newline as delimiter
        return sort_func(_data, '\n')
    # Delimiters (except newline)
    patterns: tuple = ('\u001F', '\u000B', '\u0009', r'|', '\r', r', ', r',', r' / ', r' ', r';', r':', '\f')
    for pattern in patterns:
        if pattern in _data:
            return sort_func(_data, pattern)
    # Character sorting
    if sort_func.__name__ == r'alphadupsort_delimiter_codec':
        return r''.join(sorted(list(set(list(_data))), key=str.lower))
    _out: List[str] = list(_data)
    _out.sort(key=str.lower)
    return r''.join(_out)


if __name__ == '__main__':  # noqa: C901
    HELP: str = 'Usage\n\talphabetize_lines [-r] "string"\n\tcommand | alphabetize_lines [-r]\n' + \
        '\nSupported Delimters\n\tTab (U+0009)\n\tNewline (U+000A)\n\tVertical Tab (U+000B)\n\tForm-feed (U+000C)\n\tCarriage return (U+000D)\n\tUnit-separator (U+001F)\n\tSpace (U+0020)\n\tComma (U+002C)\n\t`:` (U+003A)\n\t`;` (U+003B)\n\tcomma+space\n\tspace+forward-slash+space\n\t`|` (U+007C)\n' + \
        '\nOptional Parameters\n' + \
        '\t-c, --char: Sort individual characters\n' + \
        '\t-n, --no-trailing-nl: Do not add a trailing newline at the end of the output\n' + \
        '\t-p, --read-pipe: Get input data from pipe\n' + \
        '\t-r, --rm-dup: Remove duplicates in addition to sorting\n' + \
        '\t-u, --unicode: Sort characters by unicode value (not alphabetically)\n'
    try:
        ARGV_LEN: int = len(argv)
        HAS_ARGS: bool = ARGV_LEN > 1
        RM_DUP: bool = False
        UNICODE_SORT: bool = False
        CHAR_SORT: bool = False
        DATA: str = r''
        APPEND_NL: str = '\n'
        PIPED_INPUT: bool = False
        _tmp_res: str = r''  # pylint: disable=C0103
        # Parse Arguments
        if not HAS_ARGS or (HAS_ARGS and (r'-p' in argv[1:] or r'--read-pipe' in argv[1:])):
            DATA = stdin.read()
            PIPED_INPUT = True
            APPEND_NL = r''
        if HAS_ARGS:
            _tmp_args: list = argv[1:]
            while _tmp_args:
                _arg: str = _tmp_args.pop(0)  # pylint: disable=C0103
                if _arg.lower() in {r'help', r'--help', r'-h', r'--usage', r'?'}:
                    stdout.write(HELP)
                    raise SystemExit()
                if _arg.startswith(r'-'):
                    if PIPED_INPUT and _arg.lower() in {r'-p', r'--read-pipe'}:
                        continue
                    if APPEND_NL == '\n' and _arg.lower() in {r'-n', r'--no-trailing-newline'}:
                        APPEND_NL = r''
                        continue
                    if not RM_DUP and _arg.lower() in {r'--remove-duplicates', r'--rm-dup', r'--rm-dups', r'-r'}:
                        RM_DUP = True
                        continue
                    if not UNICODE_SORT and _arg.lower() in {r'--sort-unicode', r'--symbols', r'--unicode', r'-u'}:
                        UNICODE_SORT = True
                        CHAR_SORT = True
                        continue
                    if not CHAR_SORT and not UNICODE_SORT and _arg.lower() in {r'--char', r'--chars', r'--sort-char', r'--sort-chars', r'-c'}:
                        CHAR_SORT = True
                        continue
                _tmp_res = _tmp_args[-1] if _tmp_args else _arg if _arg else r''  # pylint: disable=C0103
        DATA = _tmp_res if _tmp_res and not DATA else DATA if DATA else r''
        # Process Data
        if not DATA:
            stderr.write('No input provided!\n')
            raise SystemExit(1)
        if CHAR_SORT or UNICODE_SORT:  # Character sorting
            SORT_FUNC_CHAR: Callable[[str, bool], str] = charsort_rmdup_codec if RM_DUP else charsort_codec
            stdout.write(SORT_FUNC_CHAR(DATA, UNICODE_SORT) + APPEND_NL)
        else:  # String sorting
            SORT_FUNC_ALPHA: Callable[[str, str], str] = alphadupsort_delimiter_codec if RM_DUP else alphasort_delimiter_codec
            stdout.write(alphabetize_string(DATA, SORT_FUNC_ALPHA) + APPEND_NL)
    except SystemExit:
        raise SystemExit()
    except BaseException as _err:
        stderr.write(str(_err) + '\n')
        raise SystemExit(1)
    raise SystemExit()
