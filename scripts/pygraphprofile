#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Graph the runtime function calls of a Python script
#' @file pygraphprofile
#' @version 2019.07.26
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ ! -x "$(command -v pycallgraph)" ]; then
    printf 'pycallgraph: command not found!\n' >&2
    exit 1
elif [ "${1:-}" = '--help' ] || [ "${1:-}" = '-h' ]; then
    printf 'pygraphprofile SCRIPT_PATHNAME TEST_NAME [COMMAND_ARGS] [FULL]\n'
    exit 0
fi


if [ -z "${1:-}" ] || [ ! -f "${1:-}" ]; then
    printf 'The pathname to the script must be specified and must be a real file!\n' >&2
    exit 1
elif [ -z "${2:-}" ]; then
    printf 'The name of the profiling test must be specified!\n' >&2
    exit 1
fi


cmd_args=''
if [ -n "${3:-}" ]; then
    cmd_args="$3"
fi


if [ -n "${4:-}" ]; then
    full_graph='TRUE'
elif [ -n "${3:-}" ] && ([ "${3}" = 'f' ] || [ "${3}" = 'F' ] || [ "${3}" = 'full' ] || [ "${3}" = 'FULL' ]); then
    full_graph='TRUE'
fi


[ ! -d "${HOME}/Diagrams" ] && mkdir "${HOME}/Diagrams"
if [ ! -d "${HOME}/Diagrams" ]; then
    printf 'Failed to create the "Diagrams" directory!\n' >&2
    exit 1
fi

if [ -n "${full_graph:-}" ]; then
    pycallgraph -e pycallgraph2* graphviz --output-file="${HOME}/Diagrams/${2}_PyCallGraph_Full.png" -- $1 $cmd_args
    [ -f "${HOME}/Diagrams/${2}_PyCallGraph_Full.png" ] && [ -x "$(command -v pngshrink)" ] && pngshrink "${HOME}/Diagrams/${2}_PyCallGraph_Full.png" && mv -f "${HOME}/Diagrams/${2}_PyCallGraph_Full_reduced.png" "${HOME}/Diagrams/${2}_PyCallGraph_Full.png"
else
    pycallgraph -e pycallgraph2* -e __future__* -e _abcoll* -e _bootlocale* -e _collections* -e _ctypes* -e _dummy_thread* -e _functools* -e _hashlib* -e _io* -e _ssl* -e _subprocess* -e _thread* -e _warnings* -e _weakref* -e _weakrefset* -e abc* -e arrow* -e asn1crypto* -e bable* -e backports* -e base64* -e binascii* -e boto3* -e botocore* -e calendar* -e codecs* -e CoffeeScript* -e collections* -e configparser* -e contextlib* -e copy_ref* -e cPickle* -e cpuinfo* -e Crypto* -e cryptography* -e cssmin* -e cStringIO* -e ctypes* -e cupy* -e datetime* -e decimal* -e django* -e doctest* -e dummy_threading* -e email* -e encodings* -e enum* -e errno* -e fasteners* -e flask* -e functools* -e genericpath* -e getopt* -e gettext* -e glob* -e hashlib* -e heapq* -e hmac* -e httplib* -e importlib* -e inspect* -e io* -e jinja2* -e json* -e jsonpickle* -e linecache* -e locale* -e logging* -e M2Crypto* -e MarkupSafe* -e markupsafe* -e math* -e mimetools* -e multiprocessing* -e netaddr* -e numpy* -e optparse* -e ordereddict* -e org* -e os* -e passlib* -e pdb* -e pbr* -e pdfkit* -e pickle* -e pkgutil* -e platform* -e posixpath* -e pprint* -e psutil* -e psycopg2* -e pymongo* -e pyOpenSSL* -e pytz* -e quopri* -e random* -e re* -e redis* -e regex* -e repr* -e requests* -e s3transfer* -e sets* -e signal* -e signals* -e slimit* -e smtplib* -e socket* -e sqlalchemy* -e SQLAlchemy* -e sre_compile* -e sre_parse* -e ssl* -e string* -e StringIO* -e subprocess* -e sys* -e tempfile* -e textwrap* -e threading* -e time* -e traceback* -e types* -e typing* -e unittest* -e urllib* -e UserDict* -e uu* -e uuid* -e uWSGI* -e warnings* -e weakref* -e werkzeug* -e wtforms* -e WTForms* -e xml* -e zipimport graphviz --output-file="${HOME}/Diagrams/${2}_PyCallGraph.png" -- $1 $cmd_args
    [ -f "${HOME}/Diagrams/${2}_PyCallGraph.png" ] && [ -x "$(command -v pngshrink)" ] && pngshrink "${HOME}/Diagrams/${2}_PyCallGraph.png" && mv -f "${HOME}/Diagrams/${2}_PyCallGraph_reduced.png" "${HOME}/Diagrams/${2}_PyCallGraph.png"
fi


([ ! -f "${HOME}/Diagrams/${2}_PyCallGraph.png" ] || [ ! -f "${HOME}/Diagrams/${2}_PyCallGraph_Full.png" ]) && exit 1

exit 0
