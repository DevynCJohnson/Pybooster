#!/usr/bin/env python3
# -*- coding: utf-8-unix; Mode: Python; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=python syntax=python.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax python; indent-mode python; eol unix; replace-tabs off; indent-width 4; tab-width 4; remove-trailing-space on; line-numbers on;
"""@brief View Python Documentation in a Window

@file pydocgtk
@version 2018.08.23
@author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
@copyright LGPLv3

@section LICENSE
GNU Lesser General Public License v3
Copyright (c) Devyn Collier Johnson, All rights reserved.

This software is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this software.
"""


import builtins

from importlib.machinery import EXTENSION_SUFFIXES
from linecache import cache, checkcache, getlines
from os.path import abspath, exists, normcase, realpath, splitext
from signal import SIGINT, SIG_DFL, signal
from sys import argv, maxsize, modules, exc_info
from typing import Optional
from types import BuiltinFunctionType, CodeType, FrameType, FunctionType, MethodType, ModuleType, TracebackType

from gi import require_version
require_version(r'Gtk', r'3.0')
from gi.repository import Gtk  # noqa: E402  # pylint: disable=C0413

try:  # Regular Expression module
    from regex import compile as rgxcompile, sub
except ImportError:
    from re import compile as rgxcompile, sub


signal(SIGINT, SIG_DFL)


__all__ = [
    # EXCEPTIONS #
    r'ErrorDuringImport',
    # DATA-RETRIEVING FUNCTIONS #
    r'getobjfile',
    r'getabsfile',
    r'getmodule',
    r'getsourcefile',
    r'findsource',
    # DOCUMENTATION FUNCTIONS #
    r'finddoc',
    r'cleandoc',
    r'getdocclean',
    r'getdoc',
    # MISCELLANEOUS FUNCTIONS #
    r'indentsize',
    r'findclass',
    r'getcomments',
    r'safeimport',
    r'locate',
    r'resolve',
    r'show_help'
]


# CONSTANTS & GLOBALS #


MODULESBYFILE = {}
FILESBYMODNAME = {}


# EXCEPTIONS #


class ErrorDuringImport(Exception):
    """Errors that occur while trying to import a module"""

    def __init__(self, _filename, _exc_info):
        """Initialize exception"""
        super(ErrorDuringImport, self).__init__(_filename, _exc_info)
        self.filename = _filename
        self.exc, self.value, self._tb = _exc_info

    def __str__(self):
        """Initialize the exception string"""
        return r'Problem in {0} - {1}: {2}'.format(self.filename, repr(self.exc.__name__), self.value)


# DATA-RETRIEVING FUNCTIONS #


def getobjfile(_object: object) -> str:  # noqa: C901
    """Find the file that defines an object"""
    if isinstance(_object, ModuleType):
        if hasattr(_object, r'__file__'):
            return _object.__file__
        raise TypeError(r'{!r} is a built-in module'.format(_object))
    elif isinstance(_object, type):
        if hasattr(_object, r'__module__'):
            _object = modules.get(_object.__module__)
            if hasattr(_object, r'__file__'):
                return _object.__file__
        raise TypeError(r'{!r} is a built-in class'.format(_object))
    elif isinstance(_object, MethodType):
        _object = _object.__func__
    if isinstance(_object, FunctionType):
        _object = _object.__code__
    if isinstance(_object, TracebackType):
        _object = _object.tb_frame
    if isinstance(_object, FrameType):
        _object = _object.f_code
    if isinstance(_object, CodeType):
        return _object.co_filename
    raise TypeError(r'{!r} is not a module, class, method, function, traceback, frame, or code object'.format(_object))


def getabsfile(_object: object, _filename: Optional[str] = None) -> str:
    """Return an absolute path to the source or compiled file for an object"""
    if _filename is None:
        _filename = getsourcefile(_object) or getobjfile(_object)
    return normcase(abspath(_filename))


def getmodule(_object: object, _filename: Optional[str] = None) -> object:  # noqa: C901  # pylint: disable=R0912
    """Return the module an object was defined in or `None` if not found"""
    if isinstance(_object, ModuleType):
        return _object
    elif hasattr(_object, r'__module__'):
        return modules.get(_object.__module__)
    # Try the filename to modulename cache
    elif _filename is not None and _filename in MODULESBYFILE:
        return modules.get(MODULESBYFILE[_filename])
    # Try the cache again with the absolute file name
    try:
        _file = getabsfile(_object, _filename)
        if _file in MODULESBYFILE:
            return modules.get(MODULESBYFILE[_file])
    except TypeError:
        return None
    # Update the filename to module name cache and check yet again
    for modname, module in list(modules.items()):
        if isinstance(module, ModuleType) and hasattr(module, r'__file__'):
            mfile = module.__file__
            if mfile == FILESBYMODNAME.get(modname, None):
                continue  # Have already mapped this module, so skip it
            FILESBYMODNAME[modname] = mfile
            mfile = getabsfile(module)
            # Always map to the name the module knows itself by
            MODULESBYFILE[mfile] = MODULESBYFILE[realpath(mfile)] = module.__name__
    if _file in MODULESBYFILE:
        return modules.get(MODULESBYFILE[_file])
    # Check the main module
    _main_mod = modules[r'__main__']
    if not hasattr(_object, r'__name__'):
        return None
    elif hasattr(_main_mod, _object.__name__):
        mainobject = getattr(_main_mod, _object.__name__)
        if mainobject is _object:
            return _main_mod
    # Check builtins
    builtin = modules[r'builtins']
    if hasattr(builtin, _object.__name__):
        builtinobject = getattr(builtin, _object.__name__)
        if builtinobject is _object:
            return builtin
    return None


def getsourcefile(_object: object) -> Optional[str]:
    """Return the filename that can be used to locate an object's source; Return None if the source cannot be found"""
    filename = getobjfile(_object)
    if filename.endswith(r'.pyc'):
        filename = (splitext(filename)[0] + r'.py')
    elif any(filename.endswith(s) for s in EXTENSION_SUFFIXES):
        return None
    if exists(filename):
        return filename
    # Only return a non-existent filename if the module has a PEP 302 loader or is in the linecache
    elif getattr(getmodule(_object, filename), r'__loader__', None) is not None or filename in cache:
        return filename
    return None


def findsource(_object: object) -> tuple:  # noqa: C901  # pylint: disable=R0912
    """Return the entire source file and starting line number for an object"""
    _file = getsourcefile(_object)
    if _file:  # Invalidate cache if needed
        checkcache(_file)
    else:
        _file = getobjfile(_object)
        # Allow filenames in form of "<something>" to pass through
        if not (_file.startswith(r'<') and _file.endswith(r'>')):
            raise OSError(r'Source code not available')
    module = getmodule(_object, _file)
    if module:
        lines = getlines(_file, module.__dict__)
    else:
        lines = getlines(_file)
    del _file
    if not lines:
        raise OSError(r'Could not get source code')
    elif isinstance(_object, ModuleType):
        return lines, 0
    elif isinstance(_object, type):
        name = _object.__name__
        pat = rgxcompile(r'^(\s*)class\s*' + name + r'\b')
        # Make some effort to find the best matching class definition
        candidates = []
        for _index, single_line in enumerate(lines):
            match = pat.match(single_line)
            if match:
                # If it is at toplevel, it is already the best one
                if single_line[0] == r'c':
                    return lines, _index
                # Else, add whitespace to candidate list
                candidates.append((match.group(1), _index))
        if candidates:
            # Sort by whitespace and by line number (less whitespace first)
            candidates.sort()
            return lines, candidates[0][1]
        else:
            raise OSError(r'Could not find class definition')
    elif isinstance(_object, MethodType):
        _object = _object.__func__
    if isinstance(_object, FunctionType):
        _object = _object.__code__
    if isinstance(_object, TracebackType):
        _object = _object.tb_frame
    if isinstance(_object, FrameType):
        _object = _object.f_code
    if isinstance(_object, CodeType):
        if not hasattr(_object, r'co_firstlineno'):
            raise OSError(r'Could not find function definition')
        lnum = _object.co_firstlineno - 1
        pat = rgxcompile(r'^(\s*def\s)|(\s*async\s+def\s)|(.*(?<!\w)lambda(:|\s))|^(\s*@)')
        while lnum > 0:
            if pat.match(lines[lnum]):
                break
            lnum = lnum - 1
        return lines, lnum
    raise OSError(r'Could not find code object')


# DOCUMENTATION FUNCTIONS #


def finddoc(obj: object) -> Optional[str]:  # noqa: C901  # pylint: disable=R0912
    """Find object documentation"""
    if isinstance(obj, type):
        for base in obj.__mro__:
            if base is not object:
                try:
                    doc = base.__doc__
                except AttributeError:
                    continue
                if doc is not None:
                    return doc
        return None
    elif isinstance(obj, MethodType):
        name = obj.__func__.__name__
        self = obj.__self__
        if isinstance(self, type) and getattr(getattr(self, name, None), r'__func__') is obj.__func__:
            cls = self
        else:
            cls = self.__class__
    elif isinstance(obj, FunctionType):
        name = obj.__name__
        cls = findclass(obj)
        if cls is None or getattr(cls, name) is not obj:
            return None
    elif isinstance(obj, BuiltinFunctionType):
        name = obj.__name__
        self = obj.__self__
        if isinstance(self, type) and (self.__qualname__ + r'.' + name == obj.__qualname__):
            cls = self
        else:
            cls = self.__class__
    elif isinstance(obj, property):
        func = obj.fget
        name = func.__name__
        cls = findclass(func)
        if cls is None or getattr(cls, name) is not obj:
            return None
    elif False if isinstance(obj, (type, FunctionType, MethodType)) else hasattr(type(obj), r'__get__'):
        name = obj.__name__
        cls = obj.__objclass__
        if getattr(cls, name) is not obj:
            return None
    else:
        return None
    for base in cls.__mro__:
        try:
            doc = getattr(base, name).__doc__
        except AttributeError:
            continue
        if doc is not None:
            return doc
    return None


def cleandoc(doc: str) -> Optional[str]:
    """Clean up indentation from docstrings"""
    try:
        lines = doc.expandtabs().split('\n')
    except UnicodeError:
        return None
    # Find minimum indentation of any non-blank lines after first line
    margin = maxsize
    for line in lines[1:]:
        content = len(line.lstrip())
        if content:
            indent = len(line) - content
            margin = min(margin, indent)
    # Remove indentation
    if lines:
        lines[0] = lines[0].lstrip()
    if margin < maxsize:
        for i in range(1, len(lines)):
            lines[i] = lines[i][margin:]
    # Remove any trailing or leading blank lines
    while lines and not lines[-1]:
        lines.pop()
    while lines and not lines[0]:
        lines.pop(0)
    return '\n'.join(lines)


def getdocclean(_object: object) -> Optional[str]:
    """Get and clean up the documentation string for an object"""
    try:
        doc = _object.__doc__
    except AttributeError:
        return None
    if doc is None:
        try:
            doc = finddoc(_object)
        except (AttributeError, TypeError):
            return None
    return None if not isinstance(doc, str) else cleandoc(doc)


def getdoc(_object: object) -> str:
    """Get the doc string or comments for an object"""
    result = getdocclean(_object) or getcomments(_object)
    return sub('^ *\n', r'', result.rstrip()) if result else r''


# MISCELLANEOUS FUNCTIONS #


def indentsize(_line: str) -> int:
    """Return the indent size (in spaces) at the start of a line of text"""
    expline = _line.expandtabs()
    return len(expline) - len(expline.lstrip())


def findclass(_func: object) -> object:
    """Find class object"""
    cls = modules.get(_func.__module__)
    if cls is None:
        return None
    for name in _func.__qualname__.split(r'.')[:-1]:
        cls = getattr(cls, name)
    return None if not isinstance(cls, type) else cls


def getcomments(_object: object) -> str or None:  # noqa: C901  # pylint: disable=R0912
    """Get lines of comments immediately preceding an object's source code; Returns None when source cannot be found"""
    try:
        lines, lnum = findsource(_object)
    except (OSError, TypeError):
        return None
    if isinstance(_object, ModuleType):
        # Look for a comment block at the top of the file
        start = 0
        if lines and lines[0][:2] == r'#!':
            start = 1
        while start < len(lines) and lines[start].strip() in (r'', r'#'):
            start += 1
        if start < len(lines) and lines[start][:1] == r'#':
            comments = []
            end = start
            while end < len(lines) and lines[end][:1] == r'#':
                comments.append(lines[end].expandtabs())
                end = end + 1
            return r''.join(comments)
    # Look for a preceding block of comments at the same indentation
    elif lnum > 0:
        indent = indentsize(lines[lnum])
        end = lnum - 1
        if end >= 0 and lines[end].lstrip()[:1] == r'#' and indentsize(lines[end]) == indent:
            comments = [lines[end].expandtabs().lstrip()]
            if end > 0:
                end -= 1
                comment = lines[end].expandtabs().lstrip()
                while comment[:1] == r'#' and indentsize(lines[end]) == indent:
                    comments[:0] = [comment]
                    end -= 1
                    if end < 0:
                        break
                    comment = lines[end].expandtabs().lstrip()
            while comments and comments[0].strip() == r'#':
                comments[:1] = []
            while comments and comments[-1].strip() == r'#':
                comments[-1:] = []
            return r''.join(comments)
    return None


def safeimport(_path: str) -> Optional[object]:
    """Import a module and handle errors; Return `None` if the module is not found

    If the module is found, but an exception occurs, it is wrapped in an
    ErrorDuringImport exception and reraised. Unlike __import__, if a
    package `path` is specified, the module at the end of the `path` is returned
    (not the package at the beginning).
    """
    try:
        module = __import__(_path)
    except ImportError:  # Did the error occur before or after the module was found?
        info = exc_info()
        exc = info[0]
        value = info[1]
        if _path in modules:  # An error occurred while executing the imported module
            raise ErrorDuringImport(modules[_path].__file__, info)
        elif exc is SyntaxError:  # A SyntaxError occurred before the module executed
            raise ErrorDuringImport(value.filename, info)
        elif exc is ImportError and value.name == _path:  # No such module in the path
            return None
        else:  # Some other error occurred during the importing process
            raise ErrorDuringImport(_path, exc_info())
    for part in _path.split(r'.')[1:]:
        try:
            module = getattr(module, part)
        except AttributeError:
            return None
    return module


def locate(_path: str) -> Optional[object]:
    """Locate an object by name or dotted path, importing as necessary"""
    parts = [part for part in _path.split(r'.') if part]
    module = None
    i = 0
    while i < len(parts):
        nextmodule = safeimport(r'.'.join(parts[:i + 1]))
        if nextmodule:
            module = nextmodule
            i += 1
        else:
            break
    _object = module if module else builtins
    for part in parts[i:]:
        try:
            _object = getattr(_object, part)
        except AttributeError:
            return None
    return _object


def resolve(thing: object) -> Optional[tuple]:
    """Given an object or a path to an object, get the object and its name"""
    if isinstance(thing, str):
        _object = locate(thing)
        if _object is None:
            raise ImportError
        return _object, thing
    name = getattr(thing, r'__name__', None)
    return thing, name if isinstance(name, str) else None


def show_help(displaytext: str) -> None:
    """GTK window for PyDocGTK"""
    window = Gtk.Window(
        default_height=400,
        default_width=500,
        title=r'PyDocGTK',
        type=Gtk.WindowType.TOPLEVEL
    )
    window.set_skip_taskbar_hint(False)
    window.set_skip_pager_hint(False)
    window.set_decorated(True)
    window.connect(r'key-press-event', Gtk.main_quit)
    window.connect(r'destroy', Gtk.main_quit)
    textbuffer = Gtk.TextBuffer()
    textbuffer.set_text(displaytext)
    textview = Gtk.TextView(buffer=textbuffer)
    textview.set_wrap_mode(Gtk.WrapMode.WORD)
    textview.set_editable(False)
    textview.set_cursor_visible(False)
    scroll = Gtk.ScrolledWindow()
    scroll.set_shadow_type(Gtk.ShadowType.OUT)
    scroll.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
    scroll.add(textview)
    window.add(scroll)
    window.show_all()
    Gtk.main()


if __name__ == '__main__':
    try:
        INPUT = str(argv[1]).strip()
    except IndexError:
        show_help('Wrong Usage!\nUsage: pydocgtk NAME')
        raise SystemExit(1)
    try:
        show_help(getdoc(resolve(INPUT)[0]))
    except ImportError:
        show_help(r'No Python documentation found for `{0}`.'.format(INPUT))
    except BaseException:
        show_help('An error occurred.\nNo Python documentation found for `{0}`.'.format(INPUT))
        raise SystemExit(1)
    raise SystemExit()
