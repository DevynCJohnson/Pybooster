#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Convert Windows newlines (\r\n) to Unix newlines (\n)
#' @file win2unixlines
#' @version 2019.12.26
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ -z "${1:-}" ]; then
    printf 'ERROR: A parameter is required!\n' >&2
    exit 1
elif [ "$1" = '--help' ] || [ "$1" = 'help' ] || [ "$1" = '-h' ]; then
    printf '%s\n%s\n%s\n%s\n' \
        'Convert Windows newlines (\r\n) to Unix newlines (\n) using one of the following methods:' \
        ' - Specify the pathname of each file to convert.' \
        ' - Specify the directory of files to convert.' \
        ' - Specify the pathname of each file and directories of files to convert.'
    exit 0
fi


# GLOBALS #


POSIXLY_CORRECT=1
exit_status=0


# MAIN #


for file in "$@"; do
    if [ -z "${file:-}" ]; then  # No files specified
        exit_status=1
        printf 'There are no files to convert.\n'
        continue
    elif [ -d "$file" ] && [ -r "$file" ]; then  # Workable directory
        # shellcheck disable=SC2016
        find "$file" -empty -prune -o -type f -readable -writable -print0 2> /dev/null | xargs -0 -L 1 -P 0 sh -c 'iconv -f utf16 -t utf8 "${1}" -o "${1}.utf8"' _
        find "$file" -empty -prune -o -type f -readable -writable -name "*.utf8" -print0 2> /dev/null | xargs -0 -L 1 -P 0 sed -i -E -e '1s/\xEF\xBB\xBF//;s/\x00//g;s/\r//g;s/\uFEFF//g;'
        [ -x "$(command -v rename)" ] && find "$file" -empty -prune -o -type f -readable -writable -name '*.utf8' -print0 | xargs -0 -P 8 rename --force 's/.utf8//'
    elif [ -f "$file" ] && [ -r "$file" ] && [ -w "$file" ]; then  # Workable file
        { temp_file="$(mktemp)" && iconv -f utf16 -t utf8 "$file" -o "$temp_file" && sed -e '1s/\xEF\xBB\xBF//;s/\x00//g;s/\r//g;s/\uFEFF//g;' "$temp_file" > "$file" && rm -f "$temp_file"; } &
    elif [ -d "$file" ] && [ ! -r "$file" ]; then  # Unable to open directory
        printf '%s: The specified directory is non-readable or non-existent!\n' "$file" >&2
        exit_status=1
    elif [ ! -r "$file" ] || [ ! -w "$file" ]; then  # Unable to manipulate file
        printf '%s: The specified file is non-readable, non-writable, or non-existent!\n' "$file" >&2
        exit_status=1
    fi
done


wait

exit "$exit_status"
