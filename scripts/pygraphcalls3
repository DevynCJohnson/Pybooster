#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Graph the calls of a Python3 project
#' @file pygraphcalls3
#' @version 2019.07.26
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ ! -x "$(command -v pyan3)" ]; then
    printf 'pyan3: command not found!\n' >&2
    exit 1
elif [ ! -x "$(command -v dot)" ]; then
    printf 'dot: command not found!\n' >&2
    exit 1
elif [ "${1:-}" = '--help' ] || [ "${1:-}" = '-h' ]; then
    printf 'pygraphcalls3 DIRECTORY PROJECT_NAME\n'
    exit 0
fi


if [ -z "${1:-}" ]; then
    printf 'The directory name of the project must be specified!\n' >&2
    exit 1
elif [ -z "${2:-}" ]; then
    printf 'The name of the project must be specified!\n' >&2
    exit 1
fi


[ ! -d "${HOME}/Diagrams" ] && mkdir "${HOME}/Diagrams"
if [ ! -d "${HOME}/Diagrams" ]; then
    printf 'Failed to create the "Diagrams" directory!\n' >&2
    exit 1
fi


FILES="$(find "${1}" -type f -name "*.py" -not \( -path "*/.bzr/*" -o -path "*/.cvs/*" -o -path "*/.git/*" -o -path "*/.hg/*" -o -path "*/.svk/*" -o -path "*/.svn/*" -o -path "*/bin/*" -o -path "*/build/*" -o -path "*/debugging/*" -o -path "*/doc/*" -o -path "*/log/*" -o -path "*/logging/*" -o -path "*/logs/*" -o -path "*/temp/*" -o -path "*/testing/*" -o -path "*/tmp/*" \) -exec printf '%s ' '{}' +)"
# shellcheck disable=SC2086
pyan3 $FILES --dot --colored --annotated --grouped --grouped-alt --nested-groups > "${HOME}/Diagrams/${2}.dot"

[ ! -f "${HOME}/Diagrams/${2}.dot" ] && exit 1


dot -q -Gconcentrate=true -Gnewrank=true -Gnodesep=2 -Granksep=2 -Tsvg -x -o "${HOME}/Diagrams/${2}.svg" "${HOME}/Diagrams/${2}.dot" &
dot -q -Gnewrank=true -Gnodesep=1 -Goverlap=false -Granksep=2 -Tsvg -x -o "${HOME}/Diagrams/${2}_2.svg" "${HOME}/Diagrams/${2}.dot" &
dot -q -Gnewrank=true -Gnodesep=1 -Goverlap=scale -Granksep=2 -Tsvg -x -o "${HOME}/Diagrams/${2}_3.svg" "${HOME}/Diagrams/${2}.dot" &
neato -q -Gnewrank=true -Goverlap=false -Gsplines=ortho -Tsvg -x -o "${HOME}/Diagrams/${2}_Spring.svg" "${HOME}/Diagrams/${2}.dot" &
neato -q -Gnewrank=true -Goverlap=scale -Gsplines=ortho -Tsvg -x -o "${HOME}/Diagrams/${2}_Spring_2.svg" "${HOME}/Diagrams/${2}.dot" &
sfdp -q -Gnewrank=true -Gnodesep=3 -Goverlap=false -Granksep=4 -Gsplines=ortho -Tsvg -x -o "${HOME}/Diagrams/${2}_Undirected.svg" "${HOME}/Diagrams/${2}.dot" &
sfdp -q -Gnewrank=true -Gnodesep=1 -Goverlap=scale -Granksep=2 -Gsplines=ortho -Tsvg -x -o "${HOME}/Diagrams/${2}_Undirected_2.svg" "${HOME}/Diagrams/${2}.dot" &
twopi -q -Gnewrank=true -Granksep=4 -Tsvg -x -o "${HOME}/Diagrams/${2}_Radial.svg" "${HOME}/Diagrams/${2}.dot" &
twopi -q -Gnewrank=true -Goverlap=false -Granksep=2 -Tsvg -x -o "${HOME}/Diagrams/${2}_Radial_2.svg" "${HOME}/Diagrams/${2}.dot" &
twopi -q -Gnewrank=true -Goverlap=scale -Granksep=1 -Tsvg -x -o "${HOME}/Diagrams/${2}_Radial_3.svg" "${HOME}/Diagrams/${2}.dot" &
sleep 180
remaining_jobs="$(jobs -p)"
for jobid in ${remaining_jobs}; do
    kill -15 "$jobid"
done
wait
if [ -x "$(command -v minifyxml)" ]; then
    [ -f "${HOME}/Diagrams/${2}.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}.svg" &
    [ -f "${HOME}/Diagrams/${2}_2.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_2.svg" &
    [ -f "${HOME}/Diagrams/${2}_3.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_3.svg" &
    [ -f "${HOME}/Diagrams/${2}_Radial.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_Radial.svg" &
    [ -f "${HOME}/Diagrams/${2}_Radial_2.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_Radial_2.svg" &
    [ -f "${HOME}/Diagrams/${2}_Radial_3.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_Radial_3.svg" &
    [ -f "${HOME}/Diagrams/${2}_Spring.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_Spring.svg" &
    [ -f "${HOME}/Diagrams/${2}_Spring_2.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_Spring_2.svg" &
    [ -f "${HOME}/Diagrams/${2}_Undirected.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_Undirected.svg" &
    [ -f "${HOME}/Diagrams/${2}_Undirected_2.svg" ] && minifyxml --svg --inplace --remove-all-metadata "${HOME}/Diagrams/${2}_Undirected_2.svg" &
    wait
fi


[ ! -f "${HOME}/Diagrams/${2}.svg" ] && exit 1

exit 0
