#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Find the top-level directory of the GIT project and execute the specified command
#' @file run-in-git-proj
#' @version 2019.05.12
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ -z "${1:-}" ]; then
    printf 'ERROR: No command was specified!\n' >&2
    exit 1
fi


if [ -d './.git' ]; then
    sh -c "${@}"
elif [ -d '../.git' ]; then
    cd .. || { printf 'Failed to change directory!\n' >&2; exit 1; }
    sh -c "${@}"
elif [ -d '../../.git' ]; then
    cd ../.. || { printf 'Failed to change directory!\n' >&2; exit 1; }
    sh -c "${@}"
elif [ -d '../../../.git' ]; then
    cd ../../.. || { printf 'Failed to change directory!\n' >&2; exit 1; }
    sh -c "${@}"
elif [ -d '../../../../.git' ]; then
    cd ../../../.. || { printf 'Failed to change directory!\n' >&2; exit 1; }
    sh -c "${@}"
elif [ -d '../../../../../.git' ]; then
    cd ../../../../.. || { printf 'Failed to change directory!\n' >&2; exit 1; }
    sh -c "${@}"
elif [ -d '../../../../../../.git' ]; then
    cd ../../../../../.. || { printf 'Failed to change directory!\n' >&2; exit 1; }
    sh -c "${@}"
else
    [ -x "$(command -v ezwin)" ] && ezwin --err "No Git project found" && exit 1
    [ -x "$(command -v zenity)" ] && zenity --error --text="No Git project found" --width=350 && exit 1
    [ -x "$(command -v dialog)" ] && dialog --title 'Not Found' --msgbox "No Git project found" 8 32 && exit 1
    [ -x "$(command -v whiptail)" ] && whiptail --title 'Not Found' --msgbox "No Git project found" 8 32 && exit 1
    printf 'ERROR: No Git project found!\n' >&2
    exit 1
fi


exit $?
