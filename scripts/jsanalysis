#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Wrapper for scanning JavaScript files with various syntax checkers
#' @file jsanalysis
#' @version 2019.12.26
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ -z "${1:-}" ]; then
    printf 'ERROR: A parameter is required!\n' >&2
    exit 1
elif [ "$1" = '--help' ] || [ "$1" = 'help' ] || [ "$1" = '-h' ]; then
    printf 'Specify the pathname of each JavaScript file to scan.\n'
    exit 0

fi


# GLOBALS #


export LANG='en_US.UTF-8'
export LC_ALL='C'
export LC_CTYPE='C'


# SETUP COMMANDS #


JSHINT_EXISTS=0
if [ -n "$(command -v jshint)" ]; then
    JSHINT_EXISTS=1
else
    printf 'jshint: command not found!\n' >&2
fi

CODE_ANALYSIS_EXISTS=0
if [ -x "$(command -v code-analysis)" ]; then
    CODE_ANALYSIS_EXISTS=1
else
    printf 'code-analysis: command not found!\n' >&2
fi


# Use a faster alternative if possible
if [ -x "$(command -v mawk)" ]; then
    awk_cmd() { mawk "${1}"; }
elif [ -x "$(command -v nawk)" ]; then
    awk_cmd() { nawk "${1}"; }
else
    awk_cmd() { awk "${1}"; }
fi


# FUNCTIONS #


#' Run JS-Hint
jshint_func() {
    if [ "$JSHINT_EXISTS" -eq 1 ]; then
        printf '======  *JSHINT*  ======\n'
        jshint "${1}" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    fi
}


#' Run Code-Analysis
code_analysis_func() {
    if [ "$CODE_ANALYSIS_EXISTS" -eq 1 ]; then
        code-analysis "${1}"
    fi
}


# MAIN #


for file in "$@"; do
    { [ ! -r "$file" ] || [ -d "$file" ]; } && printf '%s: The specified file is non-readable or non-existent!\n' "$file" >&2 && continue

    JSHINT_BUFFER="/tmp/$(uuid).jsanalysis.tmp"
    CODE_ANALYSIS_BUFFER="/tmp/$(uuid).jsanalysis.tmp"

    jshint_func "$file" > "${JSHINT_BUFFER}" &
    code_analysis_func "$file" > "${CODE_ANALYSIS_BUFFER}" &

    wait

    printf "%s\\n%s\\n" "$(cat < "${JSHINT_BUFFER}")" "$(cat < "${CODE_ANALYSIS_BUFFER}")"
    rm -f "${JSHINT_BUFFER}" "${CODE_ANALYSIS_BUFFER}" || true


done
