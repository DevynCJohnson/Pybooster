#!/usr/bin/env python3
# -*- coding: utf-8-unix; Mode: Python; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=python syntax=python.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax python; indent-mode python; eol unix; replace-tabs off; indent-width 4; tab-width 4; remove-trailing-space on; line-numbers on;
"""@brief Checks for invalid Python-code-checker comments

@file noqa_checker
@version 2018.04.27
@author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
@copyright LGPLv3

@section LICENSE
GNU Lesser General Public License v3
Copyright (c) Devyn Collier Johnson, All rights reserved.

This software is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this software.
"""


# pylint: disable=C0103


from sys import argv, stderr, stdout

try:
    from regex import compile as re_compile  # noqa: E402  # pylint: disable=C0411
except ImportError:
    from re import compile as re_compile  # noqa: E402  # pylint: disable=C0411


# FUNCTIONS #


def getfile_list(_filename: str) -> list:
    """Get file contents and return as a list"""
    with open(_filename, mode=r'rt', encoding=r'utf-8') as _file:
        _out = _file.readlines()
    return _out


# MAIN #


if __name__ == '__main__':  # noqa: C901
    # GET SRC #
    if len(argv) == 2:
        try:
            SRC_LINE_LIST = getfile_list(argv[1])
            FILEPATH = argv[1]
        except PermissionError:
            stderr.write(r'PermissionError!\n')
            raise SystemExit(1)
        except IOError:
            stderr.write(r'IOError!')
            raise SystemExit(1)
        if argv[0].lower() in (r'help', r'--help', r'-h'):
            stdout.write('Specify the pathname of a Python script to scan for invalid code-checker comments.\n')
            raise SystemExit(0)
    else:
        stderr.write(r'Invalid parameters!\n')
        raise SystemExit(1)
    # SET CONSTANTS & VARIABLES #
    REGEX_FLAKE8 = re_compile(r'# (flake8: noqa|flake8: ignore|flake8 noqa|flake8 ignore)')
    REGEX_NOQA = re_compile(r'# (noqa [ ]*[A-Z0-9]+|noqa$|noqa[ ]*#.+)')
    REGEX_PYLINT = re_compile(r'# pylint[ :\t]*disable[ ]*=[ ]*[A-Z0-9,]+')
    LINE_NUM = 1
    # ANALYZE SRC #
    for LINE in SRC_LINE_LIST:  # Scan one line at-a-time
        if not LINE.strip():  # Blank line
            LINE_NUM += 1
            continue
        if r'noqa' in LINE:
            _match = REGEX_NOQA.search(LINE)
            if _match:
                stderr.write(FILEPATH + r':' + str(LINE_NUM) + r':' + str(_match.start()) + r': NOQA : Specify error to ignore and use the format `# noqa: ERROR,ERROR`.' + '\n' + LINE + '\n')
        if r'# pylint' in LINE and r' disable' in LINE:
            _match = REGEX_PYLINT.search(LINE)
            if _match and r'# pylint: disable=' not in LINE:
                stderr.write(FILEPATH + r':' + str(LINE_NUM) + r':' + str(_match.start()) + r': PYLINT : Invalid formatting in PyLint comment. Use the format `# pylint: disable=ERROR,ERROR`.' + '\n' + LINE + '\n')
        if r'# flake8' in LINE:
            _match = REGEX_FLAKE8.search(LINE)
            if _match:
                stderr.write(FILEPATH + r':' + str(LINE_NUM) + r':' + str(_match.start()) + r': FLAKE8 : Do not use flake8 comments!' + '\n' + LINE + '\n')
        LINE_NUM += 1
