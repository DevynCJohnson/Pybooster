#!/usr/bin/env python3
# -*- coding: utf-8-unix; Mode: Python; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=python syntax=python.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax python; indent-mode python; eol unix; replace-tabs off; indent-width 4; tab-width 4; remove-trailing-space on; line-numbers on;
"""@brief Generate art using math and export as PNG files or math formulas

@file genmathart
@version 2017.12.25
@author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
@copyright LGPLv3

@section LICENSE
GNU Lesser General Public License v3
Copyright (c) Devyn Collier Johnson, All rights reserved.

This software is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this software.
"""


# pylint: disable=R0903


import argparse
from base64 import b64decode, b64encode
import configparser
from itertools import repeat
from multiprocessing import cpu_count, Pool, Process, ProcessError, Queue
from os import urandom
from os.path import exists, expanduser, isdir, isfile
from pickle import dumps, loads
from sys import stderr, stdout
from time import strftime

from pybooster.xmath import clamp, cot, csc, phi, sec
from PIL import Image

try:  # Random Modules
    from numpy import arccos as acos, arctan as atan, cos, log1p, pi, sin, tan  # noqa: E402  # pylint: disable=C0411
    from numpy.random import choice, Random, random, seed  # noqa: E402  # pylint: disable=C0411
except ImportError:
    from math import acos, atan, cos, log1p, pi, sin, tan  # noqa: E402  # pylint: disable=C0411
    from random import choice, Random, random, seed  # noqa: E402  # pylint: disable=C0411


# CONSTANTS #


RESOLUTION_PAIRS = (
    # Width, Height
    (320, 240),  # QVGA
    (480, 320),  # HVGA
    (640, 480),  # VGA/NTSC
    (800, 600),  # SVGA
    (1024, 576),  # PAL
    (1280, 800),  # WXGA
    (1600, 900),
    (1920, 1080),  # HD/1K
    (2048, 1080),  # 2K
    (2560, 1080),  # UWHD
    (3840, 2160),  # UHD-1
    (4096, 2160)  # 4K
)


PICDIR = expanduser(r'~') + r'/Pictures/'


# VARIABLE CLASSES #


class Xvar:
    """Class for mathematical X variable"""

    def __str__(self) -> str:
        """Get string representation of X"""
        return r'x'

    @staticmethod
    def eval(x_var: float, y_var: float) -> float:  # pylint: disable=W0613
        """Evaluate X"""
        return x_var


class Yvar:
    """Class for mathematical Y variable"""

    def __str__(self) -> str:
        """Get string representation of Y"""
        return r'y'

    @staticmethod
    def eval(x_var: float, y_var: float) -> float:  # pylint: disable=W0613
        """Evaluate Y"""
        return y_var


# BASIC MATH CLASSES #


class Multiply:
    """Class for multiplication expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create multiplication expression"""
        self.lhs = buildexpr(rand_object, prob * prob)
        self.rhs = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of the multiplcation formula"""
        return str(self.lhs) + r'*' + str(self.rhs)

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate multiplication"""
        return self.lhs.eval(x_var, y_var) * self.rhs.eval(x_var, y_var)


# ADVANCED MATH CLASSES #


class Acos:
    """Class for arccosine expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using arccosine"""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 1.0)

    def __str__(self) -> str:
        """Get string representation of arccosine"""
        return r'acos(clamp(' + str(self.num) + r'*' + str(self.arg) + r'))'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate arccosine"""
        return acos(clamp(self.num * self.arg.eval(x_var, y_var)))


class Atan:
    """Class for arctangent expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using arctangent"""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 4.0)

    def __str__(self) -> str:
        """Get string representation of arctangent"""
        return r'atan(' + str(self.num) + r'*' + str(self.arg) + r')'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate arctangent"""
        return atan(self.num * self.arg.eval(x_var, y_var))


class Cos:
    """Class for cosine expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using cosine"""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.choice([pi, rand_object.uniform(-1.0, 4.0)])

    def __str__(self) -> str:
        """Get string representation of cosine"""
        return r'cos(' + str(self.num) + r'*' + str(self.arg) + r')'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate cosine"""
        return cos(self.num * self.arg.eval(x_var, y_var))


class Cot:
    """Class for cotangent expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using cotangent"""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 4.0)

    def __str__(self) -> str:
        """Get string representation of cotangent"""
        return r'cot(' + str(self.num) + r'*' + str(self.arg) + r')'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate cotangent"""
        return cot(self.num * self.arg.eval(x_var, y_var))


class Csc:
    """Class for cosecant expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using cosecant"""
        self.arg = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of cosecant"""
        return r'csc(' + str(self.arg) + r')'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate cosecant"""
        return csc(self.arg.eval(x_var, y_var))


class Log1P:
    """Class for log1p expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using log1p"""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 4.0)
        self.num2 = rand_object.uniform(-0.9, 6.0)

    def __str__(self) -> str:
        """Get string representation of log1p"""
        return r'log1p(max(' + str(self.num) + r'*' + str(self.arg) + r', ' + str(self.num2) + r'))'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate log1p"""
        return log1p(max(self.num * self.arg.eval(x_var, y_var), self.num2))


class Phi:
    """Class for phi expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using phi"""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 4.0)

    def __str__(self) -> str:
        """Get string representation of phi"""
        return r'phi(' + str(self.num) + r'*' + str(self.arg) + r')'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate phi"""
        return phi(self.num * self.arg.eval(x_var, y_var))


class Sec:
    """Class for secant expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using secant"""
        self.arg = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of secant"""
        return r'sec(' + str(self.arg) + r')'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate secant"""
        return sec(self.arg.eval(x_var, y_var))


class Sin:
    """Class for sine pi expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using sine"""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 4.0)

    def __str__(self) -> str:
        """Get string representation of sine"""
        return r'sin(' + str(self.num) + r'*' + str(self.arg) + r')'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate sine"""
        return sin(self.num * self.arg.eval(x_var, y_var))


class Tan:
    """Class for tangent expressions in math formulas"""

    def __init__(self, prob: float, rand_object: object) -> None:
        """Create mathematical expression using tangent"""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 4.0)

    def __str__(self) -> str:
        """Get string representation of tangent"""
        return r'tan(' + str(self.num) + r'*' + str(self.arg) + r')'

    def eval(self, x_var: float, y_var: float) -> float:
        """Evaluate tangent"""
        return tan(self.num * self.arg.eval(x_var, y_var))


# GENERAL FUNCTIONS #


def buildexpr(rand_object: object, prob: float = 0.99) -> object:
    """Randomly select a mathematical expression"""
    reseed(rand_object)
    math_funcs = [Multiply, Cos, Sin]
    math_vars = [Xvar, Yvar]
    rare_funcs = [Acos, Atan, Csc, Cot, Log1P, Phi, Sec, Tan]
    if prob > 0.01 and prob < 0.06:
        return rand_object.choice(rare_funcs)(prob, rand_object)
    elif random() < prob:
        rand_object.shuffle(math_funcs)
        return rand_object.choice(math_funcs)(prob, rand_object)
    return rand_object.choice(math_vars)()


def getexpr_threaded(color_queue: object, prob: float = 0.99, rand_object: object = None) -> None:
    """Retrieve a mathematical expression generated by buildexpr"""
    reseed(rand_object)
    color_queue.put(buildexpr(rand_object, prob), block=False, timeout=None)
    color_queue.close()


def format_for_starmap(headings: list, lst_of_lsts: list) -> list:
    """Prepend one item from headings to the list of lists; this will create the needed format for starmap"""
    output = []
    i = 0
    for lst in lst_of_lsts:
        tmp = lst[:]
        tmp.insert(0, headings[i])
        output.append(tuple(tmp))
        i += 1
    return output


def fix_img_format(imgformat: str = r'PNG') -> str:
    """Ensure that the given image format string is in a format that Pillow will understand"""
    imgformat = imgformat.replace(r'.', r'').replace(r'*', r'').strip().upper()
    return imgformat.replace(r'BITMAP', r'BMP').replace(r'JPG', r'JPEG').replace(r'TIF', r'TIFF')


def imgformatfext(imgformat: str = r'PNG') -> str:
    """Return the appropriate file extention (as a string) for the given image format"""
    if imgformat.upper() == r'PNG':
        return r'.png'
    elif imgformat.upper() == r'BMP':
        return r'.bmp'
    elif imgformat.upper() in (r'JPEG', r'JPG'):
        return r'.jpeg'
    elif imgformat.upper() in (r'TIF', r'TIFF'):
        return r'.tif'
    return r'.png'


def get_suitable_height(width: int) -> int:
    """Select the most appropriate image height (in pixels) based on the given width"""
    for test in RESOLUTION_PAIRS:
        if width == test[0]:
            return test[1]
    return width


def reseed(rand_object: object = None) -> None:
    """Seed the random number generator; this function is multithreading and multiprocessing compatible"""
    if rand_object is None:
        seed(int.from_bytes(urandom(32), byteorder=choice([r'big', r'little'])) % 4294967295)
        return
    elif random() % 3 == 1 or random() % 3 == 2:
        rand_object.seed(int.from_bytes(urandom(32), byteorder=choice([r'big', r'little'])) % int(4294967295 / int(strftime(r'%M%m%S'))))
        return
    rand_object.seed(int.from_bytes(urandom(32), byteorder=choice([r'big', r'little'])) % 4294967295)


def datadump(_data: object) -> str:
    """Pickle data and then encode the data in base64"""
    return str(b64encode(dumps(_data, fix_imports=False)).decode(r'utf-8'))


def loaddata(_data: str) -> bytes:
    """Load the given pickled base64 data"""
    return loads(b64decode(_data), fix_imports=False, encoding=r'ASCII', errors=r'strict')


# GRAPHICS FUNCTIONS #


def plot_image(red: object, green: object, blue: object, imgwidth: int = 600) -> object:
    """Generate an RGB color plot for the given math expressions and evaluate and plot color values within the specified image size"""
    # Image Size
    px_per_unit = (imgwidth - 1) // 2
    imgheight = get_suitable_height(imgwidth)
    # Generate Pixels
    red_plane = Image.new(r'L', (imgwidth, imgheight))
    green_plane = Image.new(r'L', (imgwidth, imgheight))
    blue_plane = Image.new(r'L', (imgwidth, imgheight))
    for y_point in range(imgwidth):
        for x_point in range(imgwidth):
            # Convert pixel location to [-1,1] coordinates and scale result to [0,255]
            x_plot = float(x_point - px_per_unit) / px_per_unit
            y_plot = -float(y_point - px_per_unit) / px_per_unit
            red_plane.putpixel((x_point, y_point), int(red.eval(x_plot, y_plot) * 127.5 + 127.5))
            green_plane.putpixel((x_point, y_point), int(green.eval(x_plot, y_plot) * 127.5 + 127.5))
            blue_plane.putpixel((x_point, y_point), int(blue.eval(x_plot, y_plot) * 127.5 + 127.5))
    # color_plane = ((int(red.eval(float(x_point - px_per_unit) / px_per_unit, -float(y_point - px_per_unit) / px_per_unit) * 127.5 + 127.5), int(green.eval(float(x_point - px_per_unit) / px_per_unit, -float(y_point - px_per_unit) / px_per_unit) * 127.5 + 127.5), int(blue.eval(float(x_point - px_per_unit) / px_per_unit, -float(y_point - px_per_unit) / px_per_unit) * 127.5 + 127.5)) for y_point in range(imgheight) for x_point in range(imgwidth))
    # return Image.new(r'RGB', (imgwidth, imgheight)).putdata(list(color_plane))
    return Image.merge(r'RGB', (red_plane, green_plane, blue_plane))


def calc_image(imgformat: str, imgwidth: int, outdir: str, img_or_math: int) -> str:  # pylint: disable=R0914
    """Perform calculations for mathematical art"""
    local_rand = Random()
    reseed(local_rand)
    image_name = strftime(r'%m%d%H%M%S') + r'_' + str(Random().random()).replace(r'.', r'')
    while True:
        # Try to generate a mathematical image, and retry if the math fails
        try:
            # Prepare one thread per color-band
            red_queue = Queue()
            green_queue = Queue()
            blue_queue = Queue()
            red_worker = Process(group=None, target=getexpr_threaded, name=r'Red_Worker', args=(red_queue, local_rand.uniform(0.85, 0.99), Random()))
            green_worker = Process(group=None, target=getexpr_threaded, name=r'Green_Worker', args=(green_queue, local_rand.uniform(0.85, 0.99), Random()))
            blue_worker = Process(group=None, target=getexpr_threaded, name=r'Blue_Worker', args=(blue_queue, local_rand.uniform(0.85, 0.99), Random()))
            # Generate math expressions representing the image's color
            red_worker.start()
            green_worker.start()
            blue_worker.start()
            red = red_queue.get(block=True, timeout=None)
            red_worker.join(timeout=None)
            green = green_queue.get(block=True, timeout=None)
            green_worker.join(timeout=None)
            blue = blue_queue.get(block=True, timeout=None)
            blue_worker.join(timeout=None)
            del red_worker, green_worker, blue_worker
            del red_queue, green_queue, blue_queue
            # Create image using the generated expressions
            image = plot_image(red, green, blue, imgwidth)
            break
        except (ArithmeticError, RecursionError, ValueError):
            continue
        except MemoryError:
            red_worker.terminate()
            green_worker.terminate()
            blue_worker.terminate()
            del image, red_worker, green_worker, blue_worker
            del red_queue, green_queue, blue_queue
            return r''
        except (KeyboardInterrupt, ProcessError):
            red_worker.terminate()
            green_worker.terminate()
            blue_worker.terminate()
            return r''
    # Save image
    if img_or_math <= 0:
        image.save(outdir + r'image_' + image_name + imgformatfext(imgformat), format=imgformat)
    # Art formula buffer
    if img_or_math >= 0:
        return r'[image_' + image_name + ']\nRed=' + str(red) + '\nRedCode=' + datadump(red) + '\nGreen=' + str(green) + '\nGreenCode=' + datadump(green) + '\nBlue=' + str(blue) + '\nBlueCode=' + datadump(blue) + '\n\n'
    return r''


def calc_from_maf(mafsection: str, maffile: configparser.ConfigParser, imgformat: str = r'PNG', imgwidth: int = 600, outdir: str = PICDIR) -> None:
    """Generate one or more PNG images from *.maf files"""
    # Load math expressions from *.maf file
    red = loaddata(maffile[mafsection][r'RedCode'])
    green = loaddata(maffile[mafsection][r'GreenCode'])
    blue = loaddata(maffile[mafsection][r'BlueCode'])
    # Create image using the loaded expressions
    image = plot_image(red, green, blue, imgwidth)
    image.save(outdir + mafsection + imgformatfext(imgformat), format=imgformat)


def generate_image(num_imgs: int = 1, imgformat: str = r'PNG', imgwidth: int = 600, outdir: str = PICDIR, img_or_math: int = 0) -> None:
    """Generate one or more random PNG images of psychedelic art"""
    # Error Checking
    if not exists(outdir) or not isdir(outdir):
        stderr.write(outdir + ': The specified directory is non-readable or non-existent!\n')
        raise SystemExit(1)
    if num_imgs < 1:
        num_imgs = 1
    # Setup
    reseed()
    fname = strftime(r'%m%d%H%M%S')
    # Create image using parallel processing
    maxpoolsize = cpu_count()
    if maxpoolsize > num_imgs:
        poolsize = num_imgs
    else:
        poolsize = maxpoolsize
    with Pool(poolsize) as threadpool:
        try:
            filebuf = threadpool.starmap(calc_image, tuple(repeat([imgformat, imgwidth, outdir, img_or_math], num_imgs)))
        except (KeyboardInterrupt, MemoryError):
            threadpool.close()
            threadpool.terminate()
            raise SystemExit(1)
    # Create mathematical art formula (*.maf) file
    if img_or_math >= 0 and filebuf:
        outputbuf = r''
        for strbuf in filebuf:
            if not strbuf:
                continue
            outputbuf = outputbuf + strbuf
        if outputbuf:
            with open(outdir + fname + r'.maf', mode=r'wt', encoding=r'utf-8') as maf_file:
                maf_file.write(outputbuf)


def generate_from_maf(input_file: list, imgformat: str = r'PNG', imgwidth: int = 600, outdir: str = PICDIR) -> None:
    """Generate one or more PNG images from *.maf files"""
    # Validate function input
    if not input_file:
        stderr.write(r'The given list is empty!\n')
        raise SystemExit(1)
    elif not exists(outdir) or not isdir(outdir):
        stderr.write(outdir + '{}: The specified directory is non-readable or non-existent!\n')
        raise SystemExit(1)
    for inputfile in input_file:
        # Validate provided input file data
        if not isinstance(inputfile, str):
            stderr.write('Integers are not accepted as file locations!\n')
            raise SystemExit(1)
        elif not exists(inputfile) or not isfile(inputfile):
            stderr.write(inputfile + '{}: The specified file is non-readable or non-existent!\n')
            raise SystemExit(1)
        # Read MAF File
        maffile = configparser.ConfigParser()
        maffile.read(inputfile)
        mafsections = maffile.sections()
        # Convert MAF image to raster image using parallel processing
        num_imgs = len(mafsections)
        maxpoolsize = cpu_count()
        if maxpoolsize > num_imgs:
            poolsize = num_imgs
        else:
            poolsize = maxpoolsize
        with Pool(poolsize) as threadpool:
            try:
                threadpool.starmap(calc_from_maf, format_for_starmap(mafsections, repeat([maffile, imgformat, imgwidth, outdir], num_imgs)))
            except KeyboardInterrupt:
                threadpool.close()
                threadpool.terminate()
                raise SystemExit(1)


# MAIN #


if __name__ == '__main__':
    # Parse Arguments
    PARSER = argparse.ArgumentParser(
        prog=r'genmathart',
        description=r'Generate art using math and export as PNG files and/or math formulas',
        epilog=None,
        formatter_class=argparse.RawTextHelpFormatter
    )
    GEN_GROUP = PARSER.add_mutually_exclusive_group(required=False)
    IO_GROUP = PARSER.add_mutually_exclusive_group(required=False)
    IO_GROUP.add_argument(
        r'-i', r'--input',
        help=r'Select *.maf equations file',
        nargs=r'*',
        default=r'',
        metavar=r'INPUT'
    )
    PARSER.add_argument(
        r'-o', r'--outdir', r'--output',
        help=r'Directory for placing the generated files',
        default=PICDIR,
        type=str,
        metavar=r'OUTDIR'
    )
    PARSER.add_argument(
        r'--format',
        help=r'Specify image format (i.e. BMP, JPEG, PNG, etc.)',
        default=r'PNG',
        type=str,
        metavar=r'FORMAT'
    )
    GEN_GROUP.add_argument(
        r'--imgonly', r'--img_only', r'--img-only', r'--img',
        help=r'Generate image only',
        action=r'store_true',
        default=False
    )
    GEN_GROUP.add_argument(
        r'--mathonly', r'--math_only', r'--math-only', r'--math',
        help=r'Generate math formulas only',
        action=r'store_true',
        default=False
    )
    IO_GROUP.add_argument(
        r'-n', r'--amount', r'--number',
        help=r'Number of images to generate',
        default=1,
        type=int,
        metavar=r'AMOUNT'
    )
    PARSER.add_argument(
        r'-w', r'--width',
        help=r'Width of image in pixels; if width is 1920, then the height will be 1080',
        default=600,
        type=int,
        metavar=r'WIDTH'
    )
    # Check & Manipulate Arguments
    OPTIONS = PARSER.parse_args()
    if OPTIONS.amount < 1:
        stderr.write('Values less than `1` are not acceptable for `--amount`!\n')
        raise SystemExit(1)
    elif OPTIONS.amount == 1 and not OPTIONS.input:
        stdout.write('Generating image\n')
    else:
        stdout.write('Generating images\n')
    IMG_OR_MATH = 0
    if OPTIONS.imgonly and OPTIONS.mathonly:
        IMG_OR_MATH = 0
    elif OPTIONS.imgonly:
        IMG_OR_MATH = -1
    elif OPTIONS.mathonly:
        IMG_OR_MATH = 1
    if not OPTIONS.outdir.endswith(r'/'):
        OPTIONS.outdir = OPTIONS.outdir + r'/'
    # Main Execution
    if OPTIONS.input:
        generate_from_maf(OPTIONS.input, fix_img_format(OPTIONS.format), OPTIONS.width, OPTIONS.outdir)
    else:
        generate_image(OPTIONS.amount, fix_img_format(OPTIONS.format), OPTIONS.width, OPTIONS.outdir, IMG_OR_MATH)
    # Close
    if OPTIONS.amount == 1 and not OPTIONS.input:
        stdout.write('Finished generating image\n')
    else:
        stdout.write('Finished generating images\n')
    raise SystemExit()
