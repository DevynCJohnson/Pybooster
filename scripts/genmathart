#!/usr/bin/env python3
# -*- coding: utf-8; Mode: Python; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=python syntax=python.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax python; indent-mode python; eol unix; replace-tabs off; indent-width 4; tab-width 4; remove-trailing-space on;
"""@brief Generate art using math and export as PNG files or math formulas.

@file genmathart
@version 2019.12.28
@author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
@copyright LGPLv3

@section LICENSE
GNU Lesser General Public License v3
Copyright (c) Devyn Collier Johnson, All rights reserved.

This software is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this software.
"""


# pylint: disable=R0903


import argparse
from base64 import b64decode, b64encode
import configparser
from itertools import repeat
from math import acos, atan, cos, log1p, pi, sin, tan
from multiprocessing import cpu_count, Pool, Process, ProcessError, Queue
from os import urandom
from os.path import exists, expanduser, isdir, isfile
from pickle import dumps, loads  # nosec
from random import choice, Random, random, seed  # noqa: E402  # pylint: disable=C0411
from signal import SIGINT, SIG_DFL, signal
from sys import stderr, stdout
from time import strftime
from timeit import default_timer as timer
from typing import List, Union

from pybooster.fractals import create_mandelbrot_fractal, create_multibrot_fractal
from pybooster.xmath import clamp, csc, cvc, hvc, phi, sec
from PIL import Image, ImageFilter, ImageOps

ACCEL: int = -1
try:  # Cupy or Numpy
    from cupy import array, asnumpy, get_default_memory_pool, get_default_pinned_memory_pool, zeros  # noqa: E402  # pylint: disable=C0411
    ACCEL = 2
except ImportError:
    try:  # Random Modules
        from numpy import array, zeros  # noqa: E402  # pylint: disable=C0411
        ACCEL = 1
    except ImportError:
        pass

try:  # AutoJIT from Numba
    from numba import autojit
except ImportError:
    def autojit(_func: object):
        """Provide a dummy decorator for systems lacking Numba."""
        return _func


signal(SIGINT, SIG_DFL)


# CONSTANTS #


RESOLUTION_PAIRS: tuple = (
    # Width, Height
    (320, 240),  # QVGA
    (480, 320),  # HVGA
    (640, 480),  # VGA/NTSC
    (800, 600),  # SVGA
    (1024, 576),  # PAL
    (1280, 800),  # WXGA
    (1600, 900),
    (1920, 1080),  # HD/1K
    (2048, 1080),  # 2K
    (2560, 1080),  # UWHD
    (3840, 2160),  # UHD-1
    (4096, 2160),  # 4K
    (8192, 4320)  # 8K
)


PICDIR: str = expanduser(r'~') + r'/Pictures/'


TAU: float = 2.0 * pi


# VARIABLE CLASSES #


class Xvar:
    """Class for mathematical X variable."""

    def __str__(self) -> str:
        """Get string representation of X."""
        return r'x'

    @staticmethod  # noqa: A003
    def eval(x_var: float, y_var: float) -> float:  # noqa: A003  # pylint: disable=W0613
        """Evaluate X."""
        return x_var


class Yvar:
    """Class for mathematical Y variable."""

    def __str__(self) -> str:
        """Get string representation of Y."""
        return r'y'

    @staticmethod  # noqa: A003
    def eval(x_var: float, y_var: float) -> float:  # noqa: A003  # pylint: disable=W0613
        """Evaluate Y."""
        return y_var


# BASIC MATH CLASSES #


class Multiply:
    """Class for multiplication expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create multiplication expression."""
        self.lhs = buildexpr(rand_object, prob * prob)
        self.rhs = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of the multiplcation formula."""
        return str(self.lhs) + r'*' + str(self.rhs)

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate multiplication."""
        return self.lhs.eval(x_var, y_var) * self.rhs.eval(x_var, y_var)  # type: ignore


# ADVANCED MATH CLASSES #


class Acos:
    """Class for arccosine expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using arccosine."""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 1.0)

    def __str__(self) -> str:
        """Get string representation of arccosine."""
        return fr'acos(clamp({self.num}*{self.arg}))'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate arccosine."""
        return acos(clamp(self.num * self.arg.eval(x_var, y_var)))  # type: ignore


class Atan:
    """Class for arctangent expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using arctangent."""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 4.0)

    def __str__(self) -> str:
        """Get string representation of arctangent."""
        return fr'atan({self.num}*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate arctangent."""
        return atan(self.num * self.arg.eval(x_var, y_var))  # type: ignore


class Cos:
    """Class for cosine expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using cosine."""
        self.arg = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of cosine."""
        return fr'cos(pi*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate cosine."""
        return cos(pi * self.arg.eval(x_var, y_var))  # type: ignore


class Csc:
    """Class for cosecant expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using cosecant."""
        self.arg = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of cosecant."""
        return fr'csc(pi*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate cosecant."""
        return csc(pi * self.arg.eval(x_var, y_var))  # type: ignore


class Cvc:
    """Class for covercosine expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using covercosine."""
        self.arg = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of covercosine."""
        return fr'cvc(pi*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate covercosine."""
        return cvc(pi * self.arg.eval(x_var, y_var))  # type: ignore


class Hvc:
    """Class for havercosine expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using havercosine."""
        self.arg = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of havercosine."""
        return fr'hvc(pi*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate havercosine."""
        return hvc(pi * self.arg.eval(x_var, y_var))  # type: ignore


class Log1P:
    """Class for log1p expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using log1p."""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(-1.0, 4.0)
        self.num2 = rand_object.uniform(-0.9, 6.0)

    def __str__(self) -> str:
        """Get string representation of log1p."""
        return fr'log1p(max({self.num}*{self.arg}, {self.num2}))'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate log1p."""
        return log1p(max(self.num * self.arg.eval(x_var, y_var), self.num2))  # type: ignore


class Phi:
    """Class for phi expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using phi."""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.uniform(0.01, 4.0)  # rand_object.choice([pi, rand_object.uniform(3.0, 3.2)])

    def __str__(self) -> str:
        """Get string representation of phi."""
        return fr'phi({self.num}*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate phi."""
        return phi(self.num * self.arg.eval(x_var, y_var))  # type: ignore


class Sec:
    """Class for secant expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using secant."""
        self.arg = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of secant."""
        return fr'sec(tau*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate secant."""
        return sec(TAU * self.arg.eval(x_var, y_var))  # type: ignore


class Sin:
    """Class for sine pi expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using sine."""
        self.arg = buildexpr(rand_object, prob * prob)

    def __str__(self) -> str:
        """Get string representation of sine."""
        return fr'sin(pi*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate sine."""
        return sin(pi * self.arg.eval(x_var, y_var))  # type: ignore


class Tan:
    """Class for tangent expressions in math formulas."""

    def __init__(self, prob: float, rand_object: Random) -> None:
        """Create mathematical expression using tangent."""
        self.arg = buildexpr(rand_object, prob * prob)
        self.num = rand_object.choice([pi, TAU])

    def __str__(self) -> str:
        """Get string representation of tangent."""
        return fr'tan({self.num}*{self.arg})'

    def eval(self, x_var: float, y_var: float) -> float:  # noqa: A003
        """Evaluate tangent."""
        return tan(self.num * self.arg.eval(x_var, y_var))  # type: ignore


# EXPRESSION BUILDING FUNCTIONS #


def buildexpr(rand_object: Random, prob: float = 0.99) -> object:
    """Randomly select a mathematical expression."""
    reseed(rand_object)
    math_funcs: list = [Multiply, Cos, Csc, Cvc, Hvc, Sin]
    math_vars: tuple = (Xvar, Yvar)
    rare_funcs: list = [Acos, Log1P, Phi]
    semirare_funcs: list = [Atan, Sec, Tan]
    smooth_funcs: tuple = (Multiply, Cos, Hvc, Sin)
    if prob <= 0.01 or prob > 1.0:
        return rand_object.choice(math_vars)()
    if prob >= 0.05 or prob < 0.09:
        return rand_object.choice(smooth_funcs)(prob, rand_object)
    if 0.01 < prob < 0.05:
        rand_object.shuffle(rare_funcs)
        return rand_object.choice(rare_funcs)(prob, rand_object)
    if random() < prob + 0.11:  # nosec
        rand_object.shuffle(math_funcs)
        rand_object.shuffle(semirare_funcs)
        return rand_object.choice(rand_object.choice((math_funcs, math_funcs, math_funcs, math_funcs, math_funcs, semirare_funcs)))(prob, rand_object)
    return rand_object.choice(math_vars)()


def getexpr_threaded(rand_object: Random, color_queue: Queue, prob: float = 0.99) -> None:
    """Retrieve a mathematical expression generated by buildexpr."""
    color_queue.put(buildexpr(rand_object, prob), block=False, timeout=None)
    color_queue.close()


# GENERAL FUNCTIONS #


def format_for_starmap(headings: list, lst_of_lsts: list) -> List[tuple]:
    """Prepend one item from headings to the list of lists; this will create the needed format for starmap."""
    output: List = []
    i: int = 0
    for lst in lst_of_lsts:
        tmp = lst[:]
        tmp.insert(0, headings[i])
        output.append(tuple(tmp))
        i += 1
    return output


def fix_img_format(imgformat: str = r'PNG') -> str:
    """Ensure that the given image format string is in a format that Pillow will understand."""
    imgformat = imgformat.replace(r'.', r'').replace(r'*', r'').strip().upper()
    return imgformat.replace(r'BITMAP', r'BMP').replace(r'JPG', r'JPEG').replace(r'TIF', r'TIFF')


def imgformatfext(imgformat: str = r'PNG') -> str:
    """Return the appropriate file extention (as a string) for the given image format."""
    if imgformat.upper() == r'PNG':
        return r'.png'
    if imgformat.upper() == r'BMP':
        return r'.bmp'
    if imgformat.upper() in {r'JPEG', r'JPG'}:
        return r'.jpeg'
    if imgformat.upper() in {r'TIF', r'TIFF'}:
        return r'.tif'
    return r'.png'


def get_suitable_height(width: int) -> int:
    """Select the most appropriate image height (in pixels) based on the given width."""
    for test in RESOLUTION_PAIRS:
        if width == test[0]:
            return test[1]
    return width


def reseed(rand_object: Union[Random, None] = None) -> None:
    """Seed the random number generator; this function is multithreading and multiprocessing compatible."""
    if rand_object is None:
        seed(int.from_bytes(urandom(32), byteorder=choice((r'big', r'little'))) % 4294967295)  # nosec
        return
    rand_object.seed(int.from_bytes(urandom(32), byteorder=choice((r'big', r'little'))) % 4294967295)  # nosec


# PICKLED DATA FUNCTIONS #


def datadump(_data: object) -> str:
    """Pickle data and then encode the data in base64."""
    return str(b64encode(dumps(_data, fix_imports=False)).decode(r'utf-8'))


def loaddata(_data: str) -> bytes:
    """Load the given pickled base64 data."""
    return loads(b64decode(_data), fix_imports=False, encoding=r'ASCII', errors=r'strict')


# GRAPHICS FUNCTIONS #


@autojit
def plot_image(red: object, green: object, blue: object, imgwidth: int = 600) -> object:
    """Generate an RGB color plot for the given math expressions and evaluate and plot color values within the specified image size."""
    # Image Size
    px_per_unit: int = (imgwidth - 1) // 2
    imgheight: int = get_suitable_height(imgwidth)
    # Generate Pixels
    color_array = zeros((imgheight, imgwidth, 3), dtype=r'uint8')
    for y_point in range(0, imgheight, 1):
        y_plot: float = -float(y_point - px_per_unit) / px_per_unit
        for x_point in range(0, imgwidth, 1):
            x_plot = float(x_point - px_per_unit) / px_per_unit
            color_array[y_point, x_point] = array([red.eval(x_plot, y_plot) * 127.5 + 127.5, green.eval(x_plot, y_plot) * 127.5 + 127.5, blue.eval(x_plot, y_plot) * 127.5 + 127.5], dtype=r'uint8')  # type: ignore
    if ACCEL == 2:
        return Image.fromarray(asnumpy(color_array), mode=r'RGB')
    return Image.fromarray(color_array, mode=r'RGB')


def calc_image(imgformat: str, imgwidth: int, outdir: str, img_or_math: int) -> str:  # pylint: disable=R0914
    """Perform calculations for mathematical art."""
    local_rand = Random()
    reseed(local_rand)
    image_name = strftime(r'%m%d%H%M%S') + r'_' + str(Random().random()).replace(r'.', r'')
    while True:
        # Try to generate a mathematical image, and retry if the math fails
        try:
            # Prepare & start one thread per color-band
            red_queue: Queue = Queue()
            red_worker = Process(group=None, target=getexpr_threaded, name=r'Red_Worker', args=(Random(), red_queue, local_rand.uniform(0.90, 0.999)))
            red_worker.start()
            green_queue: Queue = Queue()
            green_worker = Process(group=None, target=getexpr_threaded, name=r'Green_Worker', args=(Random(), green_queue, local_rand.uniform(0.90, 0.999)))
            green_worker.start()
            blue_queue: Queue = Queue()
            blue_worker = Process(group=None, target=getexpr_threaded, name=r'Blue_Worker', args=(Random(), blue_queue, local_rand.uniform(0.90, 0.999)))
            blue_worker.start()
            # Retrieve math expressions representing the image's color
            red = red_queue.get(block=True, timeout=None)
            red_worker.join(timeout=None)
            green = green_queue.get(block=True, timeout=None)
            green_worker.join(timeout=None)
            blue = blue_queue.get(block=True, timeout=None)
            blue_worker.join(timeout=None)
            del red_worker, green_worker, blue_worker
            del red_queue, green_queue, blue_queue
            # Ensure that the equation is suitable
            if len(str(red)) > 128 or len(str(green)) > 128 or len(str(blue)) > 128:
                continue
            # Create image using the generated expressions
            image: Image.Image = plot_image(red, green, blue, imgwidth)
            break
        except (ArithmeticError, RecursionError, SystemError, ValueError):
            reseed(local_rand)
            continue
        except MemoryError:
            red_worker.terminate()
            green_worker.terminate()
            blue_worker.terminate()
            del image, red_worker, green_worker, blue_worker
            del red_queue, green_queue, blue_queue
            return r''
        except (KeyboardInterrupt, ProcessError):
            red_worker.terminate()
            green_worker.terminate()
            blue_worker.terminate()
            return r''
    # Save image
    if img_or_math <= 0:
        image = image.filter(ImageFilter.EDGE_ENHANCE).filter(ImageFilter.SHARPEN).filter(ImageFilter.DETAIL).filter(ImageFilter.CONTOUR)
        image.save(outdir + r'image_' + image_name + imgformatfext(imgformat), format=imgformat)
    # Art formula buffer
    if img_or_math >= 0:
        return f'[image_{image_name}]\nRed={red}\nRedCode={datadump(red)}\nGreen={green}\nGreenCode={datadump(green)}\nBlue={blue}\nBlueCode={datadump(blue)}\n\n'
    return r''


def calc_from_maf(mafsection: str, maffile: configparser.ConfigParser, imgformat: str = r'PNG', imgwidth: int = 600, outdir: str = PICDIR) -> None:
    """Generate one or more PNG images from *.maf files."""
    # Load math expressions from *.maf file
    red: bytes = loaddata(maffile[mafsection][r'RedCode'])
    green: bytes = loaddata(maffile[mafsection][r'GreenCode'])
    blue: bytes = loaddata(maffile[mafsection][r'BlueCode'])
    # Create image using the loaded expressions
    image: Image.Image = plot_image(red, green, blue, imgwidth)
    image.save(outdir + mafsection + imgformatfext(imgformat), format=imgformat)


def calc_fractal(fract_type: int = 0, _iters: int = 1024, imgformat: str = r'PNG', imgwidth: int = 600, outdir: str = PICDIR) -> None:
    """Perform calculations for fractal art."""
    local_rand = Random()
    reseed(local_rand)
    image_name = strftime(r'%m%d%H%M%S') + r'_' + str(Random().random()).replace(r'.', r'')
    pixel_array = zeros((get_suitable_height(imgwidth), imgwidth), dtype=r'uint8')
    # Determine the type of fractal to generate
    _fract_type: int = local_rand.randint(1, 2) if fract_type < 1 or fract_type > 2 else fract_type
    if _fract_type == 1:
        create_mandelbrot_fractal(pixel_array, round(local_rand.uniform(-2.0, -1.0), 8), round(local_rand.uniform(0.0, 1.0), 8), round(local_rand.uniform(-1.0, -0.5), 8), round(local_rand.uniform(0.0, 1.0), 8), _iters)
    elif _fract_type == 2:
        create_multibrot_fractal(pixel_array, round(local_rand.uniform(-2.0, -1.0), 8), round(local_rand.uniform(0.0, 1.0), 8), round(local_rand.uniform(-1.0, -0.5), 8), round(local_rand.uniform(0.0, 1.0), 8), local_rand.uniform(2.0, 8.0), _iters)
    else:
        stderr.write('Unknown error in fractal selection!\n')
        raise SystemExit(1)
    # Create color scheme
    black_cmap: tuple = (local_rand.randint(0, 255), local_rand.randint(0, 255), local_rand.randint(0, 255))
    white_cmap: tuple = (local_rand.randint(0, 255), local_rand.randint(0, 255), local_rand.randint(0, 255))
    mid_cmap: tuple = (local_rand.randint(0, 255), local_rand.randint(0, 255), local_rand.randint(0, 255))
    del local_rand
    # Generate fractal
    if ACCEL == 2:
        image: Image.Image = Image.fromarray(asnumpy(pixel_array), mode=r'P').convert(mode=r'RGB', palette=r'ADAPTIVE', colors=65536).filter(ImageFilter.EDGE_ENHANCE).filter(ImageFilter.DETAIL)
    else:
        image = Image.fromarray(pixel_array, mode=r'P').convert(mode=r'RGB', palette=r'ADAPTIVE', colors=65536).filter(ImageFilter.EDGE_ENHANCE).filter(ImageFilter.DETAIL)
    # Save image and free memory
    del pixel_array
    if ACCEL == 2:
        get_default_memory_pool().free_all_blocks()
        get_default_pinned_memory_pool().free_all_blocks()
    image = ImageOps.colorize(image, black=black_cmap, white=white_cmap, mid=mid_cmap, blackpoint=0, whitepoint=255, midpoint=127)
    image.save(outdir + r'image_' + image_name + imgformatfext(imgformat), format=imgformat)
    del image


def generate_image(num_imgs: int = 1, imgformat: str = r'PNG', imgwidth: int = 600, outdir: str = PICDIR, img_or_math: int = 0) -> None:  # noqa: R701
    """Generate one or more random PNG images of psychedelic art."""
    # Error Checking
    if not exists(outdir) or not isdir(outdir):
        stderr.write(f'{outdir}: The specified directory is non-readable or non-existent!\n')
        raise SystemExit(1)
    if num_imgs < 1:
        stderr.write(f'{outdir}: The specified number of images is less than one!\n')
        raise SystemExit(1)
    # Create image using parallel processing
    poolsize: int = cpu_count()
    pool_size: int = num_imgs if poolsize > num_imgs else poolsize
    with Pool(pool_size) as threadpool:
        try:
            filebuf = threadpool.starmap(calc_image, tuple(repeat([imgformat, imgwidth, outdir, img_or_math], num_imgs)))
        except (KeyboardInterrupt, MemoryError):
            threadpool.close()
            threadpool.terminate()
            raise SystemExit(1)
    # Create mathematical art formula (*.maf) file
    if img_or_math >= 0 and filebuf:
        outputbuf = r''
        for strbuf in filebuf:
            if not strbuf:
                continue
            outputbuf += strbuf
        if outputbuf:
            fname = strftime(r'%m%d%H%M%S')
            with open(fr'{outdir}{fname}.maf', mode=r'wt', encoding=r'utf-8') as maf_file:
                maf_file.write(outputbuf)


def generate_fractal(fract_type: int = 0, num_imgs: int = 1, _iters: int = 1024, imgformat: str = r'PNG', imgwidth: int = 600, outdir: str = PICDIR) -> None:
    """Generate one or more random fractal images."""
    # Error checking
    if not exists(outdir) or not isdir(outdir):
        stderr.write(f'{outdir}: The specified directory is non-readable or non-existent!\n')
        raise SystemExit(1)
    if num_imgs < 1:
        stderr.write(f'{outdir}: The specified number of images is less than one!\n')
        raise SystemExit(1)
    # Create image using parallel processing
    poolsize: int = cpu_count()
    pool_size: int = num_imgs if poolsize > num_imgs else poolsize
    with Pool(pool_size) as threadpool:
        try:
            threadpool.starmap(calc_fractal, tuple(repeat([fract_type, _iters, imgformat, imgwidth, outdir], num_imgs)))
            threadpool.close()
        except (KeyboardInterrupt, MemoryError):
            threadpool.close()
            threadpool.terminate()
            raise SystemExit(1)


def generate_from_maf(input_file: list, imgformat: str = r'PNG', imgwidth: int = 600, outdir: str = PICDIR) -> None:
    """Generate one or more PNG images from *.maf files."""
    # Validate function input
    if not input_file:
        stderr.write(r'The given list is empty!\n')
        raise SystemExit(1)
    if not exists(outdir) or not isdir(outdir):
        stderr.write(f'{outdir}: The specified directory is non-readable or non-existent!\n')
        raise SystemExit(1)
    for inputfile in input_file:
        # Validate provided input file data
        if not isinstance(inputfile, str):
            stderr.write('Integers are not accepted as file locations!\n')
            raise SystemExit(1)
        if not exists(inputfile) or not isfile(inputfile):
            stderr.write(f'{inputfile}: The specified file is non-readable or non-existent!\n')
            raise SystemExit(1)
        # Read MAF File
        maffile = configparser.ConfigParser()
        maffile.read(inputfile)
        mafsections = maffile.sections()
        # Convert MAF image to raster image using parallel processing
        num_imgs: int = len(mafsections)
        maxpoolsize: int = cpu_count()
        poolsize: int = num_imgs if maxpoolsize > num_imgs else maxpoolsize
        with Pool(poolsize) as threadpool:
            try:
                threadpool.starmap(calc_from_maf, format_for_starmap(mafsections, repeat([maffile, imgformat, imgwidth, outdir], num_imgs)))  # type: ignore
            except KeyboardInterrupt:
                threadpool.close()
                threadpool.terminate()
                raise SystemExit(1)


# MAIN #


if __name__ == '__main__':  # noqa: C901
    # Parse Arguments
    PARSER = argparse.ArgumentParser(
        prog=r'genmathart',
        description=r'Generate art using math and export as PNG files and/or math formulas',
        epilog=None,
        formatter_class=argparse.RawTextHelpFormatter
    )
    GEN_GROUP = PARSER.add_mutually_exclusive_group(required=False)
    IO_GROUP = PARSER.add_mutually_exclusive_group(required=False)
    IO_GROUP.add_argument(
        r'-i', r'--input',
        help=r'Select *.maf equations file',
        nargs=r'*',
        default=r'',
        metavar=r'INPUT'
    )
    PARSER.add_argument(
        r'-o', r'--outdir', r'--output',
        help=r'Directory for placing the generated files',
        default=PICDIR,
        type=str,
        metavar=r'OUTDIR'
    )
    IO_GROUP.add_argument(
        r'-n', r'--amount', r'--number',
        help=r'Number of images to generate',
        default=1,
        type=int,
        metavar=r'AMOUNT'
    )
    PARSER.add_argument(
        r'-w', r'--width',
        help=r'Width of image in pixels; if width is 1920, then the height will be 1080',
        default=600,
        type=int,
        metavar=r'WIDTH'
    )
    GEN_GROUP.add_argument(
        r'--fractal',
        help=r'Generate Random Fractals',
        action=r'store_true',
        default=False
    )
    GEN_GROUP.add_argument(
        r'--imgonly', r'--img_only', r'--img-only', r'--img',
        help=r'Generate image only',
        action=r'store_true',
        default=False
    )
    GEN_GROUP.add_argument(
        r'--mandelbrot',
        help=r'Generate Mandelbrot Fractals',
        action=r'store_true',
        default=False
    )
    GEN_GROUP.add_argument(
        r'--mathonly', r'--math_only', r'--math-only', r'--math',
        help=r'Generate math formulas only',
        action=r'store_true',
        default=False
    )
    GEN_GROUP.add_argument(
        r'--multibrot',
        help=r'Generate Multibrot Fractals',
        action=r'store_true',
        default=False
    )
    PARSER.add_argument(
        r'--itype',
        help=r'Specify image type (e.g. BMP, JPEG, PNG, etc.)',
        default=r'PNG',
        type=str,
        metavar=r'FORMAT'
    )
    PARSER.add_argument(
        r'--iterations',
        help=r'Number of fractal iterations',
        default=1024,
        type=int,
        metavar=r'ITERATIONS'
    )
    # Check & Manipulate Arguments
    OPTIONS = PARSER.parse_args()
    if OPTIONS.amount < 1:
        stderr.write('Values less than `1` are not acceptable for `--amount`!\n')
        raise SystemExit(1)
    if OPTIONS.amount == 1 and not OPTIONS.input:
        stdout.write('Generating image\n')
    else:
        stdout.write('Generating images\n')
    FRACT_ITERS: int = 512 if OPTIONS.iterations < 1 or OPTIONS.iterations is None else OPTIONS.iterations
    IMG_OR_MATH: int = 0
    if OPTIONS.imgonly and OPTIONS.mathonly:
        IMG_OR_MATH = 0
    elif OPTIONS.imgonly:
        IMG_OR_MATH = -1
    elif OPTIONS.mathonly:
        IMG_OR_MATH = 1
    if not OPTIONS.outdir.endswith(r'/'):
        OPTIONS.outdir = OPTIONS.outdir + r'/'
    GEN_FRACTAL: bool = False
    if OPTIONS.fractal or OPTIONS.mandelbrot or OPTIONS.multibrot:
        GEN_FRACTAL = True
    FRACTAL_TYPE: int = 0
    if OPTIONS.mandelbrot:
        FRACTAL_TYPE = 1
    elif OPTIONS.multibrot:
        FRACTAL_TYPE = 2
    # Main Execution
    if GEN_FRACTAL and ACCEL > 0:
        START = timer()
        generate_fractal(FRACTAL_TYPE, OPTIONS.amount, OPTIONS.iterations, fix_img_format(OPTIONS.itype), OPTIONS.width, OPTIONS.outdir)
        EXE_TIME = timer() - START
        stdout.write(f'Fractals created in {EXE_TIME} seconds\n')
    elif GEN_FRACTAL and ACCEL == 0:
        stderr.write('Cupy or Numpy is required to create fractals!\n')
    elif OPTIONS.input:
        generate_from_maf(OPTIONS.input, fix_img_format(OPTIONS.format), OPTIONS.width, OPTIONS.outdir)
    else:
        START = timer()
        generate_image(OPTIONS.amount, fix_img_format(OPTIONS.format), OPTIONS.width, OPTIONS.outdir, IMG_OR_MATH)
        EXE_TIME = timer() - START
        stdout.write(f'Images created in {EXE_TIME} seconds\n')
    # Close
    if OPTIONS.amount == 1 and not OPTIONS.input:
        stdout.write('Finished generating image\n')
    else:
        stdout.write('Finished generating images\n')
    raise SystemExit(0)
