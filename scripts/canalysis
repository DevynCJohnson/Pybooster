#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on; line-numbers on;
#' @brief Wrapper for scanning C source code with various syntax checkers
#' @file canalysis
#' @version 2018.10.02
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ -z "${1:-}" ]; then
    printf 'ERROR: A parameter is required!\n' >&2
    exit 1
elif [ "$1" = '--help' ] || [ "$1" = 'help' ] || [ "$1" = '-h' ]; then
    printf 'Specify the pathname of each C source code file to scan.\n'
    exit 0
fi


# SETUP #


export LANG='en_US.UTF-8'
export LC_ALL='C'
export LC_CTYPE='C'
export FirstLoopPass=0

# Use a faster alternative if possible
if [ -x "$(command -v mawk)" ]; then
    awk_cmd() { mawk "${1}"; }
elif [ -x "$(command -v nawk)" ]; then
    awk_cmd() { nawk "${1}"; }
else
    awk_cmd() { awk "${1}"; }
fi


# MAIN #


for file in "$@"; do
    [ ! -r "$file" ] && printf '%s: The specified file is non-readable or non-existent!\n' "$file" >&2 && continue

    if [ -x "$(command -v clint)" ]; then
        printf '======  *CLINT*  ======\n'
        clint "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'clint: command not found!\n' >&2
    fi

    if [ -x "$(command -v cppcheck)" ]; then
        printf '======  *CPPCHECK*  ======\n'
        cppcheck -j 1 --language=c --std=c11 -I. -I../include --force --inconclusive --inline-suppr --template=gcc --enable=performance --enable=portability --std=posix --enable=style --enable=warning "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'cppcheck: command not found!\n' >&2
    fi

    if [ -x "$(command -v KWStyle)" ]; then
        printf '======  *KWSTYLE*  ======\n'
        KWStyle -qv -gcc "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'KWStyle: command not found!\n' >&2
    fi

    if [ -x "$(command -v splint)" ]; then
        printf '======  *SPLINT*  ======\n'
        splint -nof -tmpdir /tmp/ -I. -I../include -nolib -strict -checks -preproc +stats "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'splint: command not found!\n' >&2
    fi

    if [ -x "$(command -v flawfinder)" ]; then
        printf '======  *FLAWFINDER*  ======\n'
        flawfinder --minlevel=1 --omittime --quiet --singleline "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'flawfinder: command not found!\n' >&2
    fi

    if [ -x "$(command -v undertaker)" ]; then
        printf '======  *UNDERTAKER (MACROS SCANNER)*  ======\n'
        undertaker -I ../include/ -j dead -O stdout -v "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'undertaker: command not found!\n' >&2
    fi

    if [ -x "$(command -v pmccabe)" ]; then
        printf '======  *PMCCABE (MCCABE COMPLEXITY)*  ======\n'
        pmccabe -c -f -v "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'pmccabe: command not found!\n' >&2
    fi

    if [ -x "$(command -v pscan)" ]; then
        printf '======  *PORTABILITY SCAN*  ======\n'
        pscan "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'pscan: command not found!\n' >&2
    fi

    if [ -x "$(command -v chktri)" ]; then
        printf '======  *TRIGRAPH SCANNER*  ======\n'
        chktri "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'chktri: command not found!\n' >&2
    fi

    if [ -x "$(command -v cccc)" ]; then
        printf '======  *CCCC METRICS*  ======\n'
        cccc --lang=c --outdir=./metrics "$file" 1>&2 2> /dev/null
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'cccc: command not found!\n' >&2
    fi

    if [ -x "$(command -v code-analysis)" ]; then
        code-analysis "$file"
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'code-analysis: command not found!\n' >&2
    fi

    FirstLoopPass=1

done
