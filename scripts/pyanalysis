#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Wrapper for scanning a Python script with flake8, pycodestyle (pep8), pyflakes, pylint, doctest, and more
#' @file pyanalysis
#' @version 2019.06.02
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ -z "${1:-}" ]; then
    printf 'ERROR: A parameter is required!\n' >&2
    exit 1
elif [ "$1" = '--help' ] || [ "$1" = 'help' ] || [ "$1" = '-h' ]; then
    printf 'Specify the pathname of each Python script to scan.\n'
    exit 0
elif [ ! -x "$(command -v python3)" ]; then
    printf 'python3: command not found!\n' >&2
    exit 1
fi


# SETUP #


export NO_AT_BRIDGE=1
export PYTHONCOERCECLOCALE=0
export PYTHONIOENCODING='UTF-8'
export PYTHONUTF8=1
export RADONFILESENCODING='UTF-8'
# export LANG='en_US.UTF-8'
# export LANGUAGE='en_US.UTF-8'
# export LC_ALL='en_US.UTF-8'
# export LC_CTYPE='en_US.UTF-8'

export FirstLoopPass=0
export RADON_MAX_CC=10
EXTRA_FLAKE8_FLAGS=''

IGNORE_DIRECTORIES='.bzr,.cache,.cvs,.eggs,.git,.hg,.svk,.svn,.tox,__init__,__init__.py,__pycache__,build,CVS,dist,*.egg-info'
IGNORE_VAR_NAMES='i,j,k,v,ex,key,Run,val,_'
TODO_COMMENTS='DEBUG,DEPRECATED,DISABLED,FINISH,FIX,FIXME,REPAIR,TESTING,TODEBUG,TODO,TOMV,TORM,XXX'

# Setup Commands

BANDIT_EXISTS=0
if [ -x "$(command -v bandit)" ]; then
    BANDIT_EXISTS=1
    # Find the Bandit configuration file
    if [ -r ./.bandit.ini ]; then
        bandit_file=./.bandit.ini
    elif [ -r ../.bandit.ini ]; then
        bandit_file=../.bandit.ini
    elif [ -r ../../.bandit.ini ]; then
        bandit_file=../../.bandit.ini
    elif [ -r ./.bandit ]; then
        bandit_file=./.bandit
    elif [ -r ../.bandit ]; then
        bandit_file=../.bandit
    elif [ -r ../../.bandit ]; then
        bandit_file=../../.bandit
    else
        bandit_file=''
    fi
    EXTRA_BANDIT_FLAGS=''
    if [ -n "${bandit_file:-}" ]; then
        EXTRA_BANDIT_FLAGS="--configfile=${bandit_file}"
    fi
fi

FLAKE8_EXISTS=0
if [ -x "$(command -v flake8)" ]; then
    FLAKE8_EXISTS=1
fi

PYFLAKES2_EXISTS=0
if [ -x "$(command -v pyflakes2)" ]; then
    PYFLAKES2_EXISTS=1
fi

PYFLAKES3_EXISTS=0
if [ -x "$(command -v pyflakes3)" ]; then
    PYFLAKES3_EXISTS=1
fi

PYLINT2_EXISTS=0
if [ -x "$(command -v pylint2)" ]; then
    PYLINT2_EXISTS=1
fi

PYLINT3_EXISTS=0
if [ -x "$(command -v pylint3)" ]; then
    PYLINT3_EXISTS=1
fi

if [ "$PYLINT2_EXISTS" -eq 1 ] | [ "$PYLINT3_EXISTS" -eq 1 ]; then
    # Find the PyLint configuration file
    if [ -r ./.pylintrc ]; then
        pylintrc_file=./.pylintrc
    elif [ -r ../.pylintrc ]; then
        pylintrc_file=../.pylintrc
    elif [ -r ../../.pylintrc ]; then
        pylintrc_file=../../.pylintrc
    elif [ -r ./.pylint.ini ]; then
        pylintrc_file=./.pylint.ini
    elif [ -r ../.pylint.ini ]; then
        pylintrc_file=../.pylint.ini
    elif [ -r ../../.pylint.ini ]; then
        pylintrc_file=../../.pylint.ini
    else
        pylintrc_file=''
    fi
fi

RADON_EXISTS=0
if [ -x "$(command -v radon)" ]; then
    RADON_EXISTS=1
    EXTRA_FLAKE8_FLAGS="--radon-max-cc=${RADON_MAX_CC}"
fi

VULTURE_EXISTS=0
if [ -x "$(command -v vulture)" ]; then
    VULTURE_EXISTS=1
fi


# Use a faster alternative if possible
if [ -x "$(command -v mawk)" ]; then
    awk_cmd() { mawk "${1}"; }
    noblanks() { mawk NF; }
elif [ -x "$(command -v nawk)" ]; then
    awk_cmd() { nawk "${1}"; }
    noblanks() { nawk NF; }
else
    awk_cmd() { awk "${1}"; }
    noblanks() { awk NF; }
fi


# MAIN #


for file in "$@"; do
    { [ ! -r "$file" ] || [ -d "$file" ]; } && printf '%s: The specified file is non-readable or non-existent!\n' "$file" >&2 && continue
    hashpling="$(head -1 "$file")"
    echo "$hashpling" | grep -v -E -e '#!/.+python[0-9\.]*' > /dev/null && printf '%s: The specified file is not a Python script!\n' "$file" >&2 && continue

    ispy2=0
    echo "$hashpling" | grep -q -E -e '#!/.+python2.*' && ispy2=1

    if [ "$FLAKE8_EXISTS" -eq 1 ]; then
        printf '======  *FLAKE8*  ======\n'
        flake8 --jobs='auto' --max-complexity=${RADON_MAX_CC} ${EXTRA_FLAKE8_FLAGS} --valid-encodings='utf-8,utf-8-unix' --exclude="${IGNORE_DIRECTORIES}" --ignore='E501,T001' --benchmark --doctests --show-source --statistics --exit-zero "$file" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'flake8: command not found!\n' >&2
    fi

    if [ "$ispy2" -eq 1 ]; then
        if [ "$PYFLAKES2_EXISTS" -eq 1 ]; then
            printf '======  *PYFLAKES2*  ======\n'
            pyflakes2 "$file" | noblanks
        elif [ "$FirstLoopPass" -eq 0 ]; then
            printf 'pyflakes2: command not found!\n' >&2
        fi
    else
        if [ "$PYFLAKES3_EXISTS" -eq 1 ]; then
            printf '======  *PYFLAKES*  ======\n'
            pyflakes3 "$file" | noblanks
        elif [ "$FirstLoopPass" -eq 0 ]; then
            printf 'pyflakes3: command not found!\n' >&2
        fi
    fi

    if [ -x "$(command -v pycodestyle)" ]; then
        printf '======  *PYCODESTYLE (PEP8)*  ======\n'
        pycodestyle --verbose --ignore='E501' --show-pep8 --show-source --statistics "$file" | awk_cmd '{ OFS=""; gsub(/^checking .+$/, ""); gsub(/^local configuration: in .+$/, ""); if (NF > 0) { print; } }'
    elif [ -x "$(command -v pycodestyle)" ]; then
        printf '======  *PYCODESTYLE (PEP8)*  ======\n'
        pep8 --verbose --ignore='E501' --show-pep8 --show-source --statistics "$file" | awk_cmd '{ OFS=""; gsub(/^checking .+$/, ""); gsub(/^local configuration: in .+$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'pycodestyle (formerly pep8): command not found!\n' >&2
    fi

    if [ "$ispy2" -eq 1 ]; then
        if [ "$PYLINT2_EXISTS" -eq 1 ]; then
            printf '======  *PYLINT2*  ======\n'
            if [ -n "${pylintrc_file:-}" ]; then
                pylint2 --rcfile=${pylintrc_file} "$file" 2>&1 | awk_cmd '{ OFS=""; gsub(/^Using config file .+$/, ""); gsub(/^Report$/, ""); gsub(/^======$/, ""); gsub(/^Unable to init server.*/, ""); if (NF > 0) { print; } }'
            else
                pylint2 --disable='C0301,I0011' --good-names="${IGNORE_VAR_NAMES}" --notes="${TODO_COMMENTS}" --msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}' --max-module-lines=4096 --max-returns=16 --persistent=n --reports=y "$file" 2>&1 | awk_cmd '{ OFS=""; gsub(/^Using config file .+$/, ""); gsub(/^Report$/, ""); gsub(/^======$/, ""); gsub(/^Unable to init server.*/, ""); if (NF > 0) { print; } }'
            fi
        elif [ "$FirstLoopPass" -eq 0 ]; then
            printf 'pylint2: command not found!\n' >&2
        fi
    else
        if [ "$PYLINT3_EXISTS" -eq 1 ]; then
            printf '======  *PYLINT*  ======\n'
            if [ -n "${pylintrc_file:-}" ]; then
                pylint3 --rcfile=${pylintrc_file} "$file" 2>&1 | awk_cmd '{ OFS=""; gsub(/^Using config file .+$/, ""); gsub(/^Report$/, ""); gsub(/^======$/, ""); gsub(/^Unable to init server.*/, ""); if (NF > 0) { print; } }'
            else
                pylint3 --disable='C0301,I0011' --good-names="${IGNORE_VAR_NAMES}" --notes="${TODO_COMMENTS}" --msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}' --max-module-lines=4096 --max-returns=16 --persistent=n --reports=y "$file" 2>&1 | awk_cmd '{ OFS=""; gsub(/^Using config file .+$/, ""); gsub(/^Report$/, ""); gsub(/^======$/, ""); gsub(/^Unable to init server.*/, ""); if (NF > 0) { print; } }'
            fi
        elif [ "$FirstLoopPass" -eq 0 ]; then
            printf 'pylint3: command not found!\n' >&2
        fi
    fi

    if [ -x "$(command -v py_directive_checker)" ]; then
        printf '======  *DIRECTIVE CHECKER*  ======\n'
        py_directive_checker "$file" | noblanks
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'py_directive_checker: command not found!\n' >&2
    fi

    if [ "$VULTURE_EXISTS" -eq 1 ]; then
        printf '======  *VULTURE (DEAD CODE CHECKER)*  ======\n'
        vulture --min-confidence=65 "$file" | noblanks
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'vulture: command not found!\n' >&2
    fi

    printf '======  *UNCALLED*  ======\n'
    if [ -x "$(command -v uncalled)" ] && grep -F --no-messages --quiet '__main__' "${1}"; then
        uncalled --how both "${1}"
    fi

    if [ "$BANDIT_EXISTS" -eq 1 ]; then
        printf '======  *BANDIT (SECURITY ANALYZER)*  ======\n'
        # shellcheck disable=SC2016
        bandit --aggregate vuln "${EXTRA_BANDIT_FLAGS}" "$file" 2>&1 | awk_cmd '{ OFS=""; if (match($0, /^   Location: .+$/)) { gsub(/^   Location: /, ""); print $0, ": Security Issue"; } else { gsub(/^.?main.?\tINFO.+$/, ""); gsub(/^[0-9]+[\t ]+.+$/, ""); gsub(/^Test results.+$/, ""); gsub(/^Run started.+$/, ""); gsub(/^Files skipped.+$/, ""); if (NF > 0) { print; } } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'bandit: command not found!\n' >&2
    fi

    if [ -x "$(command -v pydocstyle)" ]; then
        printf '======  *PYDOCSTYLE (PEP257)*  ======\n'
        pydocstyle --count --explain --source --verbose --ignore=D203,D213,D400 "$file" | sed -E 's|^(.+):([0-9]+) in (.+):$|\1:\2: \3|; s|^(.+):([0-9])+ at module level:$|\1:\2:1:|;' | awk_cmd '{ OFS=""; gsub(/^Checking file.+$/, ""); gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ -x "$(command -v pep257)" ]; then
        printf '======  *PYDOCSTYLE (PEP257)*  ======\n'
        pep257 --count --explain --source --verbose --ignore=D203,D213,D400 "$file" | sed -E 's|^(.+):([0-9]+) in (.+):$|\1:\2: \3|; s|^(.+):([0-9])+ at module level:$|\1:\2:1:|;' | awk_cmd '{ OFS=""; gsub(/^Checking file.+$/, ""); gsub(/^0$/, ""); if (NF > 0) { print; } }'
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'pydocstyle (formerly pep257): command not found!\n' >&2
    fi

    printf '======  *PYTHON DOCTEST*  ======\n'
    if [ "$ispy2" -eq 1 ]; then
        python2 -m doctest --option=NORMALIZE_WHITESPACE "$file" 2>&1 | awk_cmd '{ gsub(/^Unable to init server.*/, ""); if (NF > 0) { print; } }'
    else
        python3 -m doctest --option=NORMALIZE_WHITESPACE "$file" 2>&1 | awk_cmd '{ gsub(/^Unable to init server.*/, ""); if (NF > 0) { print; } }'
    fi

    printf '======  *RADON REPORT*  ======\n'
    if [ "$RADON_EXISTS" -eq 1 ]; then
        radon cc "${1}" --max F --min A -nc --order=SCORE --show-complexity --total-average
        radon mi "${1}" --max C --min A --multi --show
        radon raw "${1}" --summary
        radon hal "${1}"
        # Show complexity data for each individual function
        # radon hal "${1}" --functions
    fi

    if [ -x "$(command -v code-analysis)" ]; then
        code-analysis "$file"
    elif [ "$FirstLoopPass" -eq 0 ]; then
        printf 'code-analysis: command not found!\n' >&2
    fi

    FirstLoopPass=1

done
