#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Wrapper for scanning a Python script with flake8, pycodestyle (pep8), pyflakes, pylint, doctest, and more
#' @file pyanalysis
#' @version 2019.12.26
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ -z "${1:-}" ]; then
    printf 'ERROR: A parameter is required!\n' >&2
    exit 1
elif [ "$1" = '--help' ] || [ "$1" = 'help' ] || [ "$1" = '-h' ]; then
    printf 'Specify the pathname of each Python script to scan.\n'
    exit 0
elif [ ! -x "$(command -v python3)" ]; then
    printf 'python3: command not found!\n' >&2
    exit 1
fi


# GLOBALS #


export NO_AT_BRIDGE=1
export PYTHONCOERCECLOCALE=0
export PYTHONIOENCODING='UTF-8'
export PYTHONUTF8=1
export RADONFILESENCODING='UTF-8'

export RADON_MAX_CC=10
EXTRA_FLAKE8_FLAGS=''

IGNORE_DIRECTORIES='.bzr,.cache,.cvs,.eggs,.git,.hg,.svk,.svn,.tox,__init__,__init__.py,__pycache__,build,CVS,dist,*.egg-info'
IGNORE_VAR_NAMES='i,j,k,v,ex,key,Run,val,_'
TODO_COMMENTS='DEBUG,DEPRECATED,DISABLED,FINISH,FIX,FIXME,REPAIR,TESTING,TODEBUG,TODO,TOMV,TORM,XXX'


# SETUP COMMANDS #


BANDIT_EXISTS=0
if [ -x "$(command -v bandit)" ]; then
    BANDIT_EXISTS=1
    # Find the Bandit configuration file
    if [ -r ./.bandit.ini ]; then
        bandit_file=./.bandit.ini
    elif [ -r ../.bandit.ini ]; then
        bandit_file=../.bandit.ini
    elif [ -r ../../.bandit.ini ]; then
        bandit_file=../../.bandit.ini
    elif [ -r ./.bandit ]; then
        bandit_file=./.bandit
    elif [ -r ../.bandit ]; then
        bandit_file=../.bandit
    elif [ -r ../../.bandit ]; then
        bandit_file=../../.bandit
    else
        bandit_file=''
    fi
    EXTRA_BANDIT_FLAGS=''
    if [ -n "${bandit_file:-}" ]; then
        EXTRA_BANDIT_FLAGS="--configfile=${bandit_file}"
    fi
else
    printf 'bandit: command not found!\n' >&2
fi

FLAKE8_EXISTS=0
if [ -x "$(command -v flake8)" ]; then
    FLAKE8_EXISTS=1
else
    printf 'flake8: command not found!\n' >&2
fi

PYFLAKES2_EXISTS=0
if [ -x "$(command -v pyflakes2)" ]; then
    PYFLAKES2_EXISTS=1
fi

PYFLAKES3_EXISTS=0
if [ -x "$(command -v pyflakes3)" ]; then
    PYFLAKES3_EXISTS=1
fi

if [ $PYFLAKES2_EXISTS -eq 0 ] && [ $PYFLAKES3_EXISTS -eq 0 ]; then
    printf 'pyflakes: command not found!\n' >&2
fi

PYCODESTYLE_EXISTS=0
PEP8_EXISTS=0
if [ -x "$(command -v pycodestyle)" ]; then
    PYCODESTYLE_EXISTS=1
elif [ -x "$(command -v pep8)" ]; then
    PEP8_EXISTS=1
else
    printf 'pycodestyle (formerly pep8): command not found!\n' >&2
fi

PYLINT2_EXISTS=0
if [ -x "$(command -v pylint2)" ]; then
    PYLINT2_EXISTS=1
fi

PYLINT3_EXISTS=0
if [ -x "$(command -v pylint3)" ]; then
    PYLINT3_EXISTS=1
fi

if [ "$PYLINT2_EXISTS" -eq 1 ] || [ "$PYLINT3_EXISTS" -eq 1 ]; then
    # Find the PyLint configuration file
    if [ -r ./.pylintrc ]; then
        pylintrc_file=./.pylintrc
    elif [ -r ../.pylintrc ]; then
        pylintrc_file=../.pylintrc
    elif [ -r ../../.pylintrc ]; then
        pylintrc_file=../../.pylintrc
    elif [ -r ./.pylint.ini ]; then
        pylintrc_file=./.pylint.ini
    elif [ -r ../.pylint.ini ]; then
        pylintrc_file=../.pylint.ini
    elif [ -r ../../.pylint.ini ]; then
        pylintrc_file=../../.pylint.ini
    else
        pylintrc_file=''
    fi
else
    printf 'pylint: command not found!\n' >&2
fi

DIRECTIVE_CHECKER_EXISTS=0
if [ -x "$(command -v py_directive_checker)" ]; then
    DIRECTIVE_CHECKER_EXISTS=1
else
    printf 'py_directive_checker: command not found!\n' >&2
fi

PYDOCSTYLE_EXISTS=0
PEP257_EXISTS=0
if [ -x "$(command -v pydocstyle)" ]; then
    PYCODESTYLE_EXISTS=1
elif [ -x "$(command -v pep257)" ]; then
    PEP8_EXISTS=1
else
    printf 'pydocstyle (formerly pep257): command not found!\n' >&2
fi

RADON_EXISTS=0
if [ -x "$(command -v radon)" ]; then
    RADON_EXISTS=1
    EXTRA_FLAKE8_FLAGS="--radon-max-cc=${RADON_MAX_CC}"
else
    printf 'radon: command not found!\n' >&2
fi

VULTURE_EXISTS=0
if [ -x "$(command -v vulture)" ]; then
    VULTURE_EXISTS=1
else
    printf 'vulture: command not found!\n' >&2
fi

UNCALLED_EXISTS=0
if [ -x "$(command -v uncalled)" ]; then
    UNCALLED_EXISTS=1
else
    printf 'uncalled: command not found!\n' >&2
fi

CODE_ANALYSIS_EXISTS=0
if [ -x "$(command -v code-analysis)" ]; then
    CODE_ANALYSIS_EXISTS=1
else
    printf 'code-analysis: command not found!\n' >&2
fi


# Use a faster alternative if possible
if [ -x "$(command -v mawk)" ]; then
    awk_cmd() { mawk "${1}"; }
    noblanks() { mawk NF; }
elif [ -x "$(command -v nawk)" ]; then
    awk_cmd() { nawk "${1}"; }
    noblanks() { nawk NF; }
else
    awk_cmd() { awk "${1}"; }
    noblanks() { awk NF; }
fi


# FUNCTIONS #


#' Run Flake8
flake8_func() {
    if [ "$FLAKE8_EXISTS" -eq 1 ]; then
        printf '======  *FLAKE8*  ======\n'
        flake8 --jobs='auto' --max-complexity=${RADON_MAX_CC} ${EXTRA_FLAKE8_FLAGS} --exclude="${IGNORE_DIRECTORIES}" --ignore='E501,T001' --benchmark --doctests --show-source --statistics --exit-zero "${1}" | awk_cmd '{ OFS=""; gsub(/^0$/, ""); if (NF > 0) { print; } }'
    fi
}


#' Run PyFlakes
pyflakes_func() {
    if [ "${1:-0}" -eq 1 ]; then
        if [ "$PYFLAKES2_EXISTS" -eq 1 ]; then
            printf '======  *PYFLAKES2*  ======\n'
            pyflakes2 "${2}" | noblanks
        fi
    else
        if [ "$PYFLAKES3_EXISTS" -eq 1 ]; then
            printf '======  *PYFLAKES*  ======\n'
            pyflakes3 "${2}" | noblanks
        fi
    fi
}


#' Run PyCodeStyle
pycodestyle_func() {
    codestyle_cmd=''
    if [ "$PYCODESTYLE_EXISTS" -eq 1 ]; then
        printf '======  *PYCODESTYLE (PEP8)*  ======\n'
        codestyle_cmd='pycodestyle'
    elif [ "$PEP8_EXISTS" -eq 1 ]; then
        printf '======  *PYCODESTYLE (PEP8)*  ======\n'
        codestyle_cmd='pep8'
    fi
    if [ -n "${codestyle_cmd:-}" ]; then
        ${codestyle_cmd} --verbose --ignore='E501' --show-pep8 --show-source --statistics "${1}" | awk_cmd '{ OFS=""; gsub(/^checking .+$/, ""); gsub(/^local configuration: in .+$/, ""); if (NF > 0) { print; } }'
    fi
}


#' Run PyLint
pylint_func() {
    awk_cmd_str='{ OFS=""; gsub(/^Using config file .+$/, ""); gsub(/^Report$/, ""); gsub(/^======$/, ""); gsub(/^\*\*\*\*\*\*\*\*\*\*\*\*\* Module .*$/, ""); gsub(/^Unable to init server.*/, ""); if (NF > 0) { print; } }'
    if [ "${1:-0}" -eq 1 ]; then
        if [ "$PYLINT2_EXISTS" -eq 1 ]; then
            printf '======  *PYLINT2*  ======\n'
            if [ -n "${pylintrc_file:-}" ]; then
                pylint2 --rcfile=${pylintrc_file} "${2}" 2>&1 | awk_cmd "${awk_cmd_str}"
            else
                pylint2 --disable='C0301,I0011' --good-names="${IGNORE_VAR_NAMES}" --notes="${TODO_COMMENTS}" --msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}' --max-module-lines=4096 --max-returns=16 --persistent=n --reports=y "${2}" 2>&1 | awk_cmd "${awk_cmd_str}"
            fi
        fi
    else
        if [ "$PYLINT3_EXISTS" -eq 1 ]; then
            printf '======  *PYLINT*  ======\n'
            if [ -n "${pylintrc_file:-}" ]; then
                pylint3 --rcfile=${pylintrc_file} "${2}" 2>&1 | awk_cmd "${awk_cmd_str}"
            else
                pylint3 --disable='C0301,I0011' --good-names="${IGNORE_VAR_NAMES}" --notes="${TODO_COMMENTS}" --msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}' --max-module-lines=4096 --max-returns=16 --persistent=n --reports=y "${2}" 2>&1 | awk_cmd "${awk_cmd_str}"
            fi
        fi
    fi
}


#' Run Directive Checker
directive_checker_func() {
    if [ "$DIRECTIVE_CHECKER_EXISTS" -eq 1 ]; then
        printf '======  *DIRECTIVE CHECKER*  ======\n'
        py_directive_checker "${1}" | noblanks
    fi
}


#' Run Vulture
vulture_func() {
    if [ "$VULTURE_EXISTS" -eq 1 ]; then
        printf '======  *VULTURE (DEAD CODE CHECKER)*  ======\n'
        vulture --min-confidence=65 "${1}" | noblanks
    fi
}


#' Run Uncalled
uncalled_func() {
    if [ "$UNCALLED_EXISTS" -eq 1 ] && grep -F --no-messages --quiet '__main__' "${1}"; then
        printf '======  *UNCALLED*  ======\n'
        uncalled --how both "${1}"
    fi
}


#' Run Bandit
bandit_func() {
    if [ "$BANDIT_EXISTS" -eq 1 ]; then
        printf '======  *BANDIT (SECURITY ANALYZER)*  ======\n'
        # shellcheck disable=SC2016
        bandit --aggregate vuln "${EXTRA_BANDIT_FLAGS}" "${1}" 2>&1 | awk_cmd '{ OFS=""; if (match($0, /^   Location: .+$/)) { gsub(/^   Location: /, ""); print $0, ": Security Issue"; } else { gsub(/^.?main.?\tINFO.+$/, ""); gsub(/^[0-9]+[\t ]+.+$/, ""); gsub(/^Test results.+$/, ""); gsub(/^Run started.+$/, ""); gsub(/^Files skipped.+$/, ""); if (NF > 0) { print; } } }'
    fi
}


#' Run PyDocStyle
pydocstyle_func() {
    awk_cmd_str='{ OFS=""; gsub(/^Checking file.+$/, ""); gsub(/^0$/, ""); if (NF > 0) { print; } }'
    sed_cmd_str='s|^(.+):([0-9]+) in (.+):$|\1:\2: \3|; s|^(.+):([0-9])+ at module level:$|\1:\2:1:|;'
    if [ "$PYDOCSTYLE_EXISTS" -eq 1 ]; then
        printf '======  *PYDOCSTYLE (PEP257)*  ======\n'
        pydocstyle --count --explain --source --verbose --ignore=D203,D213,D400 "${1}" | sed -E "${sed_cmd_str}" | awk_cmd "${awk_cmd_str}"
    elif [ "$PEP257_EXISTS" -eq 1 ]; then
        printf '======  *PYDOCSTYLE (PEP257)*  ======\n'
        pep257 --count --explain --source --verbose --ignore=D203,D213,D400 "${1}" | sed -E "${sed_cmd_str}" | awk_cmd "${awk_cmd_str}"
    fi
}


#' Run PyDocTest
pydoctest_func() {
    awk_cmd_str='{ gsub(/^Unable to init server.*/, ""); if (NF > 0) { print; } }'
    if [ "${1:-0}" -eq 1 ]; then
        printf '======  *PYTHON DOCTEST*  ======\n'
        python2 -m doctest --option=NORMALIZE_WHITESPACE "${2}" 2>&1 | awk_cmd "${awk_cmd_str}"
    else
        printf '======  *PYTHON DOCTEST*  ======\n'
        python3 -m doctest --option=NORMALIZE_WHITESPACE "${2}" 2>&1 | awk_cmd "${awk_cmd_str}"
    fi
}


#' Run Radon
radon_func() {
    if [ "$RADON_EXISTS" -eq 1 ]; then
        printf '======  *RADON REPORT*  ======\n'
        radon cc "${1}" --max F --min A -nc --order=SCORE --show-complexity --total-average
        radon mi "${1}" --max C --min A --multi --show
        radon raw "${1}" --summary
        radon hal "${1}"
        # Show complexity data for each individual function
        # radon hal "${1}" --functions
    fi
}


#' Run Code-Analysis
code_analysis_func() {
    if [ "$CODE_ANALYSIS_EXISTS" -eq 1 ]; then
        code-analysis "${1}"
    fi
}


# MAIN #


trap 'rm -f /tmp/*.pyanalysis.tmp || true' INT


for file in "$@"; do
    { [ ! -r "$file" ] || [ -d "$file" ]; } && printf '%s: The specified file is non-readable or non-existent!\n' "$file" >&2 && continue
    hashpling="$(head -1 "$file")"
    printf '%s' "$hashpling" | grep -v -E -e '#!/.+python[0-9\.]*' > /dev/null && printf '%s: The specified file is not a Python script!\n' "$file" >&2 && continue

    ispy2=0
    printf '%s' "$hashpling" | grep -q -E -e '#!/.+python2.*' && ispy2=1

    FLAKE8_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    PYLINT_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    PYFLAKES_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    RADON_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    PYCODESTYLE_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    PYDOCTEST_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    DIRECTIVE_CHECKER_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    BANDIT_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    UNCALLED_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    VULTURE_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    PYDOCSTYLE_BUFFER="/tmp/$(uuid).pyanalysis.tmp"
    CODE_ANALYSIS_BUFFER="/tmp/$(uuid).pyanalysis.tmp"

    flake8_func "$file" > "${FLAKE8_BUFFER}" &
    pylint_func "$ispy2" "$file" > "${PYLINT_BUFFER}" &
    pyflakes_func "$ispy2" "$file" > "${PYFLAKES_BUFFER}" &
    radon_func "$file" > "${RADON_BUFFER}" &
    pycodestyle_func "$file" > "${PYCODESTYLE_BUFFER}" &
    pydoctest_func "$ispy2" "$file" > "${PYDOCTEST_BUFFER}" &
    directive_checker_func "$file" > "${DIRECTIVE_CHECKER_BUFFER}" &
    bandit_func "$file" > "${BANDIT_BUFFER}" &
    uncalled_func "$file" > "${UNCALLED_BUFFER}" &
    vulture_func "$file" > "${VULTURE_BUFFER}" &
    pydocstyle_func "$file" > "${PYDOCSTYLE_BUFFER}" &
    code_analysis_func "$file" > "${CODE_ANALYSIS_BUFFER}" &

    wait

    printf "%s\\n%s\\n" "$(cat < "${FLAKE8_BUFFER}")" "$(cat < "${PYFLAKES_BUFFER}")"
    rm -f "${FLAKE8_BUFFER}" "${PYFLAKES_BUFFER}" || true
    printf "%s\\n%s\\n" "$(cat < "${PYCODESTYLE_BUFFER}")" "$(cat < "${PYLINT_BUFFER}")"
    rm -f "${PYCODESTYLE_BUFFER}" "${PYLINT_BUFFER}" || true
    printf "%s\\n%s\\n" "$(cat < "${DIRECTIVE_CHECKER_BUFFER}")" "$(cat < "${VULTURE_BUFFER}")"
    rm -f "${DIRECTIVE_CHECKER_BUFFER}" "${VULTURE_BUFFER}" || true
    printf "%s\\n%s\\n" "$(cat < "${UNCALLED_BUFFER}")" "$(cat < "${BANDIT_BUFFER}")"
    rm -f "${UNCALLED_BUFFER}" "${BANDIT_BUFFER}" || true
    printf "%s\\n%s\\n" "$(cat < "${PYDOCSTYLE_BUFFER}")" "$(cat < "${PYDOCTEST_BUFFER}")"
    rm -f "${PYDOCSTYLE_BUFFER}" "${PYDOCTEST_BUFFER}" || true
    printf "%s\\n%s\\n" "$(cat < "${RADON_BUFFER}")" "$(cat < "${CODE_ANALYSIS_BUFFER}")"
    rm -f "${RADON_BUFFER}" "${CODE_ANALYSIS_BUFFER}" || true

done
