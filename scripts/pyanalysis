#!/bin/sh
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on; line-numbers on;
# @brief Wrapper for scanning a Python script with flake8, pycodestyle (pep8), pyflakes, pylint, doctest, and more
# @file pyanalysis
# @version 2018.04.27
# @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
# @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/


if [ "$1" = '--help' ] || [ "$1" = 'help' ] || [ "$1" = '-h' ]; then
    printf 'Specify the pathname of each Python script to scan.\n'
    exit 0
elif [ ! -x "$(command -v python3)" ]; then
    printf 'python3: command not found!\n' >&2
    exit 1
elif [ -z "$1" ]; then
    printf 'ERROR: A parameter is required!\n' >&2
    exit 1
fi


export NO_AT_BRIDGE=1
export LANG='en_US.UTF-8'
export LC_CTYPE='UTF-8'
export PYTHONIOENCODING='utf8'
firstpass=0


for file in "$@"; do
    [ ! -r "$file" ] && printf '%s: The specified file is non-readable or non-existent!\n' "$file" >&2 && continue

    if [ -x "$(command -v flake8)" ]; then
        printf '\n\n======  *FLAKE8*  ======\n\n'
        flake8 --jobs=1 --max-complexity=10 --exclude='.bzr,CVS,.git,.hg,.svn,.tox,__init__.py,__init__,__pycache__' --ignore='E501,T001' --benchmark --doctests --show-source --statistics --exit-zero "$file"
    elif [ "$firstpass" -eq 0 ]; then
        printf 'flake8: command not found!\n' >&2
    fi

    if [ -x "$(command -v pyflakes3)" ]; then
        printf '\n\n======  *PYFLAKES*  ======\n\n'
        pyflakes3 "$file"
    elif [ "$firstpass" -eq 0 ]; then
        printf 'pyflakes3: command not found!\n' >&2
    fi

    if [ -x "$(command -v pycodestyle)" ]; then
        printf '\n\n======  *PYCODESTYLE (PEP8)*  ======\n\n'
        pycodestyle --verbose --ignore='E501' --show-pep8 --show-source --statistics "$file"
    elif [ -x "$(command -v pycodestyle)" ]; then
        printf '\n\n======  *PYCODESTYLE (PEP8)*  ======\n\n'
        pep8 --verbose --ignore='E501' --show-pep8 --show-source --statistics "$file"
    elif [ "$firstpass" -eq 0 ]; then
        printf 'pycodestyle (formerly pep8): command not found!\n' >&2
    fi

    if [ -x "$(command -v pylint3)" ]; then
        printf '\n\n======  *PYLINT*  ======\n\n'
        pylint3 --disable='C0301,I0011' --good-names='i,j,k,v,ex,key,Run,val,_' --notes='DEBUG,FINISH,FIX,FIXME,HERE,TODEBUG,TODO,XXX' --msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}' --max-module-lines=4096 --max-returns=16 --persistent=n --reports=y "$file"
    elif [ "$firstpass" -eq 0 ]; then
        printf 'pylint3: command not found!\n' >&2
    fi

    if [ -x "$(command -v noqa_checker)" ]; then
        printf '\n\n======  *NOQA CHECKER*  ======\n\n'
        noqa_checker "$file"
    elif [ "$firstpass" -eq 0 ]; then
        printf 'noqa_checker: command not found!\n' >&2
    fi

    if [ -x "$(command -v vulture)" ]; then
        printf '\n\n======  *VULTURE (DEAD CODE CHECKER)*  ======\n\n'
        vulture --min-confidence=60 "$file"
    elif [ "$firstpass" -eq 0 ]; then
        printf 'vulture: command not found!\n' >&2
    fi

    if [ -x "$(command -v pydocstyle)" ]; then
        printf '\n\n======  *PYDOCSTYLE (PEP257)*  ======\n\n'
        pydocstyle --count --explain --source --verbose --ignore=D203,D213,D400 "$file"
    elif [ -x "$(command -v pep257)" ]; then
        printf '\n\n======  *PYDOCSTYLE (PEP257)*  ======\n\n'
        pep257 --count --explain --source --verbose --ignore=D203,D213,D400 "$file"
    elif [ "$firstpass" -eq 0 ]; then
        printf 'pydocstyle (formerly pep257): command not found!\n' >&2
    fi

    printf '\n\n======  *PYTHON DOCTEST*  ======\n\n'
    python3 -m doctest --option=NORMALIZE_WHITESPACE "$file"

    printf '\n'

    firstpass=1

done
