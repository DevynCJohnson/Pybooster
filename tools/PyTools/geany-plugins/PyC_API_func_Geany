#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8
"""@brief Generate Python-C-API code for the selected list of C-functions (in Geany)
@file PyC_API_func_Geany
@author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
@copyright LGPLv3
@version 2016.03.22

@section DESCRIPTION
Configure Geany: Edit→Format→Send Selection to→Set Custom Commands

@section LICENSE
GNU Lesser General Public License v3
Copyright (c) Devyn Collier Johnson, All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library.
"""


# pylint: disable=C0103


from ast import literal_eval
from subprocess import getoutput
from sys import stdin, stdout

try:  # Regular Expression module
    import regex as re  # noqa  # pylint: disable=C0411
except ImportError:
    import re  # noqa  # pylint: disable=C0411


def main():
    data = stdin.read()
    data = re.sub(r'^\/\*\*(.+)\*\/', r'', data, flags=re.S)
    data = re.sub(r'^\/\*(.+)\*\/', r'', data, flags=re.S)
    data = data.replace('\n\n\n', '\n')
    data = data.replace('\n\n', '\n').replace(r'"', '\\"')
    data = re.sub(r'^([A-Za-z0-9 ]+) ([A-Za-z0-9_]+)\(([A-Za-z0-9_ ]+)\) \{\n    // (.+)$', r"'\2': '\4',", data, flags=re.M)
    data = re.sub(r'^(?!\')(.+)$', r'', data, flags=re.M)
    data = data.replace('\n', '')
    data =  literal_eval(r'{' + data + r'}')
    docstring = r''
    funcdef = r''
    methods = r''
    funccode = r''
    pyfunction = getoutput(r'ezwin --text "What is the name of the module?"')
    var = getoutput(r'ezwin --text "What is the name of var?"')
    for FUNCTION, FUNC_DOC in data.items():
        tmp_docstring = r'PyDoc_STRVAR(' + pyfunction + '_' + FUNCTION + '_docstring,\n    "' + FUNCTION + '(' + var + ': TYPE) -> TYPE\\n' + FUNC_DOC + '");\n'
        docstring = docstring + tmp_docstring
        tmp_funcdef = r'static PyObject *' + pyfunction + r'_' + FUNCTION + '(SELFARGS);\n'
        funcdef = funcdef + tmp_funcdef
        tmp_methods = '    {"' + FUNCTION + '", (PyCFunction)' + pyfunction + r'_' + FUNCTION + r', METH_VARARGS, ' + pyfunction + r'_' + FUNCTION + '_docstring},\n'
        methods = methods + tmp_methods
        tmp_funccode = r'static PyObject *' + pyfunction + r'_' + FUNCTION + '(SELFARGS) {\n    unsigned int ' + var + ';\n    ASSERT_UINT_ARG(' + var + ');\n    return ull2int(' + FUNCTION + '(' + var + '));\n}\n\n\n'
        funccode = funccode + tmp_funccode
    stdout.write(docstring + '\n\n' + funcdef + '\n\n' + methods + '\n\n' + funccode)


if __name__ == '__main__':
    main()
