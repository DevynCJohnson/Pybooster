#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8
"""@brief C Linter and Checker
@file Clint
@author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
@copyright LGPLv3
@version 2016.03.22

@section DESCRIPTION
Codes
 - C*** = Comment Warnings and Errors
 - MG** = Magic Comment
 - M*** = Macros Warnings and Errors
 - T000 = Todo Note
 - S*** = Security Issues and Flaws
 - V*** = Vague Code
 - X*** = Inconsistency
 - Z*** = Optimize

@section LICENSE
GNU Lesser General Public License v3
Copyright (c) Devyn Collier Johnson, All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library.
"""


# pylint: disable=C0103


from sys import argv, stderr

try:
    import regex as re  # noqa  # pylint: disable=C0411
except ImportError:
    import re  # noqa  # pylint: disable=C0411


# OBJECTS #


DATATYPE = r'(auto |const |register |static |static const |const static |)(\*| \*|\* | \* |)((signed |unsigned |)(short |long |long long | |)(int |char |wchar |string |float |double |bool |_BOOL |enum |union |struct |PyObject |)|(ulint |ullint |slint |sllint )(\*| \*|\* | \* |))'
MACROS = r'(define|include|endif|undef|if|elif|else|ifdef|ifndef)'
SPECIFIER = r'(auto|const|register|static|static const|const static|)( \*|\*| \* |\* || )'


# PATTERNS #


REGEX_BRACKET_NO_SPACE = re.compile(r'^.+[^ \t]{$')
REGEX_BRACKET_EXTRA_SPACE = re.compile(r'^.+[ \t][ \t]{$')
REGEX_BRACKET_SPACE_VALID = re.compile(r'^.+[ \t]{$')
REGEX_DCJ_VERSION = re.compile(r'(' + DATATYPE + r'__version__ = \"20[0-9][0-9]\.[0-1][0-9]\.[0-3][0-9]\")')
REGEX_EMAIL = re.compile(r'(' + DATATYPE + r'__email__ = \".+\";\s)')
REGEX_INDENT = re.compile(r'^\t.*')
REGEX_INDENT_AMOUNT = re.compile(r'^([ ]+)[^ \t].+$')
REGEX_MUL2 = re.compile(r'([^a-z0-9_]2 \* [a-z0-9_]+|[a-z0-9_]+ \* (|\([a-z0-9_ ]+\))2)', re.I)
REGEX_SELF_STORE = re.compile(r'([A-Za-z0-9_]+) = ([A-Za-z0-9_]+)')
REGEX_SEMICOLON_SPACE = re.compile(r'^.+[ \t];$')
REGEX_VALID_EMAIL = re.compile(r'(' + DATATYPE + r'__email__ = \"[A-Za-z0-9\-]+@[A-Za-z0-9\-]+\.[A-Za-z0-9]+\";\s)')
REGEX_LICENSE = re.compile(r'(' + DATATYPE + r'__license__ = \".+\";\s)')
REGEX_VERSION = re.compile(r'(' + DATATYPE + r'__version__ = (\".+\";\s|[0-9\.\-]+\s))')

# Comments
REGEX_CODING = re.compile(r'(//( |)(\-\*\-|)( |)coding( |):( |)(utf\-8|utf8|utf|.*)(\-\*\-|))', re.I)
REGEX_CODING_VALID = re.compile(r'^(// \-\*\- coding: utf\-8 \-\*\-\s)')
REGEX_COMMENT_DOC = re.compile(r'^(.*/\*\*.*)$')  # Beginning of doc-comment
REGEX_COMMENT_MULTILINE_START = re.compile(r'^(.*/\*.*)$')  # Start of multiline-comment
REGEX_COMMENT_MULTILINE_END = re.compile(r'^(.*\*/.*)$')  # End of multiline-comment
REGEX_COMMENT_LINE = re.compile(r'^([ \t]*//.+\s)$')  # The entire line is a comment
REGEX_COMMENT_MISSING_LEADING_SPACE = re.compile(r'(.*(;|\}|\))[^ \t]([^ \t]|[ \t])//.+\s)')
REGEX_COMMENT_MISSING_SPACE = re.compile(r'(//[^ \t].+\s)')
REGEX_NOTE = re.compile(r'(//|/*)( |)(TODO|FIXME|FIX|REPAIR|FINISH|DEBUG|XXX)', re.I)
REGEX_VIM = re.compile(r'(//( |)vim( |):( |)fileencoding( |)=( |)(utf\-8|utf8|utf|.*))', re.I)
REGEX_VIM_VALID = re.compile(r'^(// vim:fileencoding=utf\-8\s)')

# Datatypes
REGEX_ARRAY = re.compile(r'^.+ [A-Za-z0-9_]+\[([0-9]+)\]( |)=( |).+')
REGEX_FLOAT = re.compile(r'^' + SPECIFIER + r'float [A-Za-z0-9_]+( |)=( |)[0-9\.\-]+(F|);')
REGEX_FLOAT_VALID = re.compile(r'^' + SPECIFIER + r'float [A-Za-z0-9_]+( |)=( |)[0-9\.\-]+F;')
REGEX_FLOAT_NUM = re.compile(r'\(float\)( |)[0-9\.\-]+(F|)')
REGEX_FLOAT_NUM_VALID = re.compile(r'\(float\)[0-9\.\-]+F')
REGEX_LONG_DOUBLE = re.compile(r'^' + SPECIFIER + r'(long double |tetra )[A-Za-z0-9_]+( |)=( |)[0-9\.\-]+(L|);')
REGEX_LONG_DOUBLE_VALID = re.compile(r'^' + SPECIFIER + r'(long double |tetra )[A-Za-z0-9_]+( |)=( |)[0-9\.\-]+L;')
REGEX_LONG_DOUBLE_NUM = re.compile(r'(\(long double\)|\(tetra\))( |)[0-9\.\-]+(L|)')
REGEX_LONG_DOUBLE_NUM_VALID = re.compile(r'(\(long double\)|\(tetra\))[0-9\.\-]+L')
REGEX_WCHAR = re.compile(r'^' + SPECIFIER + r'wchar_t [A-Za-z0-9_]+( |)=( |)(L|)\'.+\';')
REGEX_WCHAR_VALID = re.compile(r'^' + SPECIFIER + r'wchar_t [A-Za-z0-9_]+( |)=( |)L\'.+\';')

# Macros
REGEX_MACROS = re.compile(r'^([ \t]*#[ \t]*[a-z]+ .+)', re.I)
REGEX_INCLUDE = re.compile(r'^([ \t]*#[ \t]*include (\"|<)[a-z0-9 _\-\./]+(\.[a-z0-9]+|)(>|\").+)', re.I)
REGEX_INCLUDE_VALID = re.compile(r'^([ \t]*#[ \t]*include (\"|<)[A-Za-z0-9 _\-\./]+(\.[A-Za-z0-9]+|)(>|\")\s(//.+|))')
REGEX_MACROS_LEADINGSPACE = re.compile(r'([ \t]+#[ \t]*[a-z]+ .+)')
REGEX_MACROS_SPACE = re.compile(r'^(#[ \t]*[a-z]+  .+)$')
REGEX_MACROS_VALID = re.compile(r'^(#[ \t]*[a-z]+ .+)$')
REGEX_OPERATOR_EXTRA_SPACE = re.compile(r'(.+(  && |  \|\| | &&  | \|\|  ).+)')

# Operators
REGEX_DIV_SPACE = re.compile(r'^.+([ \t][ \t]/|/[ \t][ \t]).+$')
REGEX_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]=|[^\!\+\-\*/%\&\^\|]=[ \t][ \t]).+$')
REGEX_MINUS_SPACE = re.compile(r'^.+([ \t][ \t]\-|\-[ \t][ \t]).+$')
REGEX_MUL_SPACE = re.compile(r'^.+([ \t][ \t]\*|\*[ \t][ \t]).+$')
REGEX_NOT_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]\!=|\!=[ \t][ \t]).+$')
REGEX_PLUS_SPACE = re.compile(r'^.+([ \t][ \t]\+|\+[ \t][ \t]).+$')
REGEX_PLUS_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]\+=|\+=[ \t][ \t]).+$')
REGEX_MINUS_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]\-=|\-=[ \t][ \t]).+$')
REGEX_MUL_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]\*=|\*=[ \t][ \t]).+$')
REGEX_DIV_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]/=|/=[ \t][ \t]).+$')
REGEX_MOD_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]%=|%=[ \t][ \t]).+$')
REGEX_LSHIFT_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]<<=|<<=[ \t][ \t]).+$')
REGEX_RSHIFT_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]>>=|>>=[ \t][ \t]).+$')
REGEX_AND_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]\&=|\&=[ \t][ \t]).+$')
REGEX_OR_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]\|=|\|=[ \t][ \t]).+$')
REGEX_XOR_EQUALS_SPACE = re.compile(r'^.+([ \t][ \t]\^=|\^=[ \t][ \t]).+$')
REGEX_MOD_SPACE = re.compile(r'^.+([ \t][ \t]%|%[ \t][ \t]).+$')
REGEX_AND_SPACE = re.compile(r'^.+([ \t][ \t]\&\&|\&\&[ \t][ \t]).+$')
REGEX_OR_SPACE = re.compile(r'^.+([ \t][ \t]\|\||\|\|[ \t][ \t]).+$')
REGEX_TERNARY_SPACE = re.compile(r'^.+([ \t][ \t]\?|\?[ \t][ \t]).+$')
REGEX_NOT_SPACE = re.compile(r'^.+([ \t][ \t]\!|\![ \t]).+$')
REGEX_LT_SPACE = re.compile(r'^.+[ \t][ \t]<.+$')
REGEX_GT_SPACE = re.compile(r'^.+[ \t][ \t]>.+$')
REGEX_OPERATOR_NO_SPACE1 = re.compile(r'.+([\!\+\-\*/%\&\^\|=]=|>=|<=|<<|>>|>>=|<<=|\&\&|\|\|)[^ \t].+')
REGEX_OPERATOR_NO_SPACE2 = re.compile(r'.+[^ \t]([\!\+\-\*/%\&\^\|=]=|>=|<=|<<|>>|>>=|<<=|\&\&|\|\|).+')
OPERATOR_SPACE_VALID = re.compile(r'.+ ([\!\+\-\*/%\&\^\|=]=|>=|<=|<<|>>|>>=|<<=|\&\&|\|\|) .+')
EQUALS_NO_SPACE = re.compile(r'.+([a-z0-9_\)\]\}]=|=[a-z0-9_\(\[\{]).+', re.I)
EQUALS_SPACE_VALID = re.compile(r'^(.+ = .+)$')
REGEX_SHIFT_COMPARE = re.compile(r'.+(>=|<=|>>=|<<=).+')
REGEX_SHIFT_COMPARE2 = re.compile(r'.+(>=|<=|>>=|<<=|<<|>>).+')
LTGT_NO_SPACE = re.compile(r'.+([a-z0-9_\)\]\}]<|<[a-z0-9_\(\[\{]|[a-z0-9_\)\]\}]>|>[a-z0-9_\(\[\{]).+', re.I)
LTGT_SPACE_VALID = re.compile(r'^.+ (<|>) .+$')
MATH_OPERATOR_NO_SPACE = re.compile(r'.+([a-z0-9_\)\]\}](\+|\*|/|%)|(\+|\*|/|%)[a-z0-9_\(\[\{]).+', re.I)  # Subtraction is not included because of negative numbers being mistaken as subtraction
MATH_OPERATOR_SPACE_VALID = re.compile(r'^.+ (\+|\*|/|%) .+$')
INCRE_DECRE = re.compile(r'(\+\+|\-\-)')
POST_INCRE_DECRE_VAR = re.compile(r'[a-z0-9_]+(\+\+|\-\-)', re.I)

# Printf and related functions
PRINTF_FMT = r'''\
(                        # start of capture group 1
%                        # literal "%"  # noqa S001
(?:                      # first option
(?:[-+0 #]{0,5})         # optional flags
(?:\d+|\*)?              # width
(?:\.(?:\d+|\*))?        # precision
(?:h|l|ll|w|I|I32|I64)?  # size
[cCdiouxXeEfgGaAnpsSZ]   # type
) |                      # OR
%%)                      # literal "%%"  # noqa S001
'''

# Security Issues
REGEX_GETS = re.compile(r'[^A-Za-z0-9_\.]gets\(.+')  # `(r'^[ \t]*[A-Za-z0-9_\(\) ]*gets\(.+$')`
REGEX_PRINTF = re.compile(r'[^A-Za-z0-9_\.]printf\(.+')
REGEX_PUTC = re.compile(r'[^A-Za-z0-9_\.]putc\(.+')
REGEX_PUTS = re.compile(r'[^A-Za-z0-9_\.]puts\(.+')
REGEX_MALLOC = re.compile(r'[^A-Za-z0-9_\.]malloc\(.+')
REGEX_STRCPY = re.compile(r'[^A-Za-z0-9_\.]strcpy\(.+')
REGEX_STRCMP = re.compile(r'[^A-Za-z0-9_\.]strcmp\(.+')
REGEX_GETC = re.compile(r'[^A-Za-z0-9_\.]getc\(.+')


# FUNCTIONS #


def getfile(_filename: str) -> str:
    """Get file contents and return as a str"""
    _out = []
    with open(_filename, mode='rt', encoding='utf-8') as _file:
        _out.append(''.join(_file.readlines()).strip())
    return ''.join(_out)


def getfile_list(_filename: str) -> list:
    """Get file contents and return as a list"""
    with open(_filename, mode='rt', encoding='utf-8') as _file:
        _out = _file.readlines()
    return _out


def ispower2(_num: int) -> bool:
    """Is the number a power-of-two"""
    return (_num != 0) and not _num & (_num - 1)


def output_info(_filepath: str, _linenum: int, _line: str, _code: str, _msg: str, _mstr='0') -> None:
    """Display warning/error information on stderr"""
    if _mstr is '0' and (_line is '' or _line is None):
        print(_filepath + r':' + str(_linenum) + r':0: ' + _code + r' : ' + _msg, file=stderr)  # noqa
    elif _mstr is '0':
        print(_filepath + r':' + str(_linenum) + r':0: ' + _code + r' : ' + _msg + '\n' + _line + '\n', file=stderr)  # noqa
    elif (_line is '' or _line is None) and not isinstance(_mstr, str):
        print(_filepath + r':' + str(_linenum) + r':' + str(_mstr.start()) + r': ' + _code + r' : ' + _msg, file=stderr)  # noqa  # pylint: disable=E1101
    elif not isinstance(_mstr, str) and isinstance(_line, str):
        print(_filepath + r':' + str(_linenum) + r':' + str(_mstr.start()) + r': ' + _code + r' : ' + _msg + '\n' + _line + '\n', file=stderr)  # noqa  # pylint: disable=E1101
    return None


def strip_comments_and_strings(_str: str) -> str:
    """Remove all comments and strings to produce LOGICAL_LINE/LOG_LINE"""
    _str = _str.strip()
    _str = re.sub(r'\"[A-Z0-9 _\-\d\w]*\"', '', _str, flags=re.I)
    _str = re.sub(r'\'[A-Z0-9 _\-\d\w]*\'', '', _str, flags=re.I)
    _str = re.sub(r'\"\(.*\)\"', '', _str, flags=re.I)
    _str = re.sub(r'\'\(.*\)\'', '', _str, flags=re.I)
    _str = re.sub(r'\".*\"\,', '', _str, flags=re.I)
    _str = re.sub(r'\'.*\'\,', '', _str, flags=re.I)
    _str = re.sub(r'\".*\"\}', '}', _str, flags=re.I)
    _str = re.sub(r'\'.*\'\}', '}', _str, flags=re.I)
    _str = re.sub(r' \".*\";', '', _str, flags=re.I)  # `return "X";`
    _str = re.sub(r' \'.*\';', '', _str, flags=re.I)  # `return 'X';`
    _str = re.sub(r'(.*)//.*', r'\1', _str, flags=re.I)
    _str = re.sub(r'(.*)/\*.*', r'\1', _str, flags=re.I)
    return _str


def strip_strings(_str: str) -> str:
    """Remove all strings"""
    _str = _str.strip()
    _str = re.sub(r'\"[A-Z0-9 _\-\d\w]*\"', '', _str, flags=re.I)
    _str = re.sub(r'\'[A-Z0-9 _\-\d\w]*\'', '', _str, flags=re.I)
    _str = re.sub(r'\"\(.*\)\"', '', _str, flags=re.I)
    _str = re.sub(r'\'\(.*\)\'', '', _str, flags=re.I)
    _str = re.sub(r'\".*\"\,', '', _str, flags=re.I)
    _str = re.sub(r'\'.*\'\,', '', _str, flags=re.I)
    _str = re.sub(r'\".*\"\}', '}', _str, flags=re.I)
    _str = re.sub(r'\'.*\'\}', '}', _str, flags=re.I)
    _str = re.sub(r' \".*\";', '', _str, flags=re.I)  # `return "X";`
    _str = re.sub(r' \'.*\';', '', _str, flags=re.I)  # `return 'X';`
    return _str


# LINT CHECKERS #


def c000(FILEPATH: str, LINE_NUM: int, LINE: str, LOG_LINE: str) -> list:  # noqa N803  # pylint: disable=W0613,W0621
    """C***: Check for formatting issues in comments"""
    # pylint: disable=W0621
    # C001
    _match = REGEX_COMMENT_MISSING_SPACE.search(LINE)
    if _match and r'://' not in LINE[_match.start():] + LINE[:_match.end()]:
        output_info(FILEPATH, LINE_NUM, LINE, r'C001', r'Missing single space after `//`', _match)
    # C002
    _match = REGEX_COMMENT_MISSING_LEADING_SPACE.search(LINE)
    if _match and r'://' not in LINE[_match.start():] + LINE[:_match.end()]:
        output_info(FILEPATH, LINE_NUM, LINE, r'C002', r'Missing double-leading-space before `//`', _match)
    return None


def c000_line(FILEPATH: str, LINE_NUM: int, LINE: str, LOG_LINE: str) -> list:  # noqa N803  # pylint: disable=W0613,W0621
    """C***: Check for formatting issues in comment lines"""
    # pylint: disable=W0621
    # C000
    _match = REGEX_COMMENT_MISSING_SPACE.search(LINE)
    if _match and r'://' not in LINE[_match.start():] + LINE[:_match.end()]:
        output_info(FILEPATH, LINE_NUM, LINE, r'C000', r'Missing single space after `//` in comment line', _match)
    return None


def m000(FILEPATH: str, LINE_NUM: int, LINE: str, LOG_LINE: str) -> list:  # noqa N803  # pylint: disable=W0613,W0621
    """M***: Check for issues in macros code (i.e. formatting, inconsistencies, security, etc.)"""
    # pylint: disable=W0621
    # M001
    _match = REGEX_MACROS_LEADINGSPACE.search(LINE)
    if _match:
        output_info(FILEPATH, LINE_NUM, LINE, r'M001', r'Macros should not have leading space', _match)
    # M002
    _match = REGEX_MACROS_VALID.search(LINE)
    if not _match:
        output_info(FILEPATH, LINE_NUM, LINE, r'M002', r'Invalid macros format')
    # M003
    _match = REGEX_MACROS_SPACE.search(LINE)
    if _match:
        output_info(FILEPATH, LINE_NUM, LINE, r'M003', r'Extra space not needed after macros command', _match)
    # M004
    _match = REGEX_INCLUDE.search(LINE)
    _match2 = REGEX_INCLUDE_VALID.search(LINE)
    if _match and not _match2:
        output_info(FILEPATH, LINE_NUM, LINE, r'M004', r'Invalid format for `#include` macros', _match)
    # M005
    _match = REGEX_OPERATOR_EXTRA_SPACE.search(LINE)
    if _match:
        output_info(FILEPATH, LINE_NUM, LINE, r'M005', r'Extra space is not needed around operators', _match)
    return None


def s000(FILEPATH: str, LINE_NUM: int, LINE: str, LOG_LINE: str) -> list:  # noqa N803  # pylint: disable=W0613,W0621
    """S***: Check for potential security flaws and issues"""
    # pylint: disable=W0621
    if r'(' in LOG_LINE and r')' in LOG_LINE:
        # S001
        _match = REGEX_GETS.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'S001', 'To strengthen security, use `fgets()` instead of `gets()`', _match)
        # S002
        _match = REGEX_PRINTF.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'S002', 'To strengthen security, use `fprintf()` instead of `printf()`', _match)
        # S003
        _match = REGEX_PUTC.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'S003', 'To strengthen security, use `fputc()` instead of `putc()`', _match)
        # S004
        _match = REGEX_PUTS.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'S004', 'To strengthen security, use `fputs()` instead of `puts()`', _match)
        # S005
        _match = REGEX_MALLOC.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'S005', 'To strengthen security, use `calloc()` instead of `malloc()`', _match)
        # S006
        _match = REGEX_STRCPY.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'S006', 'To strengthen security, use `strncpy()` instead of `strcpy()`', _match)
        # S007
        _match = REGEX_STRCMP.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'S007', 'To strengthen security, use `strncmp()` instead of `strcmp()`', _match)
        # S008
        _match = REGEX_GETC.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'S008', 'To strengthen security, use `fgetc()` instead of `getc()`', _match)
    return None


def t000(FILEPATH: str, LINE_NUM: int, LINE: str, LOG_LINE: str) -> list:  # noqa N803  # pylint: disable=W0613,W0621
    """T***: Look for "todo" notes"""
    # pylint: disable=W0621
    # T000
    _match = REGEX_NOTE.search(LINE)
    if _match:
        output_info(FILEPATH, LINE_NUM, LINE, 'T000', 'Todo note found', _match)
    return None


def v000(FILEPATH: str, LINE_NUM: int, LINE: str, LOG_LINE: str) -> list:  # noqa N803  # pylint: disable=W0613,W0621
    """V***: Check for vague code that may perform an unintended action
    Remember, explicit code is better than implicit code
    """
    # pylint: disable=W0621
    return None


def x000(FILEPATH: str, LINE_NUM: int, LINE: str, LOG_LINE: str) -> list:  # noqa N803  # pylint: disable=C0103,R0912,R0915,W0613,W0621
    """X***: Check for inconsistencies and bad formatting"""
    # pylint: disable=W0621
    if '__' in LOG_LINE:
        # X001
        _match = REGEX_EMAIL.search(LINE)
        _match2 = REGEX_VALID_EMAIL.search(LINE)
        if _match and not _match2:
            output_info(FILEPATH, LINE_NUM, LINE, 'X001', 'Invalid email format', _match)
        # X002
        _match = REGEX_LICENSE.search(LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X002', 'Use `__copyright__` instead of `__license__`', _match)
        # X003
        _match = REGEX_VERSION.search(LINE)
        _match2 = REGEX_DCJ_VERSION.search(LINE)
        if _match and not _match2:
            output_info(FILEPATH, LINE_NUM, LINE, 'X003', 'Use the format `"YYYY.MM.DD"` with `__version__`', _match)
    # X004
    _match = REGEX_INDENT.search(LINE)
    if _match:
        output_info(FILEPATH, LINE_NUM, LINE, 'X004', 'Invalid indentation white-space; use four spaces per indent level', _match)
    # X005
    _match = REGEX_INDENT_AMOUNT.search(LINE)
    if _match and LINE.startswith(' ') and (len(_match.group(1)) % 4 is not 0):
        output_info(FILEPATH, LINE_NUM, LINE, 'X005', 'Invalid amount of indentation; use four spaces per indent level', _match)
    if 'long double' in LOG_LINE:
        # X006
        _match = REGEX_LONG_DOUBLE.search(LOG_LINE)
        _match2 = REGEX_LONG_DOUBLE_VALID.search(LOG_LINE)
        _match3 = REGEX_LONG_DOUBLE_NUM.search(LOG_LINE)
        _match4 = REGEX_LONG_DOUBLE_NUM_VALID.search(LOG_LINE)
        if _match and not _match2:
            output_info(FILEPATH, LINE_NUM, LINE, 'X006', 'Missing `L` after the assigned `long double` number', _match)
        elif _match3 and not _match4:
            output_info(FILEPATH, LINE_NUM, LINE, 'X006', 'Missing `L` after the assigned `long double` number', _match3)
    if 'float' in LOG_LINE:
        # X007
        _match = REGEX_FLOAT.search(LOG_LINE)
        _match2 = REGEX_FLOAT_VALID.search(LOG_LINE)
        _match3 = REGEX_FLOAT_NUM.search(LOG_LINE)
        _match4 = REGEX_FLOAT_NUM_VALID.search(LOG_LINE)
        if _match and not _match2:
            output_info(FILEPATH, LINE_NUM, LINE, 'X007', 'Missing `F` after the assigned `float` number', _match)
        elif _match3 and not _match4:
            output_info(FILEPATH, LINE_NUM, LINE, 'X007', 'Missing `F` after the assigned `float` number', _match3)
    if 'wchar_t' in LOG_LINE:
        # X008
        _match = REGEX_WCHAR.search(LINE)
        _match2 = REGEX_WCHAR_VALID.search(LINE)
        if _match and not _match2:
            output_info(FILEPATH, LINE_NUM, LINE, 'X008', 'Missing `L` before the literal wide-character', _match)
    # X009
    _match = REGEX_SEMICOLON_SPACE.search(LOG_LINE.replace('return ', 'return'))
    if _match and r'"";' not in LINE:
        output_info(FILEPATH, LINE_NUM, LINE, 'X009', 'No white-space should be before a semi-colon', _match)
    if '=' in LOG_LINE or '+' in LOG_LINE or '-' in LOG_LINE or '/' in LOG_LINE or '*' in LOG_LINE:
        # X010
        _match = REGEX_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X010', 'Single white-space only around `=`', _match)
        # X011
        _match = REGEX_NOT_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X011', 'Single white-space only around `!=`', _match)
        # X012
        _match = REGEX_DIV_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X012', 'Single white-space only around `/`', _match)
        # X013
        _match = REGEX_MINUS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X013', 'Single white-space only around `-`', _match)
        # X014
        _match = REGEX_MUL_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X014', 'Single white-space only around `*`', _match)
        # X015
        _match = REGEX_PLUS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X015', 'Single white-space only around `+`', _match)
        # X016
        _match = REGEX_PLUS_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X016', 'Single white-space only around `+=`', _match)
        # X017
        _match = REGEX_MINUS_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X017', 'Single white-space only around `-=`', _match)
        # X018
        _match = REGEX_MUL_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X018', 'Single white-space only around `*=`', _match)
        # X019
        _match = REGEX_DIV_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X019', 'Single white-space only around `/=`', _match)
        # X020
        _match = REGEX_MOD_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X020', 'Single white-space only around `%=`', _match)
        # X021
        _match = REGEX_LSHIFT_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X021', 'Single white-space only around `<<=`', _match)
        # X022
        _match = REGEX_RSHIFT_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X022', 'Single white-space only around `>>=`', _match)
        # X023
        _match = REGEX_AND_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X023', 'Single white-space only around `&=`', _match)
        # X024
        _match = REGEX_OR_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X024', 'Single white-space only around `^=`', _match)
        # X025
        _match = REGEX_XOR_EQUALS_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X025', 'Single white-space only around `|=`', _match)
    if '%' in LOG_LINE:
        # X026
        _match = REGEX_MOD_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X026', 'Single white-space only around `%`', _match)
    if '&&' in LOG_LINE:
        # X027
        _match = REGEX_AND_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X027', 'Single white-space only around `&&`', _match)
    if '||' in LOG_LINE:
        # X028
        _match = REGEX_OR_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X028', 'Single white-space only around `||`', _match)
    if '?' in LOG_LINE:
        # X029
        _match = REGEX_TERNARY_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X029', 'Single white-space before and after ternary operator (`?`)', _match)
    if '!' in LOG_LINE:
        # X030
        _match = REGEX_NOT_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X030', 'Single white-space before `!` and no trailing white-space', _match)
    if '<' in LOG_LINE:
        # X031
        _match = REGEX_LT_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X031', 'Single white-space before `<`', _match)
    if '>' in LOG_LINE:
        # X032
        _match = REGEX_GT_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X032', 'Single white-space before `>`', _match)
    # X033
    _match = REGEX_OPERATOR_NO_SPACE1.search(LOG_LINE)
    _match2 = REGEX_OPERATOR_NO_SPACE2.search(LOG_LINE)
    _match3 = OPERATOR_SPACE_VALID.search(LOG_LINE)
    if (_match or _match2) and not _match3:
        output_info(FILEPATH, LINE_NUM, LINE, 'X033', 'Missing single white-space around operator', _match)
    if '=' in LOG_LINE:
        # X034
        _match = EQUALS_NO_SPACE.search(LOG_LINE)
        _match2 = EQUALS_SPACE_VALID.search(LOG_LINE)
        _match3 = REGEX_SHIFT_COMPARE.search(LOG_LINE)
        if _match and not _match2 and not _match3:
            output_info(FILEPATH, LINE_NUM, LINE, 'X034', 'Missing single white-space around `=`', _match)
    if ('<' in LOG_LINE or '>' in LOG_LINE) and not LOG_LINE.startswith('#'):
        # X035
        _match = LTGT_NO_SPACE.search(LOG_LINE)
        _match2 = LTGT_SPACE_VALID.search(LOG_LINE)
        _match3 = REGEX_SHIFT_COMPARE2.search(LOG_LINE)
        if _match and not _match2 and not _match3:
            output_info(FILEPATH, LINE_NUM, LINE, 'X035', 'Missing single white-space around `>` or `<` operator', _match)
    if ('+' in LOG_LINE or '*' in LOG_LINE or '/' in LOG_LINE or '%' in LOG_LINE) and 'char*' not in LOG_LINE:
        # X036
        _match = MATH_OPERATOR_NO_SPACE.search(LOG_LINE)
        _match2 = MATH_OPERATOR_SPACE_VALID.search(LOG_LINE)
        _match3 = INCRE_DECRE.search(LOG_LINE)
        if r'=' in LOG_LINE or r'return ' in LOG_LINE:
            if _match and not _match2 and not _match3 and r'char *' not in LOG_LINE:
                output_info(FILEPATH, LINE_NUM, LINE, 'X036', 'Missing single white-space around math operator', _match)
    if r'{' in LOG_LINE:
        # X037
        if LOG_LINE.startswith('{') and LOG_LINE.endswith('{'):
            output_info(FILEPATH, LINE_NUM, LINE, 'X037', 'A starting-bracket (`{`) should not be on its own line or start a line')
        # X038
        _match = REGEX_BRACKET_NO_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X038', 'Missing single white-space before bracket', _match)
        # X039
        _match = REGEX_BRACKET_EXTRA_SPACE.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, 'X039', 'Single white-space before bracket, not more than one', _match)
    if '/*' in NO_STR_LINE and '*/' in NO_STR_LINE:
        # X040 & X041
        if NO_STR_LINE.startswith('/*') and NO_STR_LINE.endswith('*/'):
            if NO_STR_LINE.upper() != NO_STR_LINE:
                output_info(FILEPATH, LINE_NUM, LINE, 'X040', 'Section headings (`/* SECTION */`) should not contain lowercase letters')
            if '/* ' not in NO_STR_LINE or ' */' not in NO_STR_LINE:
                output_info(FILEPATH, LINE_NUM, LINE, 'X041', 'Section headings (`/* SECTION */`) should have a single space on each side of the section name')
    if LINE.endswith(' ') or LINE.endswith('\t'):
        # X042
        output_info(FILEPATH, LINE_NUM, LINE, 'X042', 'Trailing white-space found')
    if 'for(' in LOG_LINE or 'for  (' in LOG_LINE or 'for\t(' in LOG_LINE:
        # X043
        output_info(FILEPATH, LINE_NUM, LINE, 'X043', 'Single space (never TAB) needed between `for` and `(`')
    if 'while(' in LOG_LINE or 'while  (' in LOG_LINE or 'while\t(' in LOG_LINE:
        # X044
        output_info(FILEPATH, LINE_NUM, LINE, 'X044', 'Single space (never TAB) needed between `while` and `(`')
    if 'if(' in LOG_LINE or 'if  (' in LOG_LINE or 'if\t(' in LOG_LINE:
        # X045
        output_info(FILEPATH, LINE_NUM, LINE, 'X045', 'Single space (never TAB) needed between `if` and `(`')
    if 'switch(' in LOG_LINE or 'switch  (' in LOG_LINE or 'switch\t(' in LOG_LINE:
        # X046
        output_info(FILEPATH, LINE_NUM, LINE, 'X046', 'Single space (never TAB) needed between `switch` and `(`')
    if '[]' in LOG_LINE or '[ ]' in LOG_LINE:
        # X047
        output_info(FILEPATH, LINE_NUM, LINE, 'X047', 'Invalid array size')
    if 'return  ' in LOG_LINE or 'return\t\t' in LOG_LINE:
        # X048
        output_info(FILEPATH, LINE_NUM, LINE, 'X048', 'Unneeded extra white-space after return')
    return None


def z000(FILEPATH: str, LINE_NUM: int, LINE: str, LOG_LINE: str) -> list:  # noqa N803  # pylint: disable=C0103,W0613,W0621
    """Z***: Check for code that can be optimized and suggest optimal code"""
    # pylint: disable=W0621
    if r'[' in LOG_LINE and r']' in LOG_LINE:
        # Z001
        _match = REGEX_ARRAY.search(LOG_LINE)
        if _match and not ispower2(int(_match.group(1))):
            output_info(FILEPATH, LINE_NUM, LINE, r'Z001', r'Use a power-of-2 as the array size', _match)
    if r'for (' in LOG_LINE:
        # Z002
        _match = POST_INCRE_DECRE_VAR.search(LOG_LINE)
        if _match:
            output_info(FILEPATH, LINE_NUM, LINE, r'Z002', r'In for-loops, pre-increment or pre-decrement is more efficient than post-increment or post-decrement', _match)
    if r'i = i + 1' in LOG_LINE or r'j = j + 1' in LOG_LINE or r'i = i - 1' in LOG_LINE or r'j = j - 1' in LOG_LINE:
        # Z003
        output_info(FILEPATH, LINE_NUM, LINE, r'Z003', r'Use an increment (`++`) or decrement (`--`) instead of code in the formats `x = x + 1` and `x += 1`')
    if r'i += 1' in LOG_LINE or r'j += 1' in LOG_LINE or r'i -= 1' in LOG_LINE or r'j -= 1' in LOG_LINE:
        # Z003
        output_info(FILEPATH, LINE_NUM, LINE, r'Z003', r'Use an increment (`++`) or decrement (`--`) instead of code in the formats `x = x + 1` and `x += 1`')
    # Z004
    _match = REGEX_SELF_STORE.search(LOG_LINE)
    if _match and _match.group(1) == _match.group(2) and r'.' + _match.group(1) not in LOG_LINE:
        output_info(FILEPATH, LINE_NUM, LINE, r'Z004', r'Re-write code in the format `x = x + 1` to `x += 1`')
    # Z005
    _match = REGEX_MUL2.search(LOG_LINE)
    if _match:
        output_info(FILEPATH, LINE_NUM, LINE, r'Z005', r'Due to the multiplicative properties, `2 * x` is the same as `x + x`, which computers can compute more quickly')
    return None


# MAIN #

if __name__ == '__main__':  # noqa C901
    # GET SRC #
    if len(argv) == 2:
        try:
            SRC_FILE = getfile(argv[1])
            SRC_FILE_LIST = getfile_list(argv[1])
            FILEPATH = argv[1]
        except PermissionError:
            print(r'PermissionError!', file=stderr)  # noqa
            raise SystemExit(1)
        except IOError:
            print(r'IOError!', file=stderr)  # noqa
            raise SystemExit(1)
    else:
        print(r'Invalid parameters!', file=stderr)  # noqa
        raise SystemExit(1)
    # ANALYZE SRC #
    LINE_NUM = 1
    INSIDE_MULTILINE_COMMENT = False
    for LINE in SRC_FILE_LIST:  # Scan one line at-a-time
        if LINE_NUM is 1:  # MG0*: `// -*- coding: utf-8 -*-`
            _match = REGEX_CODING.search(LINE)
            _match2 = REGEX_CODING_VALID.search(LINE)
            if _match and not _match2:
                output_info(FILEPATH, LINE_NUM, LINE, r'MG01', r'Invalid format for Magic Comment; use `// -*- coding: utf-8 -*-`', _match)
            elif not _match:
                output_info(FILEPATH, LINE_NUM, r'', r'MG02', r'Missing Magic Comment `// -*- coding: utf-8 -*-`')
            elif _match2:
                LINE_NUM += 1
                continue
        elif LINE_NUM is 2:  # MG0*: `// vim:fileencoding=utf-8`
            _match = REGEX_VIM.search(LINE)
            _match2 = REGEX_VIM_VALID.search(LINE)
            if _match and not _match2:
                output_info(FILEPATH, LINE_NUM, LINE, r'MG03', r'Invalid format for Magic Comment; use `// vim:fileencoding=utf-8`', _match)
            elif not _match:
                output_info(FILEPATH, LINE_NUM, r'', r'MG04', r'Missing Magic Comment `// vim:fileencoding=utf-8`')
            elif _match2:
                LINE_NUM += 1
                continue
        if not len(LINE.strip()):  # Blank line
            LINE_NUM += 1
            continue
        # Setup special variables
        LOGICAL_LINE = strip_comments_and_strings(LINE)  # Logical line without strings and comments
        NO_STR_LINE = strip_strings(LINE)  # Physical line without strings
        if (REGEX_COMMENT_MULTILINE_START.search(NO_STR_LINE) or REGEX_COMMENT_DOC.search(NO_STR_LINE)) and r'*/' not in NO_STR_LINE:  # Start of multiline-comment
            INSIDE_MULTILINE_COMMENT = True
            LINE_NUM += 1
            continue
        elif REGEX_COMMENT_MULTILINE_END.search(NO_STR_LINE) and r'/*' not in NO_STR_LINE:  # End of multiline-comment
            INSIDE_MULTILINE_COMMENT = False
            LINE_NUM += 1
            continue
        if INSIDE_MULTILINE_COMMENT:
            LINE_NUM += 1
            continue
        # Main Loop
        if REGEX_COMMENT_LINE.search(LINE):  # Physical comment line
            t000(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
            c000_line(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
        else:  # Logical line
            if r'#' in LINE and REGEX_MACROS.search(LINE):  # M*** (Macros)
                m000(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
                # End macros checks
                LINE_NUM += 1
                continue
            elif not LINE.startswith(r'#'):  # Regular C-code (Non-macros)
                t000(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
                c000(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
                s000(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
                v000(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
                x000(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
                z000(FILEPATH, LINE_NUM, LINE, LOGICAL_LINE)
        LINE_NUM += 1
