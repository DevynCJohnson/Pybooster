#!/bin/bash
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8
# @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
# @brief Transpiler Collection
# @copyright LGPLv3
# @section License
#GNU Lesser General Public License v3
#Copyright (c) Devyn Collier Johnson, All rights reserved.
#
#This library is free software; you can redistribute it and/or
#modify it under the terms of the GNU Lesser General Public
#License as published by the Free Software Foundation; either
#version 3.0 of the License, or (at your option) any later version.
#
#This library is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#Lesser General Public License for more details.
#
#You should have received a copy of the GNU Lesser General Public
#License along with this library.


# GLOBALS #
export version=2016.03.22
export PARAM="$*"


# FUNCTIONS #
function Help {
    echo ""
    echo "=====  Transpile  ====="
    echo "This is a transpiler collection."
    echo "Usage: pyinspect [parameters]"
    echo "Options:"
    echo "-f               Specify file/script"
    echo "-h,--help        Help"
    echo "-v,--version     Version"
    echo "--coffee2js      Coffee to Javascript"
    echo "--scala2java     Scala to Java Class"
    echo "--cpp2js         C++ to Javascript"
    echo "--c2js           C to Javascript"
    echo "--llvmbc2js      LLVM Bitcode to Javascript"
    echo "--llvmasm2js     LLVM Assembly to Javascript"
    echo "--asm2bc         LLVM Assembly to LLVM Bitcode"
    echo "--bc2asm         LLVM Bitcode to LLVM Assembly"
    echo "--c2llvmasm      C/C++ to LLVM Assembly"
    echo "--c2llvmbc       C/C++ to LLVM Bitcode"
    echo "--llvm2asm       LLVM IR to Native Assembly"
    echo "--llvm2c         LLVM IR to C"
    echo "--llvm2cpp       LLVM IR to C++"
    echo ""
}


# MAIN #
_coffee2js=0
_scala2java=0
_cpp2js=0
_c2js=0
_asm2bc=0
_bc2asm=0
_c2llvmasm=0
_c2llvmbc=0
_llvm2asm=0
_llvm2cpp=0
_llvm2c=0
GOPTS=$(getopt -o f:hv \
    --long \
    llvm2c,llvm2cpp,llvm2asm,c2llvmbc,c2llvmasm,bc2asm,asm2bc,llvmasm2js,llvmbc2js,cpp2js,c2js,scala2java,coffee2js,file:,script:,version,help \
    -- "$@")
eval set -- "$GOPTS"
while true; do
    case "$1" in
        -h|--help)
            Help
            shift
        ;;
        -v|--version)
            echo $version
            shift
        ;;
        -f|--file|--script)
            shift
            export _file=${1##*/}
            export _name=${_file%.*}
            shift
        ;;
        --coffee2js)
            _coffee2js=1
            shift
        ;;
        --scala2java)
            _scala2java=1
            shift
        ;;
        --cpp2js)
            _cpp2js=1
            shift
        ;;
        --c2js|--llvmasm2js|--llvmbc2js)
            _c2js=1
            shift
        ;;
        --bc2asm)
            _bc2asm=1
            shift
        ;;
        --asm2bc)
            _asm2bc=1
            shift
        ;;
        --c2llvmasm)
            _c2llvmasm=1
            shift
        ;;
        --c2llvmbc)
            _c2llvmbc=1
            shift
        ;;
        --llvm2asm)
            _llvm2asm=1
            shift
        ;;
        --llvm2c)
            _llvm2c=1
            shift
        ;;
        --llvm2cpp)
            _llvm2cpp=1
            shift
        ;;
        --)  # End
            shift
            break
        ;;
        *)  # getopts error
            echo "GETOPTS ERROR!"
            exit 1
        ;;
    esac
done


if [ "$_coffee2js" == 1 ]; then
    coffee -c "$_file"
elif [ "$_scala2java" == 1 ]; then
    scalac "$_file"
elif [ "$_cpp2js" == 1 ]; then
    em++ -O1 "$_file" -o "$_name".js
elif [ "$_c2js" == 1 ]; then
    emcc -O1 "$_file" -o "$_name".js
elif [ "$_asm2bc" == 1 ]; then
    llvm-as "$_file" -o "$_name".bc
elif [ "$_bc2asm" == 1 ]; then
    llvm-dis "$_file" -o "$_name".ll
elif [ "$_c2llvmasm" == 1 ]; then
    clang -S -emit-llvm "$_file" -o "$_name".ll
elif [ "$_c2llvmbc" == 1 ]; then
    clang -emit-llvm "$_file" -o "$_name".bc
elif [ "$_llvm2asm" == 1 ]; then
    llc --filetype=asm "$_file"
elif [ "$_llvm2cpp" == 1 ]; then
    llc -march=cpp -o "$_name".cpp "$_file"
elif [ "$_llvm2c" == 1 ]; then
    llc -march=c -o "$_name".c "$_file"
fi


exit 0
