// Drawing mixins

// Generic drawing of more complex things

@function _widget_edge($c: $borders_edge) {
  // Outer highlight "used" on most widgets
  @return 0 1px $c;
}

@mixin fontsize($size: 24, $base: 16) {
  font-size: round($size) + pt;
}

// Helper function to stack up to 4 box-shadows
@mixin _shadows($shadow1, $shadow2: none, $shadow3: none, $shadow4: none) {
  @if $shadow4 != none {
    box-shadow: $shadow1, $shadow2, $shadow3, $shadow4;
  }
  @else if $shadow3 != none {
    box-shadow: $shadow1, $shadow2, $shadow3;
  }
  @else if $shadow2 != none {
    box-shadow: $shadow1, $shadow2;
  }
  @else {
    box-shadow: $shadow1;
  }
}

// Entries

// Entries drawing function
// $t: Entry type; Possible values: normal, focus, insensitive
// $fc: Focus color
// $edge: Set to none to not draw the bottom edge or specify a color to not use the default one
@mixin entry($t, $fc: $selected_bg_color, $edge: $borders_edge) {
  $_inner_hilight: inset 0 0 0 1px transparentize(white, 0.8);
  $_inner_hilight_hover: inset 0 0 0 1px transparentize(white, 0.7);

  @if $t == normal {
    background-color: $button_bg;
    box-shadow: $button_top_hilight;

    @include _shadows($_inner_hilight);
  }

  @if $t == focus {
    box-shadow: $button_top_hilight;
    background-color: $button_hover;
  }

  @if $t == hover {
    background-color: $button_hover;
  }

  @if $t == insensitive {
    color: $insensitive_fg_color;
    border-color: $insensitive_bg_color;
    box-shadow: none;
  }
}

// Buttons

@function _border_color($c) {
  @return darken($c, 25%);
}

// Calculate the color of text shadows
// $tc Text color
// $bg Background color
@function _text_shadow_color($tc: $fg_color, $bg: $bg_color) {
  $_lbg: lightness($bg) / 100%;

  @if lightness($tc) < 50% {
    @return transparentize(white, 1 - $_lbg / ($_lbg * 1.3));
  }
  @else {
    @return transparentize(black, $_lbg * 0.8);
  }
}

// Calculate the right top hilight color for buttons
// $c: Base color
@function _button_hilight_color($c) {
  @if lightness($c) > 90% {
    @return white;
  }
  @else if lightness($c) > 80% {
    @return transparentize(white, 0.3);
  }
  @else if lightness($c) > 50% {
    @return transparentize(white, 0.5);
  }
  @else if lightness($c) > 40% {
    @return transparentize(white, 0.7);
  }
  @else {
    @return transparentize(white, 0.9);
  }
}

// Helper function for the text emboss effect
// $tc: Text color
@mixin _button_text_shadow($tc: $fg_color, $bg: $bg_color) {
  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc) < 50% {
    text-shadow: 0 1px $_shadow;
    icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 -1px $_shadow;
    icon-shadow: 0 -1px $_shadow;
  }
}

// Button drawing function
// $t: Button type; Possible values: normal, hover, active, insensitive, insensitive-active, backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active, osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
// $c: Base button color for colored types
// $tc: Optional text color for colored types
// $edge: Set to none to not draw the bottom edge or specify a color to not use the default one
@mixin button($t, $c: $bg_color, $tc: $fg_color, $edge: $borders_edge) {

  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge, 1)));

  @if $t == normal {
    $_bg: if($c != $bg_color, transparentize($c, 0.5), lighten($bg_color, 6%));

    color: $osd_fg_color;
    background-color: $_bg;
    box-shadow: inset 0 0 0 1px transparentize(white, 0.9);
    border-color: transparent;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
    border: 1px solid;
  }
  @else if $t == hover {
    //
    // hover osd button
    //
    $_bg: if($c != $bg_color, transparentize($c, 0.5), lighten($bg_color, 10%));

    color: white;
    border-color: transparent;
    background-color: $_bg;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
  }

  @if $t == focus {
    background-color: $selected_bg_color;
    color: $osd_fg_color;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
    box-shadow: inset 0 1px lighten($selected_bg_color, 8%);
  }

  @if $t == focushover {
    background-color: lighten($selected_bg_color, 5%);
    color: $osd_fg_color;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
    box-shadow: inset 0 1px lighten($selected_bg_color, 11%);
  }
  @else if $t == active {
    color: white;
    background-color: transparentize(black, 0.6);
    box-shadow: inset 0 0 0 1px transparentize(black, 0.7);
    border-color: transparentize(white, 0.9);
    text-shadow: none;
    icon-shadow: none;
  }
  @else if $t == insensitive {
    $_bg: transparentize(mix($insensitive_fg_color, $bg_color, 20%), 0.3);

    color: $insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $_bg;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
  @else if $t == undecorated {
    border-color: transparent;
    background-color: transparent;
    background-image: none;

    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);

    text-shadow: none;
    icon-shadow: none;
  }
}
