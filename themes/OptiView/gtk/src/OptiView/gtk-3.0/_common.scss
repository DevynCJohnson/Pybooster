@function gtkalpha($c, $a) {
  @return unquote("alpha(#{$c},#{$a})");
}

$asset_suffix: if($variant == "dark", "-dark", "");

* {
  padding: 0px;
  -GtkToolButton-icon-spacing: 4;
  -GtkTextView-error-underline-color: $error_color;
  -GtkScrolledWindow-scrollbar-spacing: 0;
  -GtkToolItemGroup-expander-size: 11;
  -GtkWidget-text-handle-width: 20;
  -GtkWidget-text-handle-height: 24;
  -GtkDialog-button-spacing: 4;
  -GtkDialog-action-area-border: 0;
  outline-color: gtkalpha(currentColor, 0.3);
  outline-style: dashed;
  outline-offset: -2px;
  outline-width: 1px;
  -gtk-outline-radius: 0px;
  -gtk-secondary-caret-color: $secondary_caret_color;
}

// Base States //

.background {
  color: $fg_color;
  background-color: $bg_color;

  &:backdrop {
    color: $backdrop_fg_color;
  }
}

*:disabled {
  -gtk-icon-effect: dim;
}

.gtkstyle-fallback {
  background-color: $bg_color;
  color: $fg_color;

  &:hover {
    background-color: lighten($bg_color, 10%);
    color: $fg_color;
  }

  &:active {
    background-color: darken($bg_color, 10%);
    color: $fg_color;
  }

  &:disabled {
    background-color: $insensitive_bg_color;
    color: $insensitive_fg_color;
  }

  &:selected {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }
}

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:hover, &:backdrop:hover {
    background-color: $base_hover_color;
  }

  &:selected {
    border-radius: 0;

    @extend %selected_items;
  }

  &:backdrop {
    color: $backdrop_text_color;
    background-color: $backdrop_base_color;

    &:disabled {
      color: $backdrop_insensitive_color;
    }
  }

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }
}

.view,
textview {
  text {
    @extend %view;

    selection {
      &:focus, & {
        @extend %selected_items;
      }
    }
  }
}

textview border {
  background-color: $secondary_bg_color;
}

iconview {
  @extend .view;
}

.rubberband,
rubberband {
  border: 1px solid darken($selected_bg_color, 10%);
  background-color: transparentize(darken($selected_bg_color, 10%), 0.8);
}

flowbox {
  rubberband {
    @extend rubberband;
  }

  flowboxchild {
    padding: 4px;

    &:selected {
      @extend %selected_items;

      outline-offset: -2px;
    }
  }
}

.content-view .tile {
  margin: 2px;
  background-color: if($variant == "light", transparent, black);
  border-radius: 0px;
  padding: 0px;

  &:backdrop {
    background-color: if($variant == "light", transparent, darken($backdrop_base_color, 5%));
  }

  &:active, &:selected {
    background-color: if($variant == "light", transparent, $selected_bg_color);
  }

  &:disabled {
    background-color: if($variant == "light", transparent, $insensitive_bg_color);
  }
}

label {
  caret-color: currentColor;

  &.separator {
    @extend .dim-label;

    color: $fg_color;
  }

  row:selected &,
  &:selected {
    @extend %nobg_selected_items;
  }

  selection {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &:disabled {
    color: $insensitive_fg_color;

    selection {
      @extend %selected_items:disabled;
    }

    &:backdrop {
      color: $backdrop_insensitive_color;
    }
  }
}

.dim-label {
  opacity: 0.6;
  text-shadow: none;
}

assistant {
  .sidebar {
    background-color: $base_color;
    border-top: 1px solid $borders_color;
  }

  &.csd .sidebar {
    border-top-style: none;
  }

  .sidebar label {
    padding: 6px 12px;
  }

  .sidebar label.highlight {
    background-color: mix($bg_color, $fg_color, 80%);
  }
}

%osd, .osd {
  color: $osd_fg_color;
  border: none;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  outline-color: transparentize($osd_fg_color, 0.7);
  text-shadow: 0 1px black;
  -gtk-icon-shadow: 0 1px black;
}

statusbar,
.statusbar {
  font-size: smaller;

  & button {
    padding: 0px;
    min-height: 16px;
  }
}

// Spinner Animation //
@keyframes spin {
  to {
    -gtk-icon-transform: rotate(1turn);
  }
}

spinner {
  background: none;
  opacity: 0;
  -gtk-icon-source: -gtk-icontheme("process-working-symbolic");

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled {
      opacity: 0.5;
    }
  }
}

// Text Entries //
%entry,
entry {
  %entry_basic, & {
    border-radius: 0px;
    border: 1px solid #919191;
    caret-color: $caret_color;
    min-height: 24px;
    padding-bottom: 0px;
    padding-left: 8px;
    padding-right: 8px;
    padding-top: 0px;
    transition: none;

    @include entry(normal);

    image {
      &.right {
        padding: 4px;
        margin: 0px;
      }
    }

    &.flat {
      &:focus, &:backdrop, &:disabled, &:backdrop:disabled, & {
        background-image: none;
        border-color: transparent;
        border-radius: 0px;
        min-height: 0px;
        padding: 0px 2px;
      }
    }

    &:focus {
      @include entry(focus);
    }

    &:disabled {
      @include entry(insensitive);
    }

    selection {
      @extend %selected_items;
    }

    @each $e_type, $e_color in (error, $error_color), (warning, $warning_color) {
      &.#{$e_type} {
        color: $e_color;
        border-color: entry_focus_border($e_color);

        &:focus {
          @include entry(focus, $e_color);
        }

        selection {
          background-color: $e_color;
        }
      }
    }

    & image {
      &:focus {
        background-color: $entry_image_focus_color;
      }

      &:active, &:active:focus {
        background-color: $entry_image_active_color;
      }

      &:hover, &:hover:focus {
        background-color: $entry_image_hover_color;
      }
    }

    &:drop(active) {
      &:focus, & {
        border-color: $drop_target_color;
        box-shadow: inset 0px 0px 0px 1px $drop_target_color;
      }
    }

    .osd & {
      @include entry(osd);

      &:focus {
        @include entry(osd-focus);
      }

      &:disabled {
        @include entry(osd-insensitive);
      }
    }
  }

  progress {
    background-color: transparent;
    background-image: none;
    border-color: $selected_bg_color;
    border-radius: 0px;
    border-style: solid;
    border-width: 0px 0px 2px;
    box-shadow: none;
    margin: 2px -8px;

    &:backdrop {
      background-color: transparent;
    }
  }

  .linked:not(.vertical) > & {
    @extend %linked;
  }

  .linked:not(.vertical) > &:focus + &,
  .linked:not(.vertical) > &:focus + button,
  .linked:not(.vertical) > &:focus + combobox > box > button.combo {
    border-left-color: entry_focus_border();
  }

  .linked:not(.vertical) > &:focus.error + &,
  .linked:not(.vertical) > &:focus.error + button,
  .linked:not(.vertical) > &:focus.error + combobox > box > button.combo {
    border-left-color: entry_focus_border($error_color);
  }

  .linked:not(.vertical) > &:drop(active) + &,
  .linked:not(.vertical) > &:drop(active) + button,
  .linked:not(.vertical) > &:drop(active) + combobox > box > button.combo {
    border-left-color: $drop_target_color;
  }

  .linked.vertical > & {
    @extend %linked_vertical;

    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      border-top-color: mix($borders_color, $base_color, 30%);
    }

    &:disabled + %entry:disabled,
    &:disabled + entry:disabled {
      border-top-color: mix($borders_color, $base_color, 30%);
    }

    + %entry:focus:not(:only-child),
    + entry:focus:not(:only-child) {
      border-top-color: entry_focus_border();
    }

    + %entry:focus.error:not(:only-child),
    + entry:focus.error:not(:only-child) {
      border-top-color: entry_focus_border($error_color);
    }

    + %entry:drop(active):not(:only-child),
    + entry:drop(active):not(:only-child) {
      border-top-color: $drop_target_color;
    }

    &:focus:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo {
        border-top-color: entry_focus_border();
      }
    }

    &:focus.error:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo {
        border-top-color: entry_focus_border($error_color);
      }
    }

    &:drop(active):not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo {
        border-top-color: $drop_target_color;
      }
    }
  }
}

.emoji-picker > entry > image, entry.search > image, entry.search > image:active, entry.search > image:active:focus, entry.search > image:focus, entry.search > image:hover, entry.search > image:hover:focus, entry > image.left, entry > image.left:active, entry > image.left:active:focus, entry > image.left:focus, entry > image.left:hover, entry > image.left:hover:focus {
  background-color: inherit;
}

treeview acceleditor > label {
  background-color: $selected_bg_color;
}

treeview entry {
  &:focus {
    &:dir(rtl), &:dir(ltr) {
      background-color: $base_color;
    }
  }

  &.flat, & {
    border-radius: 0px;
    background-image: none;
    background-color: $base_color;

    &:focus {
      border-color: $selected_bg_color;
    }
  }
}

.entry-tag {
  margin-bottom: 2px;
  margin-top: 2px;
  padding: 4px;

  :dir(ltr) & {
    margin-left: 8px;
    margin-right: -4px;
  }

  :dir(rtl) & {
    margin-left: -4px;
    margin-right: 8px;
  }

  border-style: none;

  $_entry_tag_color: if($variant == "light", $selected_fg_color, $base_color);

  color: $_entry_tag_color;

  $_entry_tag_bg: if($variant == "light", $selected_bg_color, mix($fg_color, $base_color, 50%));

  background-color: $_entry_tag_bg;

  &:hover {
    background-color: lighten($_entry_tag_bg, 10%);
  }

  :backdrop & {
    background-color: if($variant == "light", $selected_bg_color, mix($backdrop_fg_color, $backdrop_base_color, 50%));
    color: $backdrop_base_color;
  }

  &.button {
    background-color: transparent;
    color: transparentize($_entry_tag_color, 0.3);
  }

  :not(:backdrop) &.button {
    &:hover {
      border: 1px solid $_entry_tag_bg;
      color: $_entry_tag_color;
    }

    &:active {
      background-color: $_entry_tag_bg;
      color: transparentize($_entry_tag_color, 0.3);
    }
  }
}

// Buttons //

$_dot_color: if($variant == "light", $selected_bg_color, lighten($selected_bg_color, 15%));

@keyframes needs_attention {
  from {
    background-image: radial-gradient(farthest-side, $_dot_color 0%, transparentize($_dot_color, 1) 0%);
  }

  to {
    background-image: radial-gradient(farthest-side, $_dot_color 95%, transparentize($_dot_color, 1));
  }
}

%button,
button {
  @at-root %button_basic, & {
    border-radius: $button-radius;
    border: 1px solid;
    margin: 4px;
    min-height: 16px;
    min-width: 16px;
    outline-style: none;
    padding: 4px;

    @include button(normal);

    &.flat {
      @include button(undecorated);

      transition: none;
    }

    &.default {
      @include button(focus);
    }

    &:hover {
      @include button(hover);

      -gtk-icon-effect: highlight;
    }

    &:focus {
      @include button(focus);
    }

    &:active:hover, &:checked:hover {
      @include button(hoveractive);
    }

    &:active, &:checked {
      @include button(active);
    }

    &.flat {
      &:disabled {
        @include button(undecorated);
      }
    }

    &:disabled {
      text-shadow: if($variant == "light", inherit, 1px 1px 1px #666);

      @include button(insensitive);

      &:active, &:checked {
        @include button(insensitive-active);
      }
    }

    &.image-button {
      min-width: 24px;
      padding-left: 4px;
      padding-right: 4px;
    }

    &.text-button {
      padding-left: 16px;
      padding-right: 16px;
    }

    &.text-button.image-button {
      padding-left: 8px;
      padding-right: 8px;

      label {
        padding-left: 8px;
        padding-right: 8px;
      }
    }

    &:drop(active) {
      color: $drop_target_color;
      border-color: $drop_target_color;
      box-shadow: inset 0px 0px 0px 1px $drop_target_color;
    }
  }

  @at-root %button_selected, & {
    row:selected & {
      @if $variant == "light" {
        border-color: $selected_borders_color;
      }

      &.flat:not(:active):not(:checked):not(:hover):not(disabled) {
        color: $selected_fg_color;
        border-color: transparent;
      }
    }
  }

  &.osd {
    min-width: 24px;
    min-height: 32px;

    &.image-button {
      min-width: 32px;
    }

    color: $osd_fg_color;
    border-radius: $button-radius;
    outline-color: transparentize($osd_fg_color, 0.7);

    @include button(osd);

    border: none;
    box-shadow: none;

    &:hover {
      @include button(osd-hover);

      border: none;
      box-shadow: none;
    }

    &:active, &:checked {
      @include button(osd-active);

      border: none;
      box-shadow: none;
    }

    &:disabled {
      @include button(osd-insensitive);

      border: none;
    }
  }

  @at-root %osd_button,
  .osd & {
    @include button(osd);

    &:hover {
      @include button(osd-hover);
    }

    &:active, &:checked {
      @include button(osd-active);
    }

    &:disabled {
      @include button(osd-insensitive);
    }

    &.flat {
      @include button(undecorated);

      box-shadow: none;
      text-shadow: 0px 1px black;
      -gtk-icon-shadow: 0px 1px black;

      &:hover {
        @include button(osd-hover);
      }

      &:disabled {
        @include button(osd-insensitive);

        background-image: none;
        border-color: transparent;
        box-shadow: none;
      }

      &:active, &:checked {
        @include button(osd-active);
      }
    }
  }

  @each $b_type, $b_color in (suggested-action, $selected_bg_color), (destructive-action, $destructive_color) {
    &.#{$b_type} {
      @include button(normal, $b_color, white);

      &.flat {
        @include button(undecorated);

        color: $b_color;
      }

      &:hover {
        @include button(hover, $b_color, white);
      }

      &:active, &:checked {
        @include button(active, $b_color, white);
      }

      &.flat {
        &:disabled {
          @include button(undecorated);

          color: transparentize($b_color, 0.2);
        }
      }

      &:disabled {
        @include button(insensitive);

        &:focus, &.default {
          &, &:backdrop {
            @include button(undecorated);
          }
        }

        &:active,
        &:checked {
          @include button(insensitive-active, $b_color, white);
        }
      }

      .osd & {
        @include button(osd, $b_color);

        &:hover {
          @include button(osd-hover, $b_color);
        }

        &:active,
        &:checked {
          @include button(osd-active, $b_color);
        }

        &:disabled {
          @include button(osd-insensitive, $b_color);
        }
      }
    }
  }

  .stack-switcher > & {
    outline-offset: -4px;

    > label {
      padding-left: 8px;
      padding-right: 8px;
    }

    > image {
      padding-left: 8px;
      padding-right: 8px;
      padding-top: 4px;
      padding-bottom: 4px;
    }

    &.text-button {
      padding-left: 8px;
      padding-right: 8px;
    }

    &.image-button {
      padding-left: 2px;
      padding-right: 2px;
    }

    &.needs-attention {
      > label,
      > image {
        @extend %needs_attention;
      }

      &:active,
      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  &.font,
  &.file {
    separator {
      background-color: transparent;
    }
  }

  &.font {
    > box > box > label {
      font-weight: bold;
    }
  }

  .inline-toolbar &, .inline-toolbar &:backdrop {
    border-radius: $button-radius;
    border-width: 1px;

    @extend %linked;
  }

  .primary-toolbar & {
    -gtk-icon-shadow: none;
  }

  .linked > &,
  .linked > &:hover,
  .linked > &:active,
  .linked > &:checked,
  .linked > &:backdrop {
    @extend %linked;
  }

  .linked.vertical > &,
  .linked.vertical > &:hover,
  .linked.vertical > &:active,
  .linked.vertical > &:checked,
  .linked.vertical > &:backdrop {
    @extend %linked_vertical;
  }

  &.circular {
    border-radius: 8192px;
    -gtk-outline-radius: 8192px;
    padding: 4px;

    label {
      padding: 0px;
    }
  }
}

%needs_attention {
  animation: needs_attention 150ms ease-in;

  $_dot_shadow: _text_shadow_color();
  $_dot_shadow_r: if($variant == "light", 0.5, 0.45);

  background-image: radial-gradient(farthest-side, $_dot_color 96%, transparentize($_dot_color, 1)), radial-gradient(farthest-side, $_dot_shadow 95%, transparentize($_dot_shadow, 1));
  background-size: 8px 8px;
  background-repeat: no-repeat;

  @if $variant == "light" {
    background-position: right 4px, right 4px;
  }
  @else {
    background-position: right 4px, right 2px;
  }

  &:backdrop {
    background-size: 8px 8px, 0 0;
  }

  &:dir(rtl) {
    @if $variant == "light" {
      background-position: left 4px, left 4px;
    }
    @else {
      background-position: left 4px, left 2px;
    }
  }
}

toolbutton:disabled > button {
  text-shadow: 1px 1px 1px #666;
}

.inline-toolbar toolbutton > button {
  @include button(normal);

  &:hover {
    @include button(hover);
  }

  &:active,
  &:checked {
    @include button(active);
  }

  &:disabled {
    @include button(insensitive);

    &:active,
    &:checked {
      @include button(insensitive-active);
    }
  }
}

toolbar.inline-toolbar toolbutton {
  > button.flat {
    @extend %linked_middle;
  }

  &:first-child > button.flat {
    @extend %linked:first-child;
  }

  &:last-child > button.flat {
    @extend %linked:last-child;
  }

  &:only-child > button.flat {
    @extend %linked:only-child;
  }
}

%linked_middle {
  &:active, &:checked {
    @include button(active);
  }

  &:active:hover, &:checked:hover {
    @include button(hoveractive);
  }

  border-radius: 0px;
  border-right-style: solid;
  border-left-style: solid;
  box-shadow: $btn-shadow-middle;

  &:hover:not(:checked):not(:active) {
    box-shadow: $btn-shadow-middle-hover;
  }
}

%linked_left {
  &:active, &:checked {
    @include button(active);
  }

  &:active:hover, &:checked:hover {
    @include button(hoveractive);
  }

  box-shadow: $btn-shadow-left;
  border-top-left-radius: $button-radius;
  border-bottom-left-radius: $button-radius;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
  border-right-style: solid;
  border-left-style: solid;

  &:hover:not(:checked):not(:active) {
    box-shadow: $btn-shadow-left-hover;
  }
}

%linked_right {
  &:active, &:checked {
    @include button(active);
  }

  &:active:hover, &:checked:hover {
    @include button(hoveractive);
  }

  box-shadow: $btn-shadow-right;
  border-top-left-radius: 0px;
  border-bottom-left-radius: 0px;
  border-top-right-radius: $button-radius;
  border-bottom-right-radius: $button-radius;
  border-right-style: solid;
  border-left-style: solid;

  &:hover:not(:checked):not(:active) {
    box-shadow: $btn-shadow-right-hover;
  }
}

%linked {
  @extend %linked_middle;

  &:first-child {
    @extend %linked_left;
  }

  &:last-child {
    @extend %linked_right;
  }

  &:only-child {
    border-radius: $button-radius;
    border-style: solid;
  }
}

%linked_flippable {
  @extend %linked_middle;

  &:dir(ltr) {
    &:first-child {
      @extend %linked_left;
    }

    &:last-child {
      @extend %linked_right;
    }
  }

  &:dir(rtl) {
    &:first-child {
      @extend %linked_right;
    }

    &:last-child {
      @extend %linked_left;
    }
  }

  &:only-child {
    border-radius: $button-radius;
    border-style: solid;
  }
}

%linked_vertical_middle {
  border-style: solid;
  border-radius: 0px;
}

%linked_vertical {
  @extend %linked_vertical_middle;

  &:first-child {
    border-top-left-radius: $button-radius;
    border-top-right-radius: $button-radius;
    border-radius: 0px;
  }

  &:last-child {
    border-bottom-left-radius: $button-radius;
    border-bottom-right-radius: $button-radius;
    border-style: solid;
  }

  &:only-child {
    border-radius: $button-radius;
    border-style: solid;
  }
}

%undecorated_button {
  border-color: transparent;
  background-image: none;
  box-shadow: inset 0 1px transparentize(white, 1), 0 1px transparentize(white, 1);
  text-shadow: none;
  -gtk-icon-shadow: none;
}

// Menu Buttons //
modelbutton.flat,
.menuitem.button.flat {
  min-height: 26px;
  padding-left: 4px;
  padding-right: 4px;
  border-radius: $button-radius;
  outline-offset: -2px;

  @extend %undecorated_button;

  &:hover {
    background-color: $popover_hover_color;
  }

  &:selected {
    @extend %selected_items;
  }

  check:last-child,
  radio:last-child {
    margin-left: 8px;
  }

  check:first-child,
  radio:first-child {
    margin-right: 8px;
  }
}

modelbutton.flat arrow {
  background: none;

  &:hover {
    background: none;
  }

  &.left {
    -gtk-icon-source: -gtk-icontheme("pan-start-symbolic");
  }

  &.right {
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
  }
}

button.color {
  padding: 4px;

  colorswatch:only-child {
    &, overlay {
      border-radius: 0;
    }

    @if $variant == "light" {
      box-shadow: 0 1px _text_shadow_color();

      .osd & {
        box-shadow: none;
      }
    }
  }

  @if $variant == "light" {
    .osd &, & {
      &:disabled,
      &:backdrop,
      &:active,
      &:checked {
        colorswatch:only-child {
          box-shadow: none;
        }
      }
    }
  }
}

// Links //
%link,
*:link {
  color: $link_color;

  &:visited {
    color: $link_visited_color;

    *:selected & {
      color: mix($selected_fg_color, $selected_bg_color, 60%);
    }
  }

  &:hover {
    color: lighten($link_color, 10%);

    *:selected & {
      color: mix($selected_fg_color, $selected_bg_color, 90%);
    }
  }

  &:active {
    color: $link_color;

    *:selected & {
      color: mix($selected_fg_color, $selected_bg_color, 80%);
    }
  }

  &:disabled, &:disabled:backdrop {
    color: transparentize(desaturate($link_color, 100%), 0.2);
  }

  &:backdrop {
    &:backdrop:hover, &:backdrop:hover:selected, & {
      color: $selected_bg_color;
    }
  }

  @at-root %link_selected,
  &:selected,
  *:selected & {
    color: mix($selected_fg_color, $selected_bg_color, 80%);
  }
}

button:link,
button:visited {
  @extend %undecorated_button;

  @extend *:link;

  text-shadow: none;

  &:hover,
  &:active,
  &:checked {
    @extend %undecorated_button;

    text-shadow: none;
  }

  > label {
    @extend %link;

    text-decoration-line: underline;
  }
}

// GtkSpinButton //
spinbutton {
  &:not(.vertical) {
    @extend %entry;

    padding: 0px;

    entry {
      min-width: 28px;
      margin: 0px;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0px;
      box-shadow: none;
    }

    button {
      min-height: 16px;
      margin: 0px;
      padding-bottom: 0px;
      padding-top: 0px;
      color: mix($fg_color, $base_color, 90%);
      background-image: none;
      border-style: none none none solid;
      border-color: transparentize($borders_color, 0.7);
      border-radius: 0px;
      box-shadow: none;

      &:dir(rtl) {
        border-style: none solid none none;
      }

      &:hover {
        color: $fg_color;
        background-color: $base_hover_color;
      }

      &:disabled {
        color: transparentize($insensitive_fg_color, 0.7);
      }

      &:active {
        background-color: transparentize(black, 0.9);
        box-shadow: inset 0px 2px 4px -1px transparentize(black, 0.8);
      }
    }
  }

  .osd &:not(.vertical) {
    button {
      @include button(undecorated);

      color: $osd_fg_color;
      border-style: none none none solid;
      border-color: transparentize($osd_borders_color, 0.3);
      border-radius: 0px;
      box-shadow: none;
      -gtk-icon-shadow: 0px 1px black;

      &:dir(rtl) {
        border-style: none solid none none;
      }

      &:hover {
        @include button(undecorated);

        color: $osd_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        background-color: transparentize($osd_fg_color, 0.9);
        -gtk-icon-shadow: 0 1px black;
        box-shadow: none;
      }

      &:disabled {
        @include button(undecorated);

        color: $osd_insensitive_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        -gtk-icon-shadow: none;
        box-shadow: none;
      }

      &:last-child {
        border-radius: 0 $button-radius $button-radius 0;
      }

      &:dir(rtl):first-child {
        border-radius: 0 $button-radius $button-radius 0;
      }
    }
  }

  &.vertical {
    &:disabled {
      color: $insensitive_fg_color;
    }

    &:drop(active) {
      border-color: transparent;
      box-shadow: none;
    }

    entry {
      min-height: 32px;
      min-width: 32px;
      padding: 0px;
      border-radius: 0px;
    }

    button {
      min-height: 32px;
      min-width: 32px;
      padding: 0px;

      &.up {
        @extend %top_button;
      }

      &.down {
        @extend %bottom_button;
      }
    }

    %top_button {
      border-radius: $button-radius $button-radius 0 0;
      border-style: solid solid none solid;
    }

    %bottom_button {
      border-radius: 0 0 $button-radius $button-radius;
      border-style: none solid solid solid;
    }
  }

  .osd &.vertical button:first-child {
    @include button(osd);

    &:hover {
      @include button(osd-hover);
    }

    &:active {
      @include button(osd-active);
    }

    &:disabled {
      @include button(osd-insensitive);
    }
  }

  treeview &:not(.vertical) {
    min-height: 0px;
    border-style: none;
    border-radius: 0px;

    entry {
      min-height: 0px;
      padding: 1px 2px;
    }
  }
}

// ComboBoxes //
combobox {
  arrow {
    -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    min-height: 16px;
    min-width: 16px;
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) {
        @extend %linked:last-child;
      }

      &:dir(rtl) {
        @extend %linked:first-child;
      }
    }
  }

  &:drop(active) {
    box-shadow: none;

    button.combo {
      @extend %button_basic:drop(active);
    }
  }
}

.linked > combobox > box > button.combo {
  &:dir(ltr),
  &:dir(rtl) {
    @extend %linked_middle;
  }
}

.linked:not(.vertical) > combobox:first-child > box > button.combo {
  @extend %linked:first-child;
}

.linked:not(.vertical) > combobox:last-child > box > button.combo {
  @extend %linked:last-child;
}

.linked:not(.vertical) > combobox:only-child > box > button.combo {
  @extend %linked:only-child;
}

.linked.vertical > combobox > box > button.combo {
  @extend %linked_vertical_middle;
}

.linked.vertical > combobox:first-child > box > button.combo {
  @extend %linked_vertical:first-child;
}

.linked.vertical > combobox:last-child > box > button.combo {
  @extend %linked_vertical:last-child;
}

.linked.vertical > combobox:only-child > box > button.combo {
  @extend %linked_vertical:only-child;
}

// Toolbars //
%toolbar {
  -GtkWidget-window-dragging: true;
  padding: 4px;
  background-color: $toolbar_color;
  box-shadow: inset 0px 2px transparentize($borders_color, 0.65);
}

toolbar {
  @extend %toolbar;

  padding: 4px;

  .osd & {
    background-color: transparent;
  }

  &.osd {
    padding: 8px;
    border: none;
    border-radius: $button-radius;
    background-color: $osd_bg_color;

    &.left, &.right, &.top, &.bottom {
      border-radius: 0px;
    }
  }

  &.horizontal separator {
    margin: 0px 4px 2px 4px;
  }

  &.vertical separator {
    margin: 4px 2px 4px 0px;
  }

  &:not(.inline-toolbar):not(.osd) {
    > *:not(.toggle):not(.popup) > * {
      margin-right: 1px;
      margin-bottom: 1px;
    }
  }
}

.inline-toolbar {
  @extend %toolbar;

  @extend %darkbar;

  padding: 4px;
  border-width: 0px 1px 1px;
  border-radius: 0px 0px $button-radius $button-radius;
}

searchbar > revealer > box,
.location-bar {
  @extend %toolbar;

  @extend %darkbar;

  border-width: 0px 0px 1px;
  padding: 4px;
}

searchbar > revealer > box {
  margin: -8px;
  padding: 8px;
}

%darkbar {
  background-color: darken($bg_color, 10%);
}

// Header Bars //
%titlebar,
headerbar {
  padding: 0px 4px;
  min-height: 38px;
  border-width: 0px 0px 1px;
  border-style: solid;
  border-color: $borders_color;

  @include headerbar_fill;

  &:backdrop {
    border-color: $borders_color;
    color: $backdrop_fg_color;
  }

  .title {
    font-weight: bold;
    padding-left: 16px;
    padding-right: 16px;
  }

  .subtitle {
    font-size: smaller;
    padding-left: 16px;
    padding-right: 16px;

    @extend .dim-label;
  }

  .selection-mode &,
  &.selection-mode {
    $_hc: mix($top_hilight, $selected_bg_color, 50%);

    color: $selected_fg_color;
    text-shadow: 0 -1px transparentize(black, 0.5);
    border-color: $selected_borders_color;

    @include headerbar_fill($selected_bg_color, $_hc);

    &:backdrop {
      background-color: $selected_bg_color;
      background-image: none;
      box-shadow: inset 0px 1px mix($top_hilight, $selected_bg_color, 60%);

      label {
        text-shadow: none;
        color: $selected_fg_color;
      }
    }

    .subtitle:link {
      @extend *:link:selected;
    }

    button {
      @include button(normal, $selected_bg_color, $selected_fg_color);

      &.flat {
        @include button(undecorated);
      }

      &:hover {
        @include button(hover, $selected_bg_color, $selected_fg_color);
      }

      &:active,
      &:checked,
      &.toggle:checked,
      &.toggle:active {
        @include button(active, $selected_bg_color, $selected_fg_color);
      }

      &.flat {
        &:backdrop, &:disabled, &:backdrop:disabled {
          @include button(undecorated);
        }
      }

      &:disabled {
        @include button(insensitive, $selected_bg_color, $selected_fg_color);

        &:active,
        &:checked {
          @include button(insensitive-active, $selected_bg_color, $selected_fg_color);
        }
      }

      &.suggested-action {
        @include button(normal);

        border-color: $selected_borders_color;

        &:hover {
          @include button(hover);

          border-color: $selected_borders_color;
        }

        &:active {
          @include button(active);

          border-color: $selected_borders_color;
        }

        &:disabled {
          @include button(insensitive);

          border-color: $selected_borders_color;
        }

        &:backdrop:disabled {
          @include button(backdrop-insensitive);

          border-color: $selected_borders_color;
        }
      }
    }

    .selection-menu {
      &:backdrop, & {
        border-color: transparentize($selected_bg_color, 1);
        background-color: transparentize($selected_bg_color, 1);
        background-image: none;
        box-shadow: none;
        padding-left: 8px;
        padding-right: 8px;

        arrow {
          -GtkArrow-arrow-scaling: 1;
        }

        .arrow {
          -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
          color: transparentize($selected_fg_color, 0.5);
          -gtk-icon-shadow: none;
        }
      }
    }
  }

  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left &,
  .maximized &,
  .fullscreen & {
    &:backdrop, & {
      border-radius: 0px;
    }
  }

  .maximized & {
    box-shadow: inset 0px -1px transparentize($top_hilight, 0.7);
  }

  &.default-decoration {
    padding: 4px;
    min-height: 28px;

    .maximized & {
      box-shadow: none;
    }

    button.titlebutton {
      min-height: $titlebutton-height;
      min-width: $titlebutton-width;
      margin: 0px;
      padding: $titlebutton-padding;
    }
  }

  separator {
    background-color: transparent;

    &:backdrop {
      @include headerbar_fill;
    }
  }

  separator.titlebutton {
    opacity: 0;
  }

  .solid-csd & {
    &:backdrop, & {
      &:dir(rtl), &:dir(ltr) {
        margin-left: -1px;
        margin-right: -1px;
        margin-top: -1px;
        border-radius: 0px;
        box-shadow: none;
      }
    }
  }
}

// Headerbar Widgets //
%header_widgets {
  color: if($dark_header == "true", $dark_fg_color, $fg_color);

  @if $variant == "light" and $dark_header == "true" {
    button, .text-button, .image-button {
      color: $dark_fg_color;
      border-width: 0px;
      border-radius: $button-radius;

      @include button(headerbutton-normal);

      &:hover {
        @include button(headerbutton-hover);
      }

      &:focus, &.default, &:focus:hover, &.default:hover {
        @include button(headerbutton-focus);
      }

      &:checked, &:active {
        @include button(headerbutton-active);
      }

      &:checked:hover, &:active:hover {
        @include button(headerbutton-hoveractive);
      }

      &:disabled {
        @include button(headerbutton-disabled);
      }

      &:backdrop {
        color: $backdrop_fg_color;
      }

      &:backdrop:hover {
        color: $selected_fg_color;
      }
    }

    entry {
      @include entry(normal-header);

      &:focus {
        @include entry(focus);
      }

      &:disabled {
        @include entry(insensitive-header);
      }

      caret-color: $dark_fg_color;
    }

    button.suggested-action {
      color: $selected_fg_color;

      &:disabled {
        @include button(undecorated-disabled);
      }

      &:backdrop:not(:disabled) {
        color: $selected_fg_color;
      }
    }

    .linked:not(entry) {
      button:not(:last-child):not(:only-child) {
        border-right-style: solid;
      }

      button:not(:only-child) {
        border-radius: $button-radius;
      }
    }

    switch {
      background-color: $close_button_backdrop;
      box-shadow: none;
    }
  }
}

headerbar {
  entry,
  spinbutton,
  separator:not(.sidebar),
  button {
    margin-top: 4px;
    margin-bottom: 4px;
  }

  switch {
    margin-top: 8px;
    margin-bottom: 8px;
  }

  &.titlebar headerbar:not(.titlebar) {
    background: none;
    box-shadow: none;
  }
}

.titlebar {
  border-top-left-radius: $window-radius;
  border-top-right-radius: $window-radius;
}

.background .titlebar {
  &:backdrop, & {
    border-top-left-radius: $window-radius;
    border-top-right-radius: $window-radius;
  }
}

.background.tiled .titlebar,
.background.tiled-top .titlebar,
.background.tiled-right .titlebar,
.background.tiled-bottom .titlebar,
.background.tiled-left .titlebar,
.background.maximized .titlebar,
.background.solid-csd .titlebar {
  &:backdrop, & {
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
  }
}

headerbar {
  window separator:first-child + &,
  window &:first-child {
    &:backdrop, & {
      border-top-left-radius: $window-radius;
    }
  }

  window &:last-child {
    &:backdrop, & {
      border-top-right-radius: $window-radius;
    }
  }

  window stack & {
    &:first-child, &:last-child {
      &:backdrop, & {
        border-top-left-radius: $window-radius;
        border-top-right-radius: $window-radius;
      }
    }
  }

  window.tiled &,
  window.tiled-top &,
  window.tiled-right &,
  window.tiled-bottom &,
  window.tiled-left &,
  window.maximized &,
  window.fullscreen &,
  window.solid-csd & {
    &, &:backdrop {
      &,
      &:first-child,
      &:last-child,
      &:only-child {
        border-top-left-radius: 0px;
        border-top-right-radius: 0px;
      }
    }
  }
}

.titlebar:not(headerbar) {
  window.csd > & {
    padding: 0px;
    background-color: transparent;
    background-image: none;
    border-style: none;
    border-color: transparent;
    box-shadow: none;
  }

  separator {
    background-color: $borders_color;
  }

  @extend %titlebar;
}

// Pathbars //

filechooser .path-bar.linked > button {
  @extend %linked_flippable;

  margin: 0px;
}

filechooser {
  #pathbarbox {
    background-color: $secondary_bg_color;
    border-bottom: 1px solid $borders_color;
  }
}

.path-bar button {
  &.text-button, &.image-button, & {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.text-button.image-button label {
    padding-left: 0px;
    padding-right: 0px;
  }

  &.text-button.image-button, & {
    label:last-child {
      padding-right: 8px;
    }

    label:first-child {
      padding-left: 8px;
    }
  }

  image {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.slider-button {
    padding-left: 0px;
    padding-right: 0px;
  }
}

// Tree Views //
treeview.view {
  @at-root * {
    -GtkTreeView-horizontal-separator: 4;
    -GtkTreeView-grid-line-width: 1;
    -GtkTreeView-grid-line-pattern: '';
    -GtkTreeView-tree-line-width: 1;
    -GtkTreeView-tree-line-pattern: '';
    -GtkTreeView-expander-size: 16;
  }

  border-top-color: $bg_color;

  rubberband {
    @extend rubberband;
  }

  &:selected {
    &:focus, & {
      border-radius: 0px;

      @extend %selected_items;
    }
  }

  &:disabled {
    color: $insensitive_fg_color;

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 40%);
    }
  }

  &.separator {
    min-height: 2px;
    color: $bg_color;
  }

  &:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: $selected_borders_color;

    &.after {
      border-top-style: none;
    }

    &.before {
      border-bottom-style: none;
    }
  }

  &.expander {
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");

    &:dir(rtl) {
      -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
    }

    color: mix($fg_color, $base_color, 50%);

    &:hover {
      color: $fg_color;
    }

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 70%);

      &:hover {
        color: $selected_fg_color;
      }
    }

    &:checked {
      -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }
  }

  &.progressbar {
    @if $variant == light {
      color: $base_color;
    }

    background-color: $selected_bg_color;
    background-image: image($selected_bg_color);
    box-shadow: none;

    &:selected {
      &:focus, & {
        @if $variant == "light" {
          color: $selected_bg_color;
        }
        @else {
          box-shadow: inset 0 1px transparentize(white, 0.95);
        }

        background-image: image($base_color);

        &:backdrop {
          @if $variant == "light" {
            color: $selected_bg_color;
          }

          background-color: $backdrop_base_color;
        }
      }
    }

    &:backdrop {
      @if $variant == "light" {
        color: $backdrop_base_color;
      }

      background-image: none;
      box-shadow: none;
    }
  }

  &.trough {
    background-color: transparentize($fg_color, 0.9);

    &:selected {
      &:focus, & {
        background-color: if($variant == "light", transparentize($selected_fg_color, 0.7), darken($selected_bg_color, 10%));
      }
    }
  }

  header {
    button {
      @extend %column_header_button;

      background-color: $bg_color;
      border-style: solid;
      border-width: 1px;
      box-shadow: none;
      color: $column_header_color;
      font-weight: bold;
      text-shadow: none;

      &:hover {
        @extend %column_header_button;

        background-color: $selected_bg_color;
        background-image: none;
        color: $hover_column_color;
        box-shadow: 0px 0px 4px 0px $box_shadow_color;
        transition: none;
      }

      &:active {
        @extend %column_header_button;

        background-color: $active_column_color;
        background-image: none;
        color: $column_header_color;
        transition: none;
      }
    }
  }

  button.dnd,
  header.button.dnd {
    &:active, &:selected, &:hover, & {
      background-color: $dnd_column_color;
      background-image: none;
      border-radius: 0px;
      border-style: none;
      box-shadow: inset 0px 0px 0px 1px $box_shadow_color;
      color: $base_color;
      padding: 0px 8px;
      text-shadow: none;
      transition: none;
    }
  }
}

%column_header_button {
  padding: 0px 8px;
  border-radius: 0px;
  background-image: $shiny;
  text-shadow: none;
  border-style: solid;
  border-width: 1px;
  border-color: $fg_color;

  &:disabled {
    border-color: $fg_color;
    background-image: none;
    color: $insensitive_fg_color;
  }

  &:last-child {
    &:backdrop, & {
      border-right-style: none;
    }
  }
}

// Menus //

menubar,
.menubar {
  -GtkWidget-window-dragging: true;
  padding: 0px;
  background-color: $bg_color;
  box-shadow: inset 0 -1px $borders_color;

  > menuitem {
    min-height: 16px;
    padding: 2px 8px;
    border: 0;
    border-color: transparent;
    color: if($dark_header == "true" or $variant == "dark", $dark_fg_color, $fg_color);

    menu {
      .csd &, & {
        border-radius: 0px;
        padding: 0px;
      }
    }

    &:hover, &:active {
      color: $selected_fg_color;
      border-radius: 0px;
      background-color: $selected_bg_color;
    }

    &:backdrop {
      color: $backdrop_fg_color;
    }

    &:disabled {
      color: $insensitive_fg_color;
      box-shadow: none;
    }
  }

  .csd.popup decoration {
    border-radius: 0;
  }
}

menu,
.menu,
.context-menu {
  margin: 4px;
  padding: 2px 0px;
  background-color: $base_color;
  border: 1px solid $borders_color;

  .csd & {
    border: none;
  }

  &:backdrop {
    background-color: $backdrop_menu_color;
  }

  menuitem {
    min-height: 16px;
    min-width: 40px;
    padding: 4px 8px;
    text-shadow: none;
    color: $fg_color;

    &:hover {
      color: $selected_fg_color;
      background-color: $selected_bg_color;
    }

    &:disabled {
      color: $insensitive_fg_color;
    }

    arrow {
      min-height: 16px;
      min-width: 16px;

      &:dir(ltr) {
        -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
        margin-left: 8px;
      }

      &:dir(rtl) {
        -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
        margin-right: 8px;
      }
    }

    label {
      &:dir(rtl), &:dir(ltr) {
        color: inherit;
      }
    }
  }

  > arrow {
    @include button(undecorated);

    min-height: 16px;
    min-width: 16px;
    padding: 4px;
    background-color: $bg_color;
    border-radius: 0px;

    &.top {
      margin-top: -4px;
      border-bottom: 1px solid mix($fg_color, $base_color, 10%);
      -gtk-icon-source: -gtk-icontheme("pan-up-symbolic");
    }

    &.bottom {
      margin-top: 8px;
      margin-bottom: -8px;
      border-top: 1px solid mix($fg_color, $base_color, 10%);
      -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }

    &:hover {
      background-color: mix($fg_color, $base_color, 10%);
    }

    &:disabled {
      color: transparent;
      background-color: transparent;
      border-color: transparent;
    }
  }
}

menuitem {
  accelerator {
    color: gtkalpha(currentColor, 0.55);
  }

  check,
  radio {
    &:checked, &:checked:hover {
      @include check(menuitem-checked);
    }

    min-height: 16px;
    min-width: 16px;

    &:dir(ltr) {
      margin-right: 8px;
    }

    &:dir(rtl) {
      margin-left: 8px;
    }
  }
}

// Popovers //
popover.background {
  padding: 2px;
  border-radius: $window-radius;
  background-color: $popover_bg_color;

  .csd &, & {
    border: 1px solid transparentize(black, 0.7);
  }

  box-shadow: 0 1px 2px transparentize(black, 0.7);

  & modelbutton.flat:hover,
  &.menuitem.button.flat:hover {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
    border-radius: 0px;
  }

  > list,
  > .view,
  > toolbar {
    border-style: none;
    background-color: transparent;
  }

  .csd &, & {
    &.touch-selection,
    &.magnifier {
      @extend %osd;

      border: 1px solid transparentize(white, 0.9);

      button {
        @extend %osd_button;
      }
    }

    &.osd {
      @extend %osd;
    }
  }

  separator {
    margin: 4px;
  }

  list separator {
    margin: 0px;
  }

  checkbutton,
  radiobutton {
    @extend modelbutton.flat;
  }
}

// Notebooks & Tabs //
notebook {
  padding: 0px;

  > header {
    @include tabs;

    tabs {
      margin: 0px;
    }

    @at-root %notebook_vert_arrows {
      margin-left: -4px;
      margin-right: -4px;
      padding-left: 4px;
      padding-right: 4px;

      &.down {
        -gtk-icon-source: -gtk-icontheme("pan-start-symbolic");
      }

      &.up {
        -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
      }
    }

    @at-root %notebook_horz_arrows {
      margin-top: -4px;
      margin-bottom: -4px;
      padding-top: 4px;
      padding-bottom: 4px;

      &.down {
        -gtk-icon-source: -gtk-icontheme("pan-up-symbolic");
      }

      &.up {
        -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
      }
    }

    > tabs > arrow {
      @extend %button_basic;

      @extend %button_basic.flat;

      min-height: 16px;
      min-width: 16px;
      border-radius: 0px;

      &:hover:not(:active):not(:backdrop) {
        background-clip: padding-box;
        background-image: none;
        background-color: transparentize(white, 0.7);
        border-color: transparent;
        box-shadow: none;
      }

      &:disabled {
        @include button(undecorated);
      }
    }

    tab {
      min-height: 24px;
      min-width: 24px;
      padding: 4px;
      outline-offset: 0px;
      outline-style: none;
      color: $insensitive_fg_color;
      font-weight: bold;
      border-style: solid;
      border-width: 1px;
      background-color: if($variant == "light", inherit, #243);

      &:hover {
        color: mix($insensitive_fg_color, $fg_color, 50%);

        &.reorderable-page {
          border-color: transparentize($borders_color, 1);
        }
      }

      &:checked {
        border-left-color: if($variant == "light", inherit, #FFF);
        border-right-color: if($variant == "light", inherit, #FFF);
        border-top-color: if($variant == "light", inherit, #FFF);
        font-weight: bold;
        color: $fg_color;

        &.reorderable-page {
          border-color: transparentize($borders_color, 0.5);
          background-color: transparentize($bg_color, 0.5);

          &:hover {
            background-color: transparentize($bg_color, 0.3);
          }
        }
      }

      button {
        border-color: if($variant == "light", inherit, #555);
        margin-left: if($variant == "light", inherit, 2px);
      }

      button.flat {
        color: transparentize($fg_color, 0.7);

        &:hover {
          color: currentColor;
        }

        padding: 0px;
        margin-top: 4px;
        margin-bottom: 4px;
        min-width: 20px;
        min-height: 20px;

        &:last-child {
          margin-left: 4px;
          margin-right: -4px;
        }

        &:first-child {
          margin-left: -4px;
          margin-right: 4px;
        }
      }
    }

    &.top,
    &.bottom {
      tabs {
        padding-left: 0px;
        padding-right: 0px;

        &:not(:only-child) {
          margin-left: 0px;
          margin-right: 0px;

          &:first-child {
            margin-left: 0px;
          }

          &:last-child {
            margin-right: 0px;
          }
        }

        tab {
          margin-left: 2px;
          margin-right: 2px;

          &.reorderable-page {
            border-style: solid;
            border-width: 1px;
          }
        }
      }
    }

    &.left,
    &.right {
      tabs {
        padding-top: 0px;
        padding-bottom: 0px;

        &:not(:only-child) {
          margin-top: 0px;
          margin-bottom: 0px;

          &:first-child {
            margin-top: 0px;
          }

          &:last-child {
            margin-bottom: 0px;
          }
        }

        tab {
          margin-top: 2px;
          margin-bottom: 2px;

          &.reorderable-page {
            border-style: solid;
            border-width: 1px;
          }
        }
      }
    }

    &.top tab {
      padding: 4px;
    }

    &.bottom tab {
      padding: 4px;
    }
  }

  > stack:not(:only-child) {
    background-color: $secondary_bg_color;
  }
}

// Scrollbars //
scrollbar {
  @at-root * {
    -GtkScrollbar-has-backward-stepper: true;
    -GtkScrollbar-has-forward-stepper: true;
  }

  border-width: 0px;
  background-color: $scrollbar_bg_color;

  slider {
    min-width: $_scrollbar_size;
    min-height: $_scrollbar_size;
    margin: -1px;
    border: 1px solid transparent;
    border-radius: 0px;
    background-clip: padding-box;
    background-color: $scrollbar_slider_color;
    transition: background-color $longer_duration;

    &:hover {
      background-color: $scrollbar_slider_hover_color;
    }

    &:hover:active {
      background-color: $scrollbar_slider_hover_color;
    }

    &:disabled {
      background-color: transparent;
    }
  }

  &.fine-tune {
    slider {
      min-width: $_scrollbar_size;
      min-height: $_scrollbar_size;
    }

    &.horizontal slider {
      border-width: 1px;
    }

    &.vertical slider {
      border-width: 1px;
    }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      opacity: 0.4;
      background-color: transparent;

      trough {
        background-color: transparentize($scrollbar_bg_color, 0.5);
      }

      slider {
        margin: 0;
        min-width: $_scrollbar_size;
        min-height: $_scrollbar_size;
        background-color: $fg_color;
        border: 0px solid transparent;
      }

      button {
        min-width: $_scrollbar_size;
        min-height: $_scrollbar_size;
        background-clip: padding-box;
        background-color: transparentize($scrollbar_bg_color, 0.5);
        border: 1px solid transparent;
      }

      &.horizontal {
        slider {
          margin: 0px;
          min-width: $_slider_min_length;
        }

        button {
          margin: -1px;
          min-width: $_scrollbar_size;
        }
      }

      &.vertical {
        slider {
          margin: 0px;
          min-height: $_slider_min_length;
        }

        button {
          margin: -1px;
          min-height: $_scrollbar_size;
        }
      }
    }

    &.dragging,
    &.hovering {
      opacity: 0.8;
    }
  }

  &.horizontal slider {
    min-width: $_slider_min_length;
  }

  &.vertical slider {
    min-height: $_slider_min_length;
  }

  button {
    padding: 0px;
    min-width: $_scrollbar_size;
    min-height: $_scrollbar_size;
    border-style: none;
    border-radius: 0px;
    transition-property: min-height, min-width, color;
    box-shadow: none;
    color: $scrollbar_slider_color;

    &:hover {
      color: $scrollbar_slider_hover_color;
      box-shadow: none;
    }

    &:active, &:checked {
      box-shadow: inset 0px 0px 4px 0px transparentize(black, 0.7);
      color: $scrollbar_slider_active_color;
    }

    &:disabled {
      color: transparentize($scrollbar_slider_color, 0.8);
      box-shadow: none;
      background-color: transparent;
    }
  }

  &.vertical {
    button {
      @each $s, $as in ("", ""), (":disabled", "-insensitive") {
        &.up#{$s} {
          $_url: if($variant == "dark", "assets/scrollarrow-up#{$asset_suffix}", "assets/scrollarrow-up#{$as}");

          -gtk-icon-source: -gtk-scaled(url("#{$_url}.png"), url("#{$_url}@2.png"));
        }

        &.down#{$s} {
          $_url: if($variant == "dark", "assets/scrollarrow-down#{$asset_suffix}", "assets/scrollarrow-down#{$as}");

          -gtk-icon-source: -gtk-scaled(url("#{$_url}.png"), url("#{$_url}@2.png"));
        }
      }
    }
  }

  &.horizontal {
    button {
      @each $s, $as in ("", ""), (":disabled", "-insensitive") {
        &.up#{$s} {
          $_url: if($variant == "dark", "assets/scrollarrow-left#{$asset_suffix}", "assets/scrollarrow-left#{$as}");

          -gtk-icon-source: -gtk-scaled(url("#{$_url}.png"), url("#{$_url}@2.png"));
        }

        &.down#{$s} {
          $_url: if($variant == "dark", "assets/scrollarrow-right#{$asset_suffix}", "assets/scrollarrow-right#{$as}");

          -gtk-icon-source: -gtk-scaled(url("#{$_url}.png"), url("#{$_url}@2.png"));
        }
      }
    }
  }
}

treeview ~ scrollbar.vertical {
  border-top: 1px solid $borders_color;
  margin-top: -1px;
}

// Switch //
switch {
  transition: background-color $shortest_duration $deceleration_curve, opacity $longer_duration $deceleration_curve;
  margin: 0px;
  padding: 0px;
  border: none;
  border-radius: $circular_radius;
  background-color: $dark_fill;
  background-clip: padding-box;
  font-size: 0px;

  &:checked {
    background-color: if($variant == "light", $selected_bg_color, $dark_fill);
    border-color: if($variant == "light", $selected_borders_color, $borders_color);
  }

  &:disabled {
    opacity: 0.5;
  }

  $slider_hover_shadow: if($variant == "light", 0 0 2px 1px $selected_bg_color, 0 0 2px 1px transparentize(black, 0.1));

  slider {
    transition: all $shortest_duration $deceleration_curve, box-shadow $longer_duration $deceleration_curve;
    min-width: 22px;
    min-height: 22px;
    margin: 2px;
    border-radius: $circular_radius;
    box-shadow: 0 0 2px 1px transparent, $shadow_normal;
    background-color: if($variant == "dark", lighten($bg_color, 9%), $base_color);
    color: $fg_color;
  }

  &:hover slider {
    box-shadow: $slider_hover_shadow;
    background-color: if($variant == "light", lighten($bg_color, 12%), lighten($base_color, 6%));
  }

  &:focus slider {
    box-shadow: $slider_hover_shadow;
  }

  &:focus:hover slider {
    box-shadow: $slider_hover_shadow;
  }

  &:checked slider {
    background-color: if($variant == "light", lighten($bg_color, 12%), $selected_bg_color);
    color: $fg_color;
    border-radius: $circular_radius;
  }

  &:checked:hover slider {
    box-shadow: $slider_hover_shadow;
  }

  row:selected &, menuitem:hover & {
    &:checked {
      background-color: transparentize(lighten($selected_bg_color, 20%), 0.5);
    }

    &:checked slider {
      background-color: lighten(lighten($selected_bg_color, 20%), 20%);
    }

    &:hover slider {
      box-shadow: 0 0 2px 1px transparentize(lighten($selected_bg_color, 20%), 0.7);
    }

    &:focus slider {
      box-shadow: 0 0 2px 1px transparentize(lighten($selected_bg_color, 20%), 0.6);
    }

    &:focus:hover slider {
      box-shadow: 0 0 2px 1px transparentize(lighten($selected_bg_color, 20%), 0.5);
    }
  }

  image {
    color: transparentize($fg_color, 0.3);

    &:checked {
      color: $selected_fg_color;
    }
  }
}

// Check & Radio items //

@each $check_state, $check_icon, $check_color, $check_background in ("", "none", "transparent", "#{transparentize($selected_bg_color, 0.05)}"), (":hover", "none", "transparent", "#{transparentize($selected_bg_color, 0.05)}"), (":active", "none", "transparent", "#{transparentize($selected_bg_color, 0.05)}"), (":backdrop", "none", "transparent", "#{transparentize(desaturate($selected_bg_color, 100%), 0.05)}"), (":checked", "-gtk-icontheme('object-select-symbolic')", "#{$osd_fg_color}", "#{transparentize($selected_bg_color, 0.05)}"), (":checked:hover", "-gtk-icontheme('object-select-symbolic')", "#{$osd_fg_color}", "#{transparentize($selected_bg_color, 0.05)}"), (":checked:active", "-gtk-icontheme('object-select-symbolic')", "#{$osd_fg_color}", "#{transparentize($selected_bg_color, 0.05)}"), (":backdrop:checked", "-gtk-icontheme('object-select-symbolic')", "#{transparentize($osd_fg_color, 0.2)}", "#{transparentize(desaturate($selected_bg_color, 100%), 0.05)}") {
  .view.content-view.check#{$check_state}:not(list),
  .content-view .tile check#{$check_state}:not(list) {
    margin: 4px;
    min-width: 32px;
    min-height: 32px;
    color: #{$check_color};
    background-color: #{$check_background};
    border-radius: $button-radius;
    background-image: none;
    transition: $shortest_duration;
    box-shadow: none;
    border-width: 0;
    -gtk-icon-source: #{$check_icon};
    -gtk-icon-shadow: none;
  }
}

checkbutton.text-button, radiobutton.text-button {
  padding: 2px 0px;
  outline-offset: 0px;

  label:not(:only-child) {
    &:first-child {
      margin-left: 4px;
    }

    &:last-child {
      margin-right: 4px;
    }
  }
}

check,
radio {
  margin: 0px 4px;

  &:only-child {
    margin: 0px;
  }

  min-height: 16px;
  min-width: 16px;
  border: 1px solid;
  -gtk-icon-source: none;

  @include check(normal);

  &:hover, &:hover:backdrop {
    @include check(hover);
  }

  &:active, &:active:backdrop {
    @include check(checked);
  }

  &:checked, &:checked:backdrop {
    @include check(checked);
  }

  &:checked:hover {
    @include check(checked);
  }

  &:disabled {
    @include check(insensitive);
  }

  &:disabled:backdrop, &:disabled:checked:backdrop {
    @include check(insensitive);

    color: $insensitive_fg_color;
  }

  @if $variant == "light" {
    row:selected & {
      border-color: $selected_borders_color;
    }
  }

  .osd & {
    @include button(osd);

    &:hover {
      @include button(osd);
    }

    &:active {
      @include button(osd-active);
    }

    &:disabled {
      @include button(osd-insensitive);
    }
  }

  menu menuitem & {
    margin: 0px;
    border: 1px solid;
    box-shadow: none;
    transition: none;

    &, &:disabled, &:checked {
      min-height: 16px;
      min-width: 16px;
      background-image: none;
      background-color: transparent;
      box-shadow: none;
      -gtk-icon-shadow: none;
      color: inherit;
      border-color: $borders_color;
    }

    &:checked:hover, &:hover {
      border-color: $selected_borders_color;
      color: $selected_fg_color;
    }
  }
}

%check,
check {
  border-radius: $button-radius;

  &:checked {
    -gtk-icon-source: image(-gtk-recolor(url("assets/check-symbolic.svg")), -gtk-recolor(url("assets/check-symbolic.symbolic.png")));
  }

  &:indeterminate {
    -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")), -gtk-recolor(url("assets/dash-symbolic.symbolic.png")));
  }
}

%radio,
radio {
  border-radius: $circular_radius;

  &:checked {
    -gtk-icon-source: image(-gtk-recolor(url("assets/bullet-symbolic.svg")), -gtk-recolor(url("assets/bullet-symbolic.symbolic.png")));
  }

  &:indeterminate {
    -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")), -gtk-recolor(url("assets/dash-symbolic.symbolic.png")));
  }
}

treeview.view check,
treeview.view radio {
  &:selected {
    &:focus, & {
      color: $selected_fg_color;
      border-color: $selected_borders_color;
      background-color: $selected_bg_color;
    }

    &:disabled {
      color: $insensitive_fg_color;

      &:backdrop {
        color: $backdrop_insensitive_color;
      }
    }
  }

  &:backdrop {
    &:selected, & {
      color: $selected_fg_color;
    }
  }
}

treeview.view radio:selected {
  &:focus, & {
    @extend %radio;
  }
}

// GtkScale //

%scale_trough {
  border: 1px solid $dark_fill;
  border-radius: $scale_radius;
  background-color: $dark_fill;
  box-shadow: none;

  &:disabled {
    background-color: $insensitive_bg_color;
    box-shadow: none;
  }

  row:selected & {
    box-shadow: none;

    &, &:disabled {
      border-color: $selected_borders_color;
    }
  }

  .osd & {
    border-color: $osd_borders_color;
    background-color: transparentize($osd_borders_color, 0.2);
    box-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.8);

    &:disabled {
      background-color: $osd_insensitive_bg_color;
    }
  }
}

%scale_highlight {
  border: 1px solid $selected_bg_color;
  border-radius: $scale_radius;
  background-color: $scale_color;

  &:disabled {
    background-color: transparent;
    border-color: transparent;
  }

  row:selected &, menuitem:hover & {
    &:disabled, & {
      border-color: $selected_borders_color;
    }
  }

  .osd & {
    border-color: $osd_borders_color;

    &:disabled {
      border-color: transparent;
    }
  }
}

scale {
  $_marks_length: 4px;
  $_marks_distance: 1px;

  min-height: 16px;
  min-width: 16px;
  padding: 8px;

  fill,
  highlight {
    margin: -1px;
  }

  slider {
    min-height: 16px;
    min-width: 16px;
    margin: -8px;
  }

  &.fine-tune {
    &.horizontal {
      padding-top: 8px;
      padding-bottom: 8px;
      min-height: 16px;
    }

    &.vertical {
      padding-left: 8px;
      padding-right: 8px;
      min-width: 16px;
    }

    slider {
      margin: -8px;
    }

    fill,
    highlight,
    trough {
      border-radius: 4px;
      -gtk-outline-radius: 8px;
    }
  }

  trough {
    @extend %scale_trough;

    outline-offset: 2px;
    -gtk-outline-radius: 4px;
  }

  highlight {
    @extend %scale_highlight;
  }

  fill {
    @extend %scale_trough;

    &:disabled {
      border-color: transparent;
      background-color: transparent;
    }

    .osd & {
      background-color: mix($osd_fg_color, $osd_borders_color, 25%);

      &:disabled {
        border-color: transparent;
        background-color: transparent;
      }
    }
  }

  slider {
    transition: all 100ms $deceleration_curve, box-shadow $shorter_duration $deceleration_curve;

    @include button(normal);

    box-shadow: none;
    border: 1px solid transparentize(black, 0.65);
    border-radius: 100%;

    &:hover {
      @include button(hover);

      background-color: lighten($bg_color, 18%);
      box-shadow: 0 0 0 4px if($variant == "light", transparentize($selected_bg_color, 0.7), transparentize(white, 0.96));
    }

    &:active, &:checked {
      border-color: if($variant == "light", $selected_borders_color, transparentize(black, 0.5));
      box-shadow: $shadow_hover;
    }

    &:disabled {
      @include button(insensitive);
    }

    row:selected & {
      &, &:disabled {
        border-color: $selected_borders_color;
      }
    }

    .osd & {
      @include button(osd);

      border-color: darken($osd_borders_color, 3%);
      background-color: opacify($osd_bg_color, 1);

      &:hover {
        @include button(osd-hover);
      }

      &:active {
        @include button(osd-active);
      }

      &:disabled {
        @include button(osd-insensitive);
      }
    }
  }

  value {
    color: gtkalpha(currentColor, 0.6);
  }

  marks {
    color: gtkalpha(currentColor, 0.6);

    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom), (bottom, bottom, top), (top, left, right), (bottom, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
      }
    }
  }

  &.fine-tune marks {
    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom), (bottom, bottom, top), (top, left, right), (bottom, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length - 3px);
      }
    }
  }

  @each $scale_orient, $marks_class, $marks_pos, $marks_margin in (horizontal, top, top, bottom), (horizontal, bottom, bottom, top), (vertical, top, left, right), (vertical, bottom, right, left) {
    &.#{$scale_orient} marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
      }
    }

    &.#{$scale_orient}.fine-tune marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length - 3px);
      }
    }
  }

  &.horizontal {
    indicator {
      min-height: $_marks_length;
      min-width: 1px;
    }

    &.fine-tune indicator {
      min-height: $_marks_length - 3px;
    }
  }

  &.vertical {
    indicator {
      min-height: 1px;
      min-width: $_marks_length;
    }

    &.fine-tune indicator {
      min-width: $_marks_length - 3px;
    }
  }

  @each $dir_class, $dir_infix in ("horizontal", "horz"), ("vertical", "vert") {
    @each $marks_infix, $marks_class in ("scale-has-marks-above", "marks-before:not(.marks-after)"), ("scale-has-marks-below", "marks-after:not(.marks-before)") {
      &.#{$dir_class}.#{$marks_class} {
        slider {
          margin: -8px -4px;
          padding: 0px;
          border-radius: $button-radius;

          $_scale_slider_bg_pos: bottom;

          @if $dir_class == "horizontal" {
            min-height: 22px;
            min-width: 8px;

            @if $marks_infix == "scale-has-marks-above" {
              $_scale_slider_bg_pos: top;
            }
          }
          @else {
            margin: -4px -8px;
            min-height: 8px;
            min-width: 22px;

            @if $marks_infix == "scale-has-marks-above" {
              $_scale_slider_bg_pos: left bottom;
            }
            @else {
              $_scale_slider_bg_pos: right bottom;
            }
          }
        }

        &.fine-tune slider {
          margin: -8px -4px;

          @if $dir_class == "horizontal" {}
          @else {
            margin: -4px -8px;
          }
        }
      }
    }
  }

  &.color {
    min-height: 0px;
    min-width: 0px;

    trough {
      background-image: image($borders_color);
      background-repeat: no-repeat;
    }

    &.horizontal {
      padding: 0px 0px 16px 0px;

      trough {
        padding-bottom: 4px;
        background-position: 0px -4px;
        border-radius: 0px;
      }

      slider {
        &:dir(ltr), &:dir(rtl) {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-bottom: -16px;
            margin-top: 8px;
          }
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0px 0px 0px 16px;

        trough {
          padding-left: 4px;
          background-position: 4px 0px;
          border-radius: 0px;
        }

        slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-left: -16px;
            margin-right: 8px;
          }
        }
      }

      &:dir(rtl) {
        padding: 0px 16px 0px 0px;

        trough {
          padding-right: 4px;
          background-position: -4px 0px;
          border-radius: 0px;
        }

        slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-right: -16px;
            margin-left: 8px;
          }
        }
      }
    }

    &.fine-tune {
      &.horizontal {
        &:dir(ltr), &:dir(rtl) {
          padding: 0px 0px 8px 0px;

          trough {
            padding-bottom: 8px;
            background-position: 0px -8px;
          }

          slider {
            margin-bottom: -16px;
            margin-top: 8px;
          }
        }
      }

      &.vertical {
        &:dir(ltr) {
          padding: 0px 0px 0px 8px;

          trough {
            padding-left: 8px;
            background-position: 8px 0px;
          }

          slider {
            margin-left: -16px;
            margin-right: 8px;
          }
        }

        &:dir(rtl) {
          padding: 0px 8px 0px 0px;

          trough {
            padding-right: 8px;
            background-position: -8px 0px;
          }

          slider {
            margin-right: -16px;
            margin-left: 8px;
          }
        }
      }
    }
  }
}

// Progress bars //
progressbar {
  &.horizontal {
    trough,
    progress {
      min-height: 8px;
      border-style: none;
      box-shadow: none;
    }
  }

  &.vertical {
    trough,
    progress {
      min-height: 8px;
      border-style: none;
      box-shadow: none;
    }
  }

  trough {
    background-color: if($variant == "light", darken($bg_color, 12%), $dark_borders_color);
  }

  &.horizontal progress {
    margin: 0px -1px;
  }

  &.vertical progress {
    margin: -1px 0px;
  }

  font-size: smaller;
  color: transparentize($fg_color, 0.6);

  trough {
    @extend %scale_trough;
  }

  progress {
    @extend %scale_highlight;

    border-radius: $scale_radius;

    &.left {
      border-top-left-radius: $scale_radius;
      border-bottom-left-radius: $scale_radius;
    }

    &.right {
      border-top-right-radius: $scale_radius;
      border-bottom-right-radius: $scale_radius;
    }

    &.top {
      border-top-right-radius: $scale_radius;
      border-top-left-radius: $scale_radius;
    }

    &.bottom {
      border-bottom-right-radius: $scale_radius;
      border-bottom-left-radius: $scale_radius;
    }
  }

  &.osd {
    min-width: 8px;
    min-height: 8px;
    background-color: transparent;

    trough {
      border-style: none;
      border-radius: 0px;
      background-color: transparent;
      box-shadow: none;
    }

    progress {
      border-style: none;
      border-radius: 0px;
    }
  }

  trough.empty progress {
    all: unset;
  }
}

// Level Bar //
levelbar {
  &.horizontal {
    block {
      min-height: 1px;
    }

    &.discrete block {
      margin: 0px 1px;
      min-width: 32px;
    }
  }

  &.vertical {
    block {
      min-width: 1px;
    }

    &.discrete block {
      margin: 1px 0px;
      min-height: 32px;
    }
  }

  trough {
    border: 1px solid;
    padding: 2px;
    border-radius: $button-radius;

    @include entry(normal);

    border-color: $borders_color;
    box-shadow: none;

    &:backdrop {
      @include entry(backdrop);
    }
  }

  block {
    border: 1px solid;
    border-radius: 1px;

    &.low {
      border-color: if($variant == "light", darken($warning_color, 20%), $warning_color);
      background-color: $warning_color;

      &:backdrop {
        border-color: $warning_color;
      }
    }

    &.high,
    &:not(.empty) {
      border-color: if($variant == "light", darken($selected_bg_color, 20%), $selected_bg_color);
      background-color: $selected_bg_color;

      &:backdrop {
        border-color: $selected_bg_color;
      }
    }

    &.full {
      border-color: if($variant == "light", darken($success_color, 20%), $success_color);
      background-color: $success_color;

      &:backdrop {
        border-color: $success_color;
      }
    }

    &.empty {
      background-color: transparent;
      border-color: if($variant == "light", transparentize($fg_color, 0.8), transparentize($fg_color, 0.9));

      &:backdrop {
        border-color: transparentize($backdrop_fg_color, 0.85);
      }
    }
  }
}

// Print Dialog //
printdialog {
  paper {
    color: $fg_color;
    border: 1px solid $borders_color;
    background: white;
    padding: 0px;
  }

  .dialog-action-box {
    margin: 8px;
  }
}

// Frames //

frame > border,
.frame {
  box-shadow: none;
  margin: 0px;
  padding: 0px;
  border-radius: 0px;
  border: 1px solid $borders_color;

  &.flat {
    border-style: none;
  }

  &:backdrop {
    border-color: $backdrop_borders_color;
  }
}

frame.flat > border {
  border-style: none;
}

actionbar > revealer > box {
  padding: 8px;
  border-top: 1px solid $borders_color;

  &:backdrop {
    border-color: $backdrop_borders_color;
  }
}

scrolledwindow {
  viewport.frame {
    border-style: none;
  }

  overshoot {
    &.top {
      @include overshoot(top);
    }

    &.bottom {
      @include overshoot(bottom);
    }

    &.left {
      @include overshoot(left);
    }

    &.right {
      @include overshoot(right);
    }
  }

  junction {
    border-color: transparent;
    border-image: linear-gradient(to bottom, $borders_color 1px, transparent 1px) 0 0 0 1 / 0 1px stretch;
    background-color: $scrollbar_bg_color;

    &:dir(rtl) {
      border-image-slice: 0 1 0 0;
    }
  }
}

separator {
  background-color: $sep_color;
  min-width: 1px;
  min-height: 1px;
}

// Lists //
list {
  color: $text_color;
  background-color: $secondary_bg_color;
  border-color: $borders_color;

  row {
    padding: 2px;
  }
}

row {
  transition: none;

  &:hover {
    transition: none;
  }

  &.activatable {
    &.has-open-popup,
    &:hover {
      background-color: transparentize($fg_color, 0.95);
    }

    &:active {
      box-shadow: inset 0px 2px 2px transparentize(black, 0.8);
    }

    &:selected {
      &:active {
        box-shadow: inset 0px 2px 4px transparentize(black, 0.5);
      }

      &.has-open-popup,
      &:hover {
        background-color: mix($fg_color, $selected_bg_color, 10%);
      }
    }
  }

  &:selected {
    @extend %selected_items;
  }
}

// App Notifications //
.app-notification,
.app-notification.frame {
  @extend %osd;

  padding: 8px;
  border-radius: 0px 0px $button-radius $button-radius;
  background-color: $osd_bg_color;
  background-image: none;
  background-clip: padding-box;

  button {
    @extend %osd_button;
  }

  border {
    border: none;
  }
}

// Expanders //
expander {
  title > arrow {
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");

    &:dir(rtl) {
      -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
    }

    &:hover {
      color: lighten($fg_color, 30%);
    }

    &:disabled {
      color: $insensitive_fg_color;
    }

    &:disabled:backdrop {
      color: $backdrop_insensitive_color;
    }

    &:checked {
      -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }
  }
}

// Calendar //
calendar {
  color: $text_color;
  border: 1px solid $borders_color;

  &:selected {
    @extend %selected_items;

    border-radius: $button-radius;
  }

  &.header {
    border-bottom-color: transparentize(black, 0.9);
  }

  &.button {
    @extend %undecorated_button;

    color: transparentize($fg_color, 0.55);

    &:hover {
      color: $fg_color;
    }

    &:disabled {
      color: transparentize($insensitive_fg_color, 0.55);
    }
  }

  &.highlight {
    color: $insensitive_fg_color;
  }

  &:indeterminate {
    color: gtkalpha(currentColor, 0.1);
  }
}

// Dialogs //

messagedialog {
  // Message Dialog styling
  .titlebar {
    min-height: 20px;
    background-image: none;
    background-color: $bg_color;
    border-style: none;
    border-top-left-radius: $window-radius;
    border-top-right-radius: $window-radius;

    @include headerbar_fill;
  }

  &.csd {
    &.background {
      border-bottom-left-radius: $window-radius;
      border-bottom-right-radius: $window-radius;
    }

    .dialog-action-area button {
      padding: 8px 16px;
      border-radius: 0px;
      border-style: none;
      border-top-style: solid;
      box-shadow: none;
      border-color: $borders_color;

      &:focus {
        box-shadow: inset 0px 0px 0px 1px $selected_bg_color;
        background-color: $selected_bg_color;
        color: $selected_fg_color;
      }

      &:first-child {
        border-bottom-left-radius: $button-radius;
        -gtk-outline-bottom-left-radius: $button-radius;
      }

      &:last-child {
        border-bottom-right-radius: $button-radius;
        -gtk-outline-bottom-right-radius: $button-radius;
      }
    }
  }
}

filechooser {
  .dialog-action-box {
    border-top: 1px solid $borders_color;
  }

  #pathbarbox {
    border-bottom: 1px solid $bg_color;
  }
}

filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}

// Sidebar //

.sidebar {
  border-style: none;
  background-color: $sidebar_bg_color;

  &:not(separator) {
    @at-root %sidebar_left,
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      border-right: 1px solid $borders_color;
      border-left-style: none;
    }

    @at-root %sidebar_right,
    &:dir(rtl),
    &.right {
      border-left: 1px solid $borders_color;
      border-right-style: none;
    }
  }

  list {
    background-color: transparent;
  }

  paned & {
    &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & {
      border-style: none;
    }
  }

  separator {
    background-color: transparent;
  }

  treeview, treeview:backdrop {
    background-color: $sidebar_bg_color;
  }
}

stacksidebar {
  &.sidebar {
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      list {
        @extend %sidebar_left;
      }
    }

    &:dir(rtl),
    &.right {
      list {
        @extend %sidebar_right;
      }
    }
  }

  row {
    padding: 8px 4px;

    > label {
      padding-left: 4px;
      padding-right: 4px;
    }

    &.needs-attention > label {
      @extend %needs_attention;

      background-size: 8px 8px, 0px 0px;
    }
  }
}

separator.sidebar {
  background-color: $borders_color;
  border-style: none;
  margin: 0px;

  &:backdrop {
    background-color: $backdrop_borders_color;
  }

  &.selection-mode,
  .selection-mode & {
    background-color: darken($selected_bg_color, 20%);
  }
}

// File Chooser //

$_placesidebar_icons_opacity: 0.7;

row image.sidebar-icon {
  opacity: $_placesidebar_icons_opacity;
}

placessidebar {
  > viewport.frame {
    border-style: none;
    border-right: $borders_color;
  }

  separator {
    border-top: 1px solid $secondary_borders_color;
  }

  .sidebar-row {
    &:hover {
      background-color: $base_hover_color;
    }
  }

  row {
    min-height: 36px;
    padding: 0px;

    > revealer {
      padding: 0px 16px;
    }

    &:selected {
      color: $selected_fg_color;
    }

    &:disabled {
      color: $insensitive_fg_color;
    }

    image.sidebar-icon {
      opacity: $_placesidebar_icons_opacity;

      &:dir(ltr) {
        padding-right: 8px;
      }

      &:dir(rtl) {
        padding-left: 8px;
      }
    }

    label.sidebar-label {
      &:dir(ltr) {
        padding-right: 2px;
      }

      &:dir(rtl) {
        padding-left: 2px;
      }
    }

    @at-root button.sidebar-button {
      @extend %button_basic.flat;

      @extend %button_selected.flat;

      min-height: 26px;
      min-width: 26px;
      margin-top: 4px;
      margin-bottom: 4px;
      padding: 0px;
      border-radius: 100%;
      -gtk-outline-radius: 100%;

      &:not(:hover):not(:active),
      &:backdrop {
        > image {
          opacity: $_placesidebar_icons_opacity;
        }
      }
    }

    &:selected:active {
      box-shadow: none;
    }

    &.sidebar-placeholder-row {
      padding: 0px 8px;
      min-height: 2px;
      background-image: image($drop_target_color);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row {
      color: $selected_bg_color;
    }

    &:drop(active):not(:disabled) {
      color: $drop_target_color;
      box-shadow: inset 0px 1px $drop_target_color, inset 0px -1px $drop_target_color;

      &:selected {
        color: $selected_fg_color;
        background-color: $drop_target_color;
      }
    }
  }
}

placesview {
  .server-list-button > image {
    transition: none;
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    transition: none;
    -gtk-icon-transform: rotate(-0.5turn);
  }

  row.activatable:hover {
    background-color: transparent;
  }

  > actionbar > revealer > box > label {
    padding-left: 8px;
    padding-right: 8px;
  }
}

// Paned //
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none;
    border-style: none;
    background-color: transparent;
    background-image: image($borders_color), image($borders_color);
    background-size: 0px 0px;

    &:selected {
      background-image: image($selected_bg_color);
    }

    &.wide {
      min-width: 4px;
      min-height: 4px;
      background-color: $bg_color;
      background-image: image($borders_color), image($borders_color);
      background-size: 1px 1px, 1px 1px;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0px -8px 0px 0px;
      padding: 0px 8px 0px 0px;
      background-position: left;
    }

    &:dir(rtl) {
      margin: 0px 0px 0px -8px;
      padding: 0px 0px 0px 8px;
      background-position: right;
    }

    &.wide {
      margin: 0px;
      padding: 0px;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0px 0px -8px 0px;
    padding: 0px 0px 8px 0px;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0px;
      padding: 0px;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}

// GtkInfoBar //
infobar {
  border-style: none;

  &.info,
  &.question,
  &.warning,
  &.error {
    &:backdrop > revealer > box, & > revealer > box {
      label, & {
        color: $fg_color;
      }

      background-color: if($variant == "light", desaturate(lighten(invert($selected_bg_color), 45%), 30%), desaturate(darken(invert($selected_bg_color), 40%), 70%));
      border-bottom: 1px solid lighten($borders_color, 5%);
    }

    text-shadow: none;

    &:backdrop {
      text-shadow: none;
    }

    button {
      @include button(normal, $bg_color, $fg_color, none);

      &:hover {
        @include button(hover, $bg_color, $fg_color, none);
      }

      &:active,
      &:checked {
        @include button(active, $bg_color, $fg_color, none);
      }

      &:disabled {
        @include button(insensitive, $bg_color, $fg_color, none);
      }

      &:backdrop {
        @include button(backdrop, $bg_color, $fg_color, none);

        border-color: _border_color($bg_color);

        &:disabled {
          @include button(backdrop-insensitive, $bg_color, $fg_color, none);

          border-color: _border_color($bg_color);
        }
      }

      &:backdrop, & {
        label, & {
          color: $fg_color;
        }
      }
    }

    selection {
      background-color: darken($bg_color, 10%);
    }

    *:link {
      color: $link_color;
    }
  }
}

// Tooltips //
tooltip {
  &.background {
    background-color: transparentize(black, 0.2);
    background-clip: padding-box;
    border: 1px solid $tooltip_borders_color;
  }

  padding: 0px;
  border-radius: 0px;
  box-shadow: none;
  text-shadow: 0 1px black;

  decoration {
    background-color: transparent;
  }

  * {
    padding: 2px;
    background-color: transparent;
    color: white;
  }
}

// Color Chooser //
colorswatch {
  &, &:drop(active) {
    border-style: none;
  }

  $_colorswatch_overlay_shadow: if($variant == "light", inset 0 2px 2px -4px transparentize(black, 0.3), inset 0 4px 2px -2px transparentize(black, 0.5));

  &.top, &.bottom, &.right, &.left {
    border-radius: 0px;

    overlay {
      border-radius: 0px;
    }
  }

  &.dark {
    outline-color: transparentize(white, 0.4);

    overlay {
      color: white;

      &:hover {
        border-color: if($variant == "light", transparentize(black, 0.2), $borders_color);
      }

      &:backdrop {
        color: transparentize(white, 0.5);
      }
    }
  }

  &.light {
    outline-color: transparentize(black, 0.4);

    overlay {
      color: black;

      &:hover {
        border-color: if($variant == "light", transparentize(black, 0.5), $borders_color);
      }

      &:backdrop {
        color: transparentize(black, 0.5);
      }
    }
  }

  &:drop(active) {
    box-shadow: none;

    &.light overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0px 0px 0px 2px if($variant == "light", darken($drop_target_color, 7%), $borders_color), inset 0px 0px 0px 1px $drop_target_color;
    }

    &.dark overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0px 0px 0px 2px if($variant == "light", transparentize(black, 0.7), $borders_color), inset 0px 0px 0px 1px $drop_target_color;
    }
  }

  overlay {
    box-shadow: $_colorswatch_overlay_shadow;
    border: 1px solid if($variant == "light", transparentize(black, 0.7), $borders_color);

    &:hover {
      box-shadow: inset 0px 1px transparentize(white, 0.7);
    }
  }

  &#add-color-button {
    border-radius: 0px;

    &:only-child {
      border-radius: 0px;
    }

    overlay {
      @include button(normal);

      &:hover {
        @include button(hover);
      }
    }
  }

  &:disabled {
    opacity: 0.5;

    overlay {
      border-color: transparentize(black, 0.4);
      box-shadow: none;
    }
  }

  row:selected & {
    box-shadow: 0px 0px 0px 2px $selected_fg_color;
  }

  &#editor-color-sample {
    border-radius: 0px;

    overlay {
      border-radius: 0px;
    }
  }
}

colorchooser .popover.osd {
  border-radius: 0px;
  outline-style: none;
}

// Miscellaneous //

.content-view {
  background-color: darken($bg_color, 7%);

  &:hover {
    -gtk-icon-effect: highlight;
  }

  rubberband, .rubberband {
    @extend rubberband;
  }
}

.scale-popup {
  .osd & {
    @extend %osd;
  }

  .osd & button.flat {
    border-style: none;
    border-radius: $button-radius;
  }

  button {
    &:hover {
      @extend %undecorated_button;

      background-color: transparentize($fg_color, 0.9);
      border-radius: $button-radius;
    }
  }
}

// Window Decorations //

decoration {
  border-radius: $window-radius $window-radius 0px 0px;
  border-width: 0px;

  $_wm_border: if($variant == "light", transparentize(black, 0.77), transparentize($borders_color, 0.1));
  $_wm_border_backdrop: if($variant == "light", transparentize(black, 0.82), transparentize($borders_color, 0.1));

  box-shadow: 0px 1px 4px 1px transparentize(black, 0.5), 0px 0px 0px 1px $_wm_border;
  margin: 8px;

  &:backdrop {
    box-shadow: 0px 1px 4px 1px transparent, 0px 1px 2px 1px transparentize(black, 0.8), 0px 0px 0px 1px $_wm_border_backdrop;
  }

  .maximized &,
  .fullscreen &,
  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left & {
    border-radius: 0px;
  }

  .maximized &,
  .fullscreen &,
  .popup & {
    box-shadow: none;
  }

  .ssd {
    box-shadow: 0px 0px 0px 1px $_wm_border;
    border-radius: $window-radius $window-radius 0px 0px;

    &.maximized {
      border-radius: 0;
    }

    border: none;

    @include ssd_fill;
  }

  .csd.popup & {
    border-radius: 0px;
    box-shadow: 0px 1px 2px transparentize(black, 0.8), 0px 0px 0px 1px transparentize($_wm_border, 0.1);
  }

  tooltip.csd & {
    border-radius: $window-radius;
    box-shadow: none;
  }

  messagedialog.csd & {
    border-radius: $window-radius;
    box-shadow: 0px 1px 2px transparentize(black, 0.8), 0px 0px 0px 1px transparentize($_wm_border, 0.1);
  }

  .solid-csd & {
    border-radius: 0px;
    margin: 4px;
    background-color: $backdrop_bg_color;
    border: solid 1px $backdrop_borders_color;
    box-shadow: none;
  }
}

%titlebutton {
  min-width: $titlebutton-width;
  min-height: $titlebutton-height;
  padding: 0px;
  margin: 2px;
  border-radius: 2px;
}

.ssd .titlebar {
  border-width: 0px;

  @include ssd_fill;

  padding: 2px 4px;

  &.default-decoration button.titlebutton {
    @extend %titlebutton;

    transition-duration: $shortest_duration;
  }
}

headerbar,
.titlebar {
  &.default-decoration button.titlebutton {
    padding: 0px 2px;
    min-width: 0px;
    min-height: $titlebutton-height;
    margin: 0px 2px;
  }

  button.titlebutton {
    @extend %titlebutton;

    @include button(undecorated);

    @each $b in "close", "maximize", "minimize" {
      &.#{$b} {
        color: transparent;
        background-color: transparent;
        background-position: center;
        background-repeat: no-repeat;
        border-width: 0px;
        box-shadow: none;
        transition-property: background-color;
        transition-duration: $shorter_duration;

        @if $b == close {
          background-color: $close_button;

          &:hover, &:active {
            background-color: $close_button_hover;
          }

          &:backdrop {
            background-color: $close_button_backdrop;

            &:hover, &:active {
              background-color: $close_button_hover;
            }
          }
        }
        @else if $b == maximize or minimize {
          &:hover, &:active {
            background-color: $max_min_hover;
          }
        }
      }
    }

    @each $k in "close", "maximize", "minimize" {
      @each $l, $m in ("", ""), (":backdrop", "-backdrop"), (":hover", "-hover"), (":active", "-hover") {
        &.#{$k}#{$l} {
          @if $dark_header == "false" and $variant == "light" {
            background-image: -gtk-scaled(url("assets/titlebutton-#{$k}#{$m}.png"), url("assets/titlebutton-#{$k}#{$m}@2.png"));
          }
          @else {
            background-image: -gtk-scaled(url("assets/titlebutton-#{$k}-hover.png"), url("assets/titlebutton-#{$k}-hover@2.png"));
          }
        }
      }
    }

    @if variant == "dark" or $dark_header == "true" {
      &:not(:hover) {
        opacity: 0.8;
      }

      &:backdrop:not(:hover) {
        opacity: 0.5;
      }
    }
  }

  .maximized & {
    button.titlebutton {
      @each $l, $m in ("", ""), (":backdrop", "-backdrop"), (":hover", "-hover"), (":active", "-hover") {
        &.maximize#{$l} {
          @if $dark_header == "false" and $variant == "light" {
            background-image: -gtk-scaled(url("assets/titlebutton-unmaximize#{$m}.png"), url("assets/titlebutton-unmaximize#{$m}@2.png"));
          }
          @else {
            background-image: -gtk-scaled(url("assets/titlebutton-unmaximize-hover.png"), url("assets/titlebutton-unmaximize-hover@2.png"));
          }
        }
      }

      @if variant == "dark" or $dark_header == "true" {
        &:not(:hover) {
          opacity: 0.8;
        }

        &:backdrop:not(:hover) {
          opacity: 0.5;
        }
      }
    }
  }
}

%selected_items {
  background-color: $selected_bg_color;

  @at-root %nobg_selected_items, & {
    color: $selected_fg_color;

    @if $variant == "light" {
      outline-color: transparentize($selected_fg_color, 0.7);
    }

    &:disabled {
      color: mix($selected_fg_color, $selected_bg_color, 50%);
    }

    &:backdrop {
      color: $backdrop_selected_fg_color;

      &, &:hover {
        background-color: $selected_bg_color;
      }

      &:disabled {
        color: mix($backdrop_selected_fg_color, $selected_bg_color, 30%);
      }
    }
  }
}

.monospace {
  font-family: Monospace;
}

// Touch Copy & Paste //

cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;

  &.top {
    -gtk-icon-source: -gtk-icontheme("selection-start-symbolic");
  }

  &.bottom {
    -gtk-icon-source: -gtk-icontheme("selection-end-symbolic");
  }
}

.context-menu {
  font: initial;
}

.keycap {
  min-width: 20px;
  min-height: 24px;
  margin-top: 2px;
  padding-bottom: 4px;
  padding-left: 4px;
  padding-right: 4px;
  color: $fg_color;
  background-color: $base_color;
  border: 1px solid;
  border-color: if($variant == "light", mix($borders_color, $bg_color, 50%), $borders_color);
  border-radius: 4px;
  box-shadow: if($variant == "light", inset 0 -4px mix($base_color, $bg_color, 20%), inset 0 -4px mix($borders_color, $base_color, 60%));
  font-size: 10pt;
}

:not(decoration):not(window):drop(active):focus,
:not(decoration):not(window):drop(active) {
  border-color: $drop_target_color;
  box-shadow: inset 0px 0px 0px 1px $drop_target_color;
}

stackswitcher button.text-button {
  min-width: 100px;
}

stackswitcher button.circular,
stackswitcher button.text-button.circular {
  min-width: 32px;
  min-height: 32px;
  padding: 0px;
}

// App Icons //
.lowres-icon {
  -gtk-icon-shadow: 0px -1px rgba(0, 0, 0, 0.05), 1px 0px rgba(0, 0, 0, 0.1), 0px 1px rgba(0, 0, 0, 0.3), -1px 0px rgba(0, 0, 0, 0.1);
}

.icon-dropshadow {
  -gtk-icon-shadow: 0px 1px 16px rgba(0, 0, 0, 0.05), 0px -1px rgba(0, 0, 0, 0.05), 1px 0px rgba(0, 0, 0, 0.1), 0px 1px rgba(0, 0, 0, 0.3), -1px 0px rgba(0, 0, 0, 0.1);
}

// Emoji //

popover.emoji-picker {
  padding-left: 0px;
  padding-right: 0px;
}

button.emoji-section {
  border-color: transparent;
  border-width: 2px;
  border-style: none none solid;
  border-radius: 0px;
  margin: 2px 4px 2px 4px;
  padding: 4px 0px 0px;
  min-width: 32px;
  min-height: 28px;
  background: none;
  box-shadow: none;
  text-shadow: none;
  outline-offset: -4px;

  &:backdrop:not(:checked) {
    border-color: transparent;
  }

  &:hover {
    border-color: $borders_color;
  }

  &:checked {
    border-color: $selected_bg_color;
  }

  label {
    padding: 0px;
    opacity: 0.55;
  }

  &:hover label {
    opacity: 0.775;
  }

  &:checked label {
    opacity: 1;
  }
}

.emoji {
  font-size: x-large;
  padding: 4px;
  border-radius: 4px;

  :hover {
    background: $selected_bg_color;
  }
}

// Miscellaneous //

.floating-bar {
  background-color: $bg_color;
  font-size: smaller;

  &.bottom.left {
    border-top: 1px solid $borders_color;
    border-right: 1px solid $borders_color;
  }

  &.bottom.right {
    border-top: 1px solid $borders_color;
    border-left: 1px solid $borders_color;
  }
}

buttonbox.horizontal.linked button {
  margin: 8px;
}

buttonbox.vertical.linked button {
  margin: 2px;
}
