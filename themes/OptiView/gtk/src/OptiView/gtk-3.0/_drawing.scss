// Drawing Mixins //

// Generic Drawing //

// Helper mixin to stack up to box-shadows
@mixin _shadows($list...) {
  $shadows: null;
  @each $shadow in $list {
    @if $shadow != none {
      $shadows: $shadows, $shadow;
    }
  }
  box-shadow: $shadows;
}

// Entries //

// Entries drawing function
// $t: Entry type; Possible values: normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop
// $fc: Focus color
// $fs: Focus shadow
// $dc: Dark bg
// $dfc: Dark fg
// $edge: Set to `none` to not draw the bottom edge or specify a color to use inplace of the default color
@mixin entry($t, $fc: $selected_bg_color, $fs: $selected_bg_color, $edge: none, $dc: $dark_bg_color, $dfc: $dark_fg_color) {
  $_blank_edge: if($edge == none, none, 0 0px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, 0 1px $edge);
  @if $t == normal {
    background-color: $secondary_bg_color;
    border-color: $borders_color;
    box-shadow: none;
    color: $text_color;
  }
  @if $t == focus {
    border-color: $focus_color;
    box-shadow: 0px 0px 4px 2px $fs;
  }
  @if $t == insensitive {
    background-color: $insensitive_bg_color;
    border-color: $borders_color;
    color: $insensitive_fg_color;
  }
  @if $t == normal-header {
    @if $dark_header == "true" or $variant == "dark" {
      background-color: lighten($dc, 15%);
      color: $dfc;
      @include edges(normal-dark);
    }
    @else {
      @include entry(normal);
    }
  }
  @if $t == insensitive-header {
    @if $dark_header == "true" or $variant == "dark" {
      color: $dfc;
      background-color: lighten($dark_base_color, 10%);
      @include edges(disabled);
    }
    @else {
      @include entry(insensitive);
    }
  }
  @if $t == osd {
    color: $selected_fg_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t == osd-focus {
    color: $selected_fg_color;
    border-color: $selected_bg_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t == osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

// Buttons //

// Buttons borders & shadows
@mixin edges($s: normal, $c: $bg_color, $b: if($c != $bg_color, darken($c, 25%), darken($borders_color, 12%)), $bi: if($c != $bg_color, darken($c, 25%), $insensitive_borders_color)) {
  @if $s == normal {
    box-shadow: none;
    border-color: $b;
  }
  @else if $s == normal-dark {
    box-shadow: none;
    border-color: $b;
  }
  @else if $s == hover {
    box-shadow: $shadow_hover;
    border-color: darken($b, 10%);
  }
  @else if $s == active {
    box-shadow: $shadow_active;
    border-color: $b;
    border-top-color: darken($b, 10%);
  }
  @else if $s == active-dark {
    box-shadow: $shadow_active;
    border-color: $b;
  }
  @else if $s == focus {
    border-color: if($variant == "dark", lighten($selected_bg_color, 20%), $focus_color);
    box-shadow: 0px 0px 4px 2px $selected_bg_color;
  }
  @else if $s == focus-dark {
    border-color: if($variant == "dark", lighten($selected_bg_color, 20%), $selected_bg_color);
    box-shadow: 0px 0px 4px 2px $selected_bg_color;
  }
  @else if $s == disabled {
    box-shadow: none;
    border-color: $bi;
  }
}

// Button drawing function
// $t: Button type; Possible values: normal, hover, active, insensitive, insensitive-active, backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active, osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
// $c: Base button color for colored types
// $tc: Optional text color for colored types
// $edge: Set to `none` to not draw the bottom edge or specify a color to use inplace of the default color
// $dc: Dark color (for headerbars)
// $dfc: Dark text color
@mixin button($t, $c: $btn_color, $tc: $fg_color, $edge: $borders_edge, $dc: $dark_bg_color, $dfc: $dark_fg_color) {
  @if $t == normal {
    background-color: $c;
    box-shadow: none;
    color: $tc;
    @include edges(normal);
  }
  @else if $t == hover {
    background-color: lighten($c, 10%);
    color: $tc;
    @include edges(hover);
  }
  @else if $t == focus {
    color: $tc;
    @include edges(focus);
  }
  @else if $t == active {
    background-color: if($variant == "dark", lighten($c, 20%), darken($c, 15%));
    color: $tc;
    @include edges(active);
  }
  @else if $t == hoveractive {
    background-color: if($variant == "dark", lighten($c, 30%), darken($c, 20%));
    box-shadow: $shadow_hover;
    color: $tc;
  }
  @else if $t == insensitive {
    $_bg: if($c != $btn_color, mix($c, $base_color, 85%), $insensitive_bg_color);
    color: if($tc != $fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color);
    @include edges(disabled);
    -gtk-icon-shadow: none;
    background-color: $_bg;
    text-shadow: none;
    > .label {
      color: inherit;
    }
  }
  @else if $t == insensitive-active {
    $_bg: if($c != $btn_color, darken(mix($c, $base_color, 85%), 5%), $insensitive_bg_color);
    $_bc: if($c != $btn_color, darken($c, 25%), $insensitive_borders_color);
    border-color: $_bc;
    color: if($c != $btn_color, mix($tc, $_bg, 60%), $insensitive_fg_color);
    @include edges(disabled);
    background-color: darken($c, 5%);
    > .label {
      color: inherit;
    }
  }
  @else if $t == headerbutton-normal {
    @if $dark_header == "true" or $variant == "dark" {
      background-color: transparent;
      color: $dfc;
      @include edges(disabled);
    }
    @else {
      @include button(normal);
      background-color: transparent;
      border-color: transparent;
      box-shadow: none;
    }
  }
  @else if $t == headerbutton-hover {
    @if $dark_header == "true" or $variant == "dark" {
      background-color: lighten($dc, 22%);
      color: $dfc;
      @include edges(hover);
    }
    @else {
      @include button(hover);
      &:hover:backdrop:not(.titlebutton) {
        color: $fg_color;
      }
    }
  }
  @else if $t == headerbutton-active {
    @if $dark_header == "true" or $variant == "dark" {
      background-color: darken($dc, 8%);
      color: $dfc;
      @include edges(active-dark);
    }
    @else {
      @include button(active);
      border-width: 1px;
    }
  }
  @else if $t == headerbutton-hoveractive {
    @if $dark_header == "true" or $variant == "dark" {
      background-color: darken($dc, 12%);
      color: $dfc;
      @include edges(active-dark);
    }
    @else {
      @include button(hoveractive);
      &:hover:backdrop {
        color: $fg_color;
      }
    }
  }
  @else if $t == headerbutton-focus {
    @if $dark_header == "true" or $variant == "dark" {
      background-color: $selected_bg_color;
      color: $dfc;
      @include edges(focus-dark);
    }
    @else {
      @include button(focus);
    }
  }
  @else if $t == headerbutton-disabled {
    background-color: transparent;
    color: if($tc != $fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color);
    @include button(disabled);
  }
  @else if $t == osd {
    $_bg: if($c != $btn_color, transparentize($c, 0.5), $osd_bg_color);
    -gtk-icon-shadow: 0px 1px black;
    background-clip: padding-box;
    background-image: image($_bg);
    border-color: $osd_borders_color;
    box-shadow: inset 0px 1px rgba(255, 255, 255, 0.1);
    color: $osd_fg_color;
    text-shadow: 0px 1px black;
  }
  @else if $t == osd-hover {
    $_bg: if($c != $btn_color, transparentize($c, 0.3), lighten($osd_bg_color, 12%));
    -gtk-icon-shadow: 0px 1px black;
    background-clip: padding-box;
    background-image: image($_bg);
    border-color: $osd_borders_color;
    box-shadow: inset 0px 1px rgba(255, 255, 255, 0.1);
    color: white;
    text-shadow: 0px 1px black;
  }
  @else if $t == osd-active {
    $_bg: if($c != $btn_color, $c, $osd_borders_color);
    -gtk-icon-shadow: none;
    background-clip: padding-box;
    background-image: image($_bg);
    border-color: $osd_borders_color;
    box-shadow: none;
    color: white;
    text-shadow: none;
  }
  @else if $t == osd-insensitive {
    -gtk-icon-shadow: none;
    background-clip: padding-box;
    background-image: image($osd_insensitive_bg_color);
    border-color: $osd_borders_color;
    box-shadow: none;
    color: $osd_insensitive_fg_color;
    text-shadow: none;
  }
  @else if $t == undecorated {
    background-color: transparent;
    background-image: none;
    border-color: transparent;
    box-shadow: none;
    @include _shadows(inset 0 1px transparentize(white, 1), if($edge == none, none, 0 1px transparentize($edge, 1)));
    -gtk-icon-shadow: none;
    text-shadow: none;
  }
  @else if $t == undecorated-disabled {
    @include button(undecorated);
    color: if($tc != $fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color);
    > .label {
      color: inherit;
    }
  }
}

// Check & Radio Buttons
@mixin check($t, $c: $bg_color, $tc: $fg_color, $dc: $dark_bg_color, $dfc: $dark_fg_color) {
  @if $t == normal {
    background-color: if($variant == "light", $base_color, lighten($base_color, 14%));
    border: 1px solid if($variant == "light", rgba(0, 0, 0, 0.4), $borders_color);
    color: $tc;
    @if $variant == "light" {
      box-shadow: 0px 0px 0px 1px $shadow_color_hover, inset 0px 0px 0px 1px rgba(255, 255, 255, 0.1);
    }
    transition-duration: 0s;
  }
  @else if $t == hover {
    border: 1px solid $selected_bg_color;
    box-shadow: 0px 0px 4px 2px $box_shadow_color;
    color: $tc;
  }
  @else if $t == checked {
    background-color: if($variant == "light", $base_color, $selected_bg_color);
    border: 1px solid $selected_bg_color;
    color: $fg_color;
    &:backdrop {
      color: if($variant == "light", $selected_bg_color, $selected_fg_color);
    }
  }
  @else if $t == insensitive {
    $_bg: if($c != $bg_color, mix($c, $base_color, 85%), $insensitive_bg_color);
    background-color: $_bg;
    border-color: if($variant == "light", if($c != $bg_color, darken($c, 25%), darken($borders_color, 12%)), transparent);
    box-shadow: none;
    color: if($tc != $fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color);
  }
}

// Trough
@mixin trough($flat: false, $c: $bg_color, $tc: $fg_color, $noedge: false) {
  background-color: lighten($c, 10%);
  border-color: if($c != $bg_color, darken($c, 25%), $border_color);
  color: mix($tc, $bg_color, 80%);
  @if not $noedge {
    @if lightness($c) > 60% {
      box-shadow: inset 0px -1px $borders_edge, 0px 1px $borders_edge;
    }
    @else {
      box-shadow: inset 0px -1px transparentize($borders_edge, 0.5), 0px 1px transparentize($borders_edge, 0.5);
    }
  }
  @else {
    box-shadow: none;
  }
}

// Overshoot
// $p: Position; Possible values: top, bottom, right, left
// $t: Type; Possible values: normal, backdrop
// $c: Base color
@mixin overshoot($p, $t: normal, $c: $fg_color) {
  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;
  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;
  @if $p == bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }
  @else if $p == right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }
  @else if $p == left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }
  $_small_gradient_color: $c;
  $_big_gradient_color: $c;
  @if $c == $fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: $fg_color;
  }
  $_small_gradient: -gtk-gradient(radial, $_position, 0, $_position, 0.5, to($_small_gradient_color), to(transparentize($_small_gradient_color, 1)));
  $_big_gradient: -gtk-gradient(radial, $_position, 0, $_position, 0.6, from(transparentize($_big_gradient_color, 0.93)), to(transparentize($_big_gradient_color, 1)));
  @if $t == normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }
  background-color: transparent;
  background-position: $_position;
  background-repeat: no-repeat;
  border: none;
  box-shadow: none;
}
