[styling]
character=character
commentblock=commentblock
commentline=commentline
default=default
globalclass=globalclass
identifier=identifier
instanceproperty=instanceproperty
number=number
operator=operator
regex=regex
string=string
stringeol=stringeol
verbose_regex=verbose_regex
verbose_regex_comment=verbose_regex_comment
word2=word2
word=word

[keywords]
primary=__bind __extends __hasProp __indexOf __slice and break by case catch class const continue debugger default delete do each else enum export extends false finally for function get if import in Infinity instanceof is isnt let loop NaN native new no not null of off on or return set super switch then this throw true try typeof undefined unless until var void when where while with yes yield
secondary=constructor decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt prototype require super
globalclass=Array Boolean Date Error EvalError Function Math Number Object RangeError ReferenceError RegExp String SyntaxError TypeError URIError

[settings]
lexer_filetype=Javascript
tag_parser=Javascript
extension=coffee
comment_single=#
comment_open=###
comment_close=###
comment_use_indent=true
context_action_cmd=

[indentation]
type=0
width=2

[build-menu]
FT_00_LB=_Compile into Javascript
FT_00_CM=coffee --compile "%d/%f"
FT_01_LB=View compiled _Javascript
FT_01_CM=coffee -p "%d/%f"
EX_00_LB=_Run
EX_00_CM=coffee "%d/%f"
EX_01_LB=_Evaluate
EX_01_CM=coffee --eval "%d/%f"
error_regex=^([^:]+):([0-9]+):([0-9:]+)?.*$
