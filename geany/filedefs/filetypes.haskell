[keywords]
keywords=case class data default deriving do else forall foreign if import in infix infixl infixr instance let module newtype of then type where
ffi=capi ccall export import interruptible prim safe stdcall unsafe
reserved_operators=~ ← → ∀ ∷ ★ \ | -> .. :: <- = => @

[lexer_properties]
fold.haskell.imports=0
lexer.haskell.allow.hash=1
lexer.haskell.allow.questionmark=0
lexer.haskell.allow.quotes=1
lexer.haskell.cpp=1
lexer.haskell.import.safe=1
styling.within.preprocessor=0

[settings]
extension=hs
mime_type=text/x-haskell
comment_single=--\s
comment_open={-
comment_close=-}
comment_use_indent=true
context_action_cmd=

[indentation]
type=1
width=4

[build-menu]
FT_00_LB=_Compile
FT_00_CM=ghc --make "%d/%f"
FT_00_WD=
FT_02_LB=_Lint
FT_02_CM=hlint "%d/%f"
FT_02_WD=
EX_00_LB=_Execute
EX_00_CM="%d/%e"
EX_00_WD=
