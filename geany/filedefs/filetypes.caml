[keywords]
keywords=and as asr assert begin class constraint do done downto else end exception external false for fun function functor if in include inherit initializer land lazy let lor lsl lsr lxor match method mod module mutable new object of open or private rec sig struct then to true try type val virtual when while with
keywords_optional=ignore None option ref Some

[lexer_properties]
fold.compact=1

[settings]
extension=ml
mime_type=text/x-ocaml
comment_open=(*
comment_close=*)
comment_use_indent=true
context_action_cmd=

[indentation]
type=1
width=4

[build-menu]
FT_00_LB=_Compile
FT_00_CM=ocamlc -c "%d/%f"
FT_00_WD=
FT_01_LB=
FT_01_CM=
FT_01_WD=
FT_02_LB=_Linker
FT_02_CM=ocamlc -o "%d/%e" "%d/%f"
FT_02_WD=
EX_00_LB=_Execute
EX_00_CM="%d/%e"
EX_00_WD=
