#!/bin/bash
# -*- coding: utf-8-unix; Mode: Shell; indent-tabs-mode: nil; tab-width: 4 -*-
# vim: set fileencoding=utf-8 filetype=shell syn=sh.doxygen fileformat=unix tabstop=4 expandtab :
# kate: encoding utf-8; bom off; syntax shell; indent-mode normal; eol unix; replace-tabs on; indent-width 4; tab-width 4; remove-trailing-space on;
#' @brief Universal setup script for Posix-compatible shells
#' @file profile
#' @version 2019.07.07
#' @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
#' @copyright Public Domain (CC0) - https://creativecommons.org/publicdomain/zero/1.0/
#'
#' @section GEOLOCATION
#' To disable the geolocation features included in this file, create the file `/etc/geoprofile_disable`
#'
#' @section SYMBOLS
#' Reference: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
#' ${var#pattern} - Removes smallest string from the left side that matches `pattern`
#' ${var##pattern} - Removes the largest string from the left side that matches `pattern`
#' ${var%pattern} - Removes the smallest string from the right side that matches `pattern`
#' ${var%%pattern} - Removes the largest string from the right side that matches `pattern`
#' ${param/pattern/string} - `param` is expanded and the longest match of `pattern` against its value is replaced with `string`; if `pattern` begins with `#` or `%`, it must match at the beginning or end (respectively) of the expanded value of `param`; if `string` is null, matches of `pattern` are deleted and the `/` following `pattern` may be omitted
#' ${param/pattern} - `param` is expanded and the longest match of `pattern` is deleted; if `pattern` begins with `#` or `%`, it must match at the beginning or end (respectively) of the expanded value of `param`
#' ${param:-word} - If `param` is unset or null, the expansion of `word` is substituted; otherwise, the value of `param` is substituted
#' ${param:=word} - If `param` is unset or null, the expansion of `word` is assigned to `param`; Positional parameters and special parameters cannot be assigned to in this manner
#' ${param:?word} - If `param` is null or unset, the expansion of `word` (or a message to that effect if `word` is not present) is written to stderr (if not interactive, then exit); otherwise, the value of `param` is substituted
#' ${param:+word} - If `param` is null or unset, nothing is substituted; otherwise, the expansion of `word` is substituted
#' ${param:offset} - Expansion of `word` is substituted by its `offset`; prefix negative values with a space
#' ${param:offset:length} - Expansion of `word` is substituted by its `offset` up to the specified `length`; prefix negative values with a space
#' ${!prefix*} - Expands to the names of variables whose names begin with `prefix`, separated by the first character of the `IFS` special variable
#' ${!prefix@} - Expands to the names of variables whose names begin with `prefix`, separated by the first character of the `IFS` special variable; when `@` is used and the expansion appears within double quotes, then each variable name expands to a separate word
#' ${!name[@]} - If `name` is an array variable, then expand to the list of array indices (keys) assigned in `name`
#' ${!name[*]} - If `name` is an array variable, then expand to the list of array indices (keys) assigned in `name`; otherwise, if `name` is not an array, expands to `0` if `name` is set and `null` otherwise. When `@` is used and the expansion appears within double quotes, each key expands to a separate word
#' ${param,,} - Expanded value of `param` in lowercase
#' ${param^^} - Expanded value of `param` in uppercase
#' ${param,,pattern} - Expands `param` and converts each character matching `pattern` to lowercase
#' ${param^^pattern} - Expands `param` and converts each character matching `pattern` to uppercase
#' ${param,pattern} - Expands `param` and converts only the first character matching `pattern` to lowercase
#' ${param^pattern} - Expands `param` and converts only the first character matching `pattern` to uppercase
#' ${#param} - Length of the expanded value of `param`
#' ${param@A} - Expanded value of `param` to its assignment line (e.g. `param='This is an example.'`)
#' ${param@a} - Expanded value of `param` to its attributes
#' ${param@E} - Expanded value of `param` with backslash escape sequences expanded
#' ${param@P} - Expanded value of `param` as if it were a prompt string, i.e. with backslash escape sequences and `$` variables expanded
#' ${param@Q} - Expanded value of `param` in quotes


# SHELL TYPE #


if [ -n "${ASH_VERSION:-}" ]; then
    PROFILE_SHELL='ash'
elif [ -n "${BASH_VERSION:-}" ]; then
    PROFILE_SHELL='bash'
    readonly bashver="${BASH_VERSION%.*}"
    readonly bashmajorver="${bashver%.*}"
    readonly bashminorver="${bashver#*.}"
    export bashver bashmajorver bashminorver
elif [ -n "${FISH_VERSION:-}" ]; then
    PROFILE_SHELL='fish'
elif [ -n "${FCEDIT:-}" ] || [ -n "${KSH_VERSION:-}" ]; then
    PROFILE_SHELL='ksh'
elif [ -n "${ZSH_VERSION:-}" ]; then
    PROFILE_SHELL='zsh'
elif [ -n "${PS3:-}" ]; then
    PROFILE_SHELL='unknown'
else
    PROFILE_SHELL='sh'
fi
readonly PROFILE_SHELL
export PROFILE_SHELL


# ENABLE LOADABLES #


if [ -d /usr/lib/bash/ ]; then
    for plugin in /usr/lib/bash/*; do
        { [ "${plugin}" == '/usr/lib/bash/Makefile.inc' ] || [ "${plugin}" == '/usr/lib/bash/loadables.h' ] || [ ! -x "${plugin}" ] || [ "${plugin}" == '/usr/lib/bash/finfo' ] || [ "${plugin}" == '/usr/lib/bash/mypid' ] || [ "${plugin}" == '/usr/lib/bash/truefalse' ]; } && continue
        enable -f "${plugin}" "${plugin##*/}"
    done
fi


# OS DETECTION #


#' Detect and return the type of the currently running operating system
os_table() {
    case "$1" in
        'aix'*) platform='aix';;
        'cygwin'*|*'cygwin'*) platform='cygwin';;
        'darwin'*) platform='darwin';;
        'dragonfly'*) platform='dragonflybsd';;
        'freebsd'*) platform='freebsd';;
        'haiku'*) platform='haiku';;
        'hp-ux'*|'hpux'*) platform='hpux';;
        *'hurd'*) platform='hurd';;
        *'illumos'*) platform='illumos';;
        *'indiana'*) platform='openindiana';;
        'inferno'*) platform='inferno';;
        'interix'*) platform='interix';;
        'linux'*) platform='linux';;
        'mingw'*) platform='mingw';;
        'minix'*) platform='minix';;
        'msys'*) platform='msys';;
        'netbsd'*) platform='netbsd';;
        'nonstop'*) platform='nonstop';;
        'openbsd'*) platform='openbsd';;
        'opensolaris'*) platform='opensolaris';;
        'plan9'*|'plan-9'*|'plan_9'*) platform='plan9';;
        'qnx'*) platform='qnx';;
        'reliant'*) platform='reliant';;
        'sinix'*) platform='sinix';;
        'solaris'*) platform='solaris';;
        'sunos'*) platform='sunos';;
        'ultrix'*) platform='ultrix';;
        'unixware'*) platform='unixware';;
        'win32'|'win64'|'win_nt'|'windows'*) platform='windows';;
        *) platform='unknown';;
    esac
    echo "$platform"
}
readonly -f os_table

# Set various variables indicating the operating system type
PLATFORM='unknown'
if [ -n "${OS:-}" ]; then
    OSTEST="$(echo "$OS" | tr '[:upper:]' '[:lower:]')"
    [ "${OSTEST:-}" = 'windows' ] && PLATFORM='windows'
    unset OSTEST
fi
if [ -n "$(command -v uname)" ]; then
    unamestr="$(uname | tr '[:upper:]' '[:lower:]')"
elif [ -f /proc/sys/kernel/ostype ] && [ -x "$(command -v sysctl)" ]; then
    unamestr="$(sysctl -n kernel.ostype | tr '[:upper:]' '[:lower:]')"
else
    unamestr='unknown'
fi
if [ -n "${OSTYPE:-}" ] && [ "$PLATFORM" == 'unknown' ]; then
    PLATFORM="$(os_table "$OSTYPE")"
elif [ "$PLATFORM" = 'unknown' ] && [ "$unamestr" != 'unknown' ]; then
    PLATFORM="$(os_table "$unamestr")"
fi
readonly PLATFORM
export PLATFORM
unset unamestr

# Determine the operating system family of the currently running operating system
case "$PLATFORM" in
    'aix'|'hpux'|'inferno'|'plan9'|'reliant'|'sinix'|'ultrix'|'unixware') OSFAMILY='unix';;
    *'bsd'|'darwin') OSFAMILY='bsd';;
    'cygwin'|'mingw'|'msys') OSFAMILY='gnuwin';;
    'haiku') OSFAMILY='beos';;
    'hurd'|'linux') OSFAMILY='gnu';;
    'illumos'|'openindiana'|*'solaris'|'sunos') OSFAMILY='sun';;
    'interix') OSFAMILY='win-interix';;
    'minix'|'qnx') OSFAMILY='unix-like';;
    'windows') OSFAMILY='windows';;
    *) OSFAMILY='unknown';;
esac
readonly OSFAMILY
export OSFAMILY


# DISTRO DETECTION #


DISTRO='unknown'
[ -r /etc/lsb-release ] && . /etc/lsb-release
[ -n "${DISTRIB_ID:-}" ] && DISTRO="$(printf "%s" "${DISTRIB_ID}" | tr '[:upper:]' '[:lower:]')"
readonly DISTRO
export DISTRO


# CPU DETECTION #


# Determine the CPU type of the currently running system
if [ -n "$(command -v uname)" ]; then
    CPU_ARCH="$(uname -m | tr '[:upper:]' '[:lower:]')"
else
    CPU_ARCH='unknown'
fi
case "$CPU_ARCH" in
    'amd'*|'i686-64'|'x86-64'|'x86_64') CPU_ARCH='x86_64';;
    'i386'*|'i486'*|'i586'*|'i686'*|'i86pc'*|'x86'|'x86pc'*) CPU_ARCH='x86_32';;
    'alpha'*) CPU_ARCH='alpha';;
    'arm'*) CPU_ARCH='arm';;
    'ia64'*|'ia_64'*|'itanium'*) CPU_ARCH='itanium';;
    'ip2'*|'ip3'*|'mips'*) CPU_ARCH='mips';;
    'm68k'*) CPU_ARCH='m68k';;
    'power'*|'ppc'*) CPU_ARCH='powerpc';;
    'sparc'*|'sun4u'*) CPU_ARCH='sparc';;
    'vax'*) CPU_ARCH='vax';;
    *) CPU_ARCH='unknown';;
esac
readonly CPU_ARCH
export CPU_ARCH


# DEKTOP ENVIRONMENT DETECTION #


# Determine the desktop environment that is currently running
if [ -z "${DESKENV:-}" ]; then
    if [ -z "${XDG_CURRENT_DESKTOP:-}" ]; then
        XDG_TEST_VAR="${XDG_CURRENT_DESKTOP}"
    elif [ -z "${XDG_SESSION_DESKTOP:-}" ]; then
        XDG_TEST_VAR="${XDG_SESSION_DESKTOP}"
    elif [ -z "${DESKTOP_SESSION:-}" ]; then
        XDG_TEST_VAR="${DESKTOP_SESSION}"
    fi
    if [ -n "${XDG_TEST_VAR:-}" ]; then
        case "${XDG_TEST_VAR}" in
            'Cinnamon'|'cinnamon'|'X-Cinnamon') DESKENV='cinnamon';;
            'DEEPIN'|'Deepin'|'deepin') DESKENV='deepin';;
            'ENLIGHTENMENT'|'enlightenment') DESKENV='enlightenment';;
            'GNOME'*|'gnome'*) DESKENV='gnome';;
            'KDE'|'kde') DESKENV='kde';;
            'LXDE'|'lxde'|'LXDE'*|'lxde'*|'Lubuntu') DESKENV='lxde';;
            'LXQt'|'lxqt'|'LXQT') DESKENV='lxqt';;
            'MATE'|'mate') DESKENV='mate';;
            'ubuntu'|'UNITY'|'unity') DESKENV='unity';;
            'XFCE'|'xfce'|'xfce'*) DESKENV='xfce';;
            'X-Generic') DESKENV='generic';;
            *) DESKENV='unknown';;
        esac
        unset XDG_TEST_VAR
        export IS_TTY='false'
    else
        DESKENV='none'
        export IS_TTY='true'
    fi
    if [ -n "${XDG_SESSION_TYPE:-}" ]; then
        case "${XDG_SESSION_TYPE}" in
            'X11'|'x11'|'Xorg'|'xorg'|'XORG') DESKTYPE='x11';;
            'wayland'|'Wayland'|'WAYLAND') DESKTYPE='wayland';;
            *) DESKTYPE='unknown';;
        esac
    else
        DESKTYPE='none'
    fi
fi
export DESKENV
export DESKTYPE


# COMMON GLOBALS #


[ ! -x "$(command -v sudo)" ] && sudo() { "${@:-}"; }
if [ -z "${HOSTNAME:-}" ] && [ -x /bin/hostname ]; then
    HOSTNAME="$(/bin/hostname)"
    readonly HOSTNAME
    export HOSTNAME
fi
if [ -z "${USERNAME:-}" ]; then
    if [ -x /usr/bin/id ]; then
        USERNAME="$(/usr/bin/id -u -n)"
    elif [ -x /bin/id ]; then
        USERNAME="$(/bin/id -u -n)"
    fi
    readonly USERNAME
    export USERNAME
fi
[ -z "${USERNAME:-}" ] && LOGNAME="$USERNAME" && readonly LOGNAME && export LOGNAME
if [ -z "${PAGER:-}" ]; then
    if [ -x /usr/local/bin/less ]; then
        export PAGER='/usr/local/bin/less'
    elif [ -x /usr/bin/less ]; then
        export PAGER='/usr/bin/less'
    elif [ -x /bin/less ]; then
        export PAGER='/bin/less'
    fi
fi
export MANPAGER="$PAGER"
export SYSTEMD_PAGER="$PAGER"


# EDITOR VARIABLES #


if [ -x "$(command -v nano)" ]; then
    SELECTED_EDITOR="$(command -v nano)"
    [ -x "$(command -v sudo)" ] && sunano() { sudo "${SELECTED_EDITOR}" "$1"; }
elif [ -x "$(command -v pico)" ]; then
    SELECTED_EDITOR="$(command -v pico)"
    [ -x "$(command -v sudo)" ] && supico() { sudo "${SELECTED_EDITOR}" "$1"; }
elif [ -x "$(command -v emacs)" ]; then
    SELECTED_EDITOR="$(command -v emacs)"
    [ -x "$(command -v sudo)" ] && suemacs() { sudo "${SELECTED_EDITOR}" "$1"; }
elif [ -x "$(command -v vim)" ]; then
    SELECTED_EDITOR="$(command -v vim)"
    [ -x "$(command -v sudo)" ] && suvim() { sudo "${SELECTED_EDITOR}" "$1"; }
elif [ -x "$(command -v vi)" ]; then
    SELECTED_EDITOR="$(command -v vi)"
    [ -x "$(command -v sudo)" ] && suvi() { sudo "${SELECTED_EDITOR}" "$1"; }
elif [ -x "$(command -v vile)" ]; then
    SELECTED_EDITOR="$(command -v vile)"
elif [ -x "$(command -v levee)" ]; then
    SELECTED_EDITOR="$(command -v levee)"
elif [ -x "$(command -v nvi)" ]; then
    SELECTED_EDITOR="$(command -v nvi)"
fi
[ -n "${SELECTED_EDITOR:-}" ] && export SELECTED_EDITOR && export EDITOR="$SELECTED_EDITOR" && export VISUAL="$SELECTED_EDITOR"
[ -n "${SELECTED_EDITOR:-}" ] && [ -x "$(command -v sudo)" ] && sedit() { sudo "${SELECTED_EDITOR}" "$1"; }
[ -x "$(command -v brew)" ] && export HOMEBREW_EDITOR="$EDITOR"
export SUDO_EDITOR="$SELECTED_EDITOR"
export SYSTEMD_EDITOR="$EDITOR"


# LOAD SHELL STARTUP FILES #


if [ -n "${PS1:-}" ]; then
    if [ -n "${BASH:-}" ] && [ "$BASH" != '/bin/sh' ] && [ ! -d /etc/shell_ext_modules ]; then
        if [ -r /etc/bash.bashrc ]; then
            . /etc/bash.bashrc
        elif [ -r /etc/bashrc ]; then
            . /etc/bashrc
        elif [ -r /etc/bash.bashrc.local ]; then
            . /etc/bash.bashrc.local
        fi
    else
        if [ "$(id -u)" -eq 0 ]; then
            PS1='# '
        else
            PS1='$ '
        fi
    fi
fi
if [ -d /etc/profile.d ]; then
    for i in /etc/profile.d/*.sh; do
        [ -r "$i" ] && . "$i"
    done
    unset i
fi
[ -z "${TERM_PROGRAM:-}" ] && [ -n "${TERM:-}" ] && TERM_PROGRAM="$TERM" && readonly TERM_PROGRAM
[ -z "${TERM:-}" ] && [ -n "${TERM_PROGRAM:-}" ] && TERM="$TERM_PROGRAM" && readonly TERM
[ -z "${TERM:-}" ] && [ -z "${TERM_PROGRAM:-}" ] && TERM='dumb' && TERM_PROGRAM='dumb'
[ -n "${TERM_PROGRAM:-}" ] && [ -n "${BASH:-}" ] && [ -r "/etc/bashrc_${TERM_PROGRAM}" ] && . "/etc/bashrc_${TERM_PROGRAM}"


# GLOBAL SETTINGS #


# Fix graphical-sudo issues on Wayland
[ "$DESKTYPE" = 'wayland' ] && [ -x "$(command -v xhost)" ] && xhost +si:localuser:root > /dev/null

[ -x /usr/libexec/path_helper ] && eval "$(/usr/libexec/path_helper -s)"

# Possible values include: bogl corba dialog gtk ncurses newt noninteractive readline slang text
[ -d /etc/apt ] && [ -f /etc/debian_version ] && { [ -x "$(command -v apt-get)" ] || [ -x "$(command -v apt)" ]; } && export DEBIAN_FRONTEND='dialog'
# Set an environment variable containing the kernel's release information (version)
[ -z "${KRELEASE:-}" ] && KRELEASE='unknown' && [ -n "$(command -v uname)" ] && KRELEASE="$(uname -r)" && readonly KRELEASE && export KRELEASE
# Ensure that Python scripts are always compiled to bytecode
export PYTHONOPTIMIZE=True


# SET $PATH #


#' Test if the pathname is in $PATH
#' @param[in] $1 The path (as a string) to test
#' @param[out] Returns `0` if true (the input was found in `$PATH`)
notinpath() { (echo ":${PATH}:" | grep -F -q -v "$1" && return 0) || return 1; }
# Setup the $PATH environment variable
[ -d /usr/local/sbin ] && notinpath ':/usr/local/sbin' && PATH="${PATH}:/usr/local/sbin"
[ -d /usr/local/bin ] && notinpath ':/usr/local/bin' && PATH="${PATH}:/usr/local/bin"
[ -d /usr/sbin ] && notinpath ':/usr/sbin' && PATH="${PATH}:/usr/sbin"
[ -d /usr/bin ] && notinpath ':/usr/bin' && PATH="${PATH}:/usr/bin"
[ -d /sbin ] && notinpath ':/sbin' && PATH="${PATH}:/sbin"
[ -d /bin ] && notinpath ':/bin' && PATH="${PATH}:/bin"
[ -x "$(command -v brew)" ] && path_tmp="${PATH}:$(brew --cellar)" && PATH="$path_tmp" && unset path_tmp
[ -d /usr/local/opt ] && notinpath ':/usr/local/opt' && PATH="${PATH}:/usr/local/opt"
[ -d /usr/opt ] && notinpath ':/usr/opt' && PATH="${PATH}:/usr/opt"
[ -d /opt/bin ] && notinpath ':/opt/bin' && PATH="${PATH}:/opt/bin"
[ -d /snap/bin ] && notinpath ':/snap/bin' && PATH="${PATH}:/snap/bin"
[ -d "${HOME}/bin" ] && notinpath "${HOME}/bin" && notinpath ':\~/bin' && PATH="${HOME}/bin:${PATH}"
[ -d "${HOME}/.local/bin" ] && notinpath "${HOME}/.local/bin" && notinpath ':\~/.local/bin' && PATH="${HOME}/.local/bin:${PATH}"
[ -d /wine/bin ] && notinpath ':/wine/bin' && PATH="${PATH}:/wine/bin"
[ -d /usr/X11/opt ] && notinpath ':/usr/X11/opt' && PATH="${PATH}:/opt/X11/bin"
[ -d /usr/local/games ] && notinpath ':/usr/local/games' && PATH="${PATH}:/usr/local/games"
[ -d /usr/games ] && notinpath ':/usr/games' && PATH="${PATH}:/usr/games"
export PATH
PATH_EXTRA=''
[ -d /usr/lib/nvidia-cuda-toolkit/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/lib/nvidia-cuda-toolkit/bin"
[ -d /usr/lib/cuda/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/lib/cuda/bin"
[ -d /usr/lib/klibc/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/lib/klibc/bin"
[ -d /usr/lib/qt5/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/lib/qt5/bin"
[ -d /usr/share/qt4/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/share/qt4/bin"
[ -d /usr/share/git-cola/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/share/git-cola/bin"
[ -d /usr/share/npm/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/share/npm/bin"
[ -d /usr/share/npm/node_modules/uuid/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/share/npm/node_modules/uuid/bin"
[ -d /usr/share/npm/node_modules/qrcode-terminal/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/share/npm/node_modules/qrcode-terminal/bin"
[ -d /usr/lib/nodejs/shelljs/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/lib/nodejs/shelljs/bin"
[ -d /usr/lib/nodejs/crc32/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/lib/nodejs/crc32/bin"
[ -d /usr/lib/nodejs/uglify-js/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/lib/nodejs/uglify-js/bin"
[ -d /usr/local/lib/node_modules/coffeelint/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/local/lib/node_modules/coffeelint/bin"
[ -d /usr/local/lib/node_modules/coffeelint/node_modules/coffeescript/bin ] && PATH_EXTRA="${PATH_EXTRA}:/usr/local/lib/node_modules/coffeelint/node_modules/coffeescript/bin"
export PATH_EXTRA


# SET $PKG_CONFIG_PATH (PACKAGE CONFIG PATH) #


#' Test if the pathname is in $PKG_CONFIG_PATH
#' @param[in] $1 The path (as a string) to test
#' @param[out] Returns `0` if true (the input was found in `$PKG_CONFIG_PATH`)
notinpcpath() { (echo "$PKG_CONFIG_PATH" | grep -F -q -v "$1" && return 0) || return 1; }
# Setup the $PKG_CONFIG_PATH environment variable
[ "$(notinpcpath "${HOME}/.local/pkgconfig")" ] && [ "$(notinpcpath '\~/.local/pkgconfig')" ] && PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:${HOME}/.local/pkgconfig"
[ -d /lib/pkgconfig ] && [ "$(notinpcpath /lib/pkgconfig)" ] && PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:/lib/pkgconfig"
[ -d /usr/lib/pkgconfig ] && [ "$(notinpcpath /usr/lib/pkgconfig)" ] && PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:/usr/lib/pkgconfig"
[ -d /usr/lib/x86_64-linux-gnu/pkgconfig ] && [ "$(notinpcpath /usr/lib/x86_64-linux-gnu/pkgconfig)" ] && PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:/usr/lib/x86_64-linux-gnu/pkgconfig"
[ -d /usr/local/lib/pkgconfig ] && [ "$(notinpcpath /usr/local/lib/pkgconfig)" ] && PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:/usr/local/lib/pkgconfig"
[ -d /usr/local/share/pkgconfig ] && [ "$(notinpcpath /usr/local/share/pkgconfig)" ] && PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:/usr/local/share/pkgconfig"
[ -d /usr/share/pkgconfig ] && [ "$(notinpcpath /usr/share/pkgconfig)" ] && PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:/usr/share/pkgconfig"
PKG_CONFIG_PATH="$(echo "$PKG_CONFIG_PATH" | sed -E 's/^::(.+)$/\1/; s/^:(.+)$/\1/')"
export PKG_CONFIG_PATH
PKGCONFIG_PATH="$PKG_CONFIG_PATH"
export PKGCONFIG_PATH
listpath() { echo "$PATH" | awk -F ':' '{ for (i = 1; i <= NF; i++) { print "["i"]", $i; } }'; }
export -f listpath notinpath notinpcpath


# GLADE PATH ENVIRONMENT VARIABLES #


if [ -x "$(command -v glade)" ]; then
    #' Test if the pathname is in $GI_TYPELIB_PATH
    #' @param[in] $1 The path (as a string) to test
    #' @param[out] Returns `0` if true (the input was found in `$GI_TYPELIB_PATH`)
    notingipath() { (echo "$GI_TYPELIB_PATH" | grep -F -q -v "$1" && return 0) || return 1; }
    # Setup $GI_TYPELIB_PATH
    if [ -d /usr/lib/girepository-1.0 ]; then
        if [ -z "${GI_TYPELIB_PATH:-}" ]; then
            notingipath /usr/lib/girepository-1.0 && export GI_TYPELIB_PATH='/usr/lib/girepository-1.0'
        else
            notingipath /usr/lib/girepository-1.0 && export GI_TYPELIB_PATH="${GI_TYPELIB_PATH}:/usr/lib/girepository-1.0"
        fi
    fi
    if [ -d /usr/lib/x86_64-linux-gnu/girepository-1.0 ]; then
        if [ -z "${GI_TYPELIB_PATH:-}" ]; then
            notingipath /usr/lib/x86_64-linux-gnu/girepository-1.0 && export GI_TYPELIB_PATH='/usr/lib/x86_64-linux-gnu/girepository-1.0'
        else
            notingipath /usr/lib/x86_64-linux-gnu/girepository-1.0 && export GI_TYPELIB_PATH="${GI_TYPELIB_PATH}:/usr/lib/x86_64-linux-gnu/girepository-1.0"
        fi
    fi
    #' Test if the pathname is in $GLADE_CATALOG_SEARCH_PATH
    #' @param[in] $1 The path (as a string) to test
    #' @param[out] Returns `0` if true (the input was found in `$GLADE_CATALOG_SEARCH_PATH`)
    notincatalogpath() { (echo "$GLADE_CATALOG_SEARCH_PATH" | grep -F -q -v "$1" && return 0) || return 1; }
    # Setup $GLADE_CATALOG_SEARCH_PATH
    if [ -d /usr/share/glade/catalogs ]; then
        if [ -z "${GLADE_CATALOG_SEARCH_PATH:-}" ]; then
            notincatalogpath /usr/share/glade/catalogs && export GLADE_CATALOG_SEARCH_PATH='/usr/share/glade/catalogs'
        else
            notincatalogpath /usr/share/glade/catalogs && export GLADE_CATALOG_SEARCH_PATH="${GLADE_CATALOG_SEARCH_PATH}:/usr/share/glade/catalogs"
        fi
    fi
    #' Test if the pathname is in $GLADE_MODULE_SEARCH_PATH
    #' @param[in] $1 The path (as a string) to test
    #' @param[out] Returns `0` if true (the input was found in `$GLADE_MODULE_SEARCH_PATH`)
    notingmodpath() { (echo "$GLADE_MODULE_SEARCH_PATH" | grep -F -q -v "$1" && return 0) || return 1; }
    # Setup $GLADE_MODULE_SEARCH_PATH
    if [ -d /usr/lib/glade/modules ]; then
        if [ -z "${GLADE_MODULE_SEARCH_PATH:-}" ]; then
            notingmodpath /usr/lib/glade/modules && export GLADE_MODULE_SEARCH_PATH='/usr/lib/glade/modules'
        else
            notingmodpath /usr/lib/glade/modules && export GLADE_MODULE_SEARCH_PATH="${GLADE_MODULE_SEARCH_PATH}:/usr/lib/glade/modules"
        fi
    fi
    if [ -d /usr/lib/x86_64-linux-gnu/glade/modules ]; then
        if [ -z "${GLADE_MODULE_SEARCH_PATH:-}" ]; then
            notingmodpath /usr/lib/x86_64-linux-gnu/glade/modules && export GLADE_MODULE_SEARCH_PATH='/usr/lib/x86_64-linux-gnu/glade/modules'
        else
            notingmodpath /usr/lib/x86_64-linux-gnu/glade/modules && export GLADE_MODULE_SEARCH_PATH="${GLADE_MODULE_SEARCH_PATH}:/usr/lib/x86_64-linux-gnu/glade/modules"
        fi
    fi
fi


# CONDITIONAL TESTING FUNCTIONS #


ret2bool() { ([ -z "${$1:-}" ] && [ "$1" = 0 ] && printf 'true\n') || printf 'false\n'; }
#' Test if the file is a block-file
#' @param[in] $1 The pathname to the file (as a string) to test
#' @param[out] Returns `0` if true; Otherwise, return `0` if false
isBlockFile() { ([ -b "$1" ] && return 0) || return 1; }
isInPath() { (command -v "$1" && return 0) || return 1; }
isBuiltin() { (command -V "$1" 2> /dev/null | grep -q -w -i 'builtin') || return $?; }
isCmd() { ([ -x "$(command -v "${1}")" ] && return 0) || return 1; }
isDir() { ([ -d "$1" ] && return 0) || return 1; }
isEnvAWS() { if [ -n "${AWS_BATCH_CE_NAME:-}" ] || [ -n "${AWS_BATCH_JOB_ID:-}" ] || [ -n "${AWS_EXECUTION_ENV:-}" ] || [ -n "${LAMBDA_RUNTIME_DIR:-}" ]; then return 0; else return 1; fi; }
isFile() { ([ -f "$1" ] && return 0) || return 1; }
isFileExecutable() { ([ -x "$1" ] && return 0) || return 1; }
isFileReadable() { ([ -r "$1" ] && return 0) || return 1; }
isFileWritable() { ([ -w "$1" ] && return 0) || return 1; }
isFileOrDir() { if [ -d "$1" ] || [ -f "$1" ]; then return 0; else return 1; fi; }
isFunction() { command -V "$1" 2> /dev/null | head -1 | grep -q -w -i 'function'; return $?; }
isptmx() { tty | awk '{ if ($0~/\/dev\/ptmx.*/) { print "true" } else { print "false" } }'; }
ispts() { tty | awk '{ if ($0~/\/dev\/pts.*/) { print "true" } else { print "false" } }'; }
isSymLink() { ([ -h "$1" ] && return 0) || return 1; }
istty() { tty | awk '{ if ($0~/\/dev\/tty.*/) { print "true" } else { print "false" } }'; }
strcontains() { (echo "$2" | grep -F -q "$1" && return 0) || return 1; }
strdoesnotcontain() { (echo "$2" | grep -F -q -v "$1" && return 0) || return 1; }
export -f isBlockFile isInPath isBuiltin isDir isFile isFileExecutable isFileReadable
export -f isFileWritable isFileOrDir isFunction ispts isSymLink istty strcontains strdoesnotcontain


# GRAPHICAL INTERFACE FUNCTIONS #


if [ "${IS_TTY}" = 'false' ]; then

    if [ -x "$(command -v zenity)" ]; then
        #' @brief Open a calendar window using Zenity
        #' @param[in] $1 Specify the starting year
        #' @param[out] The entered date
        win_cal() { zenity --calendar --day=1 --height=200 --month=1 --text='' --title='Calendar' --width=800 --year="${1:-}" 2> /dev/null; }
        #' @brief Open an entry message window using Zenity
        #' @param[in] $1 Specify the message
        #' @param[in] $2 Optional parameter for specifying the window-title; The default is `Enter Input`
        #' @param[out] The entered text
        win_entry() { zenity --entry --height=200 --text="${1:-}" --title="${2:-Enter Input}" --width=800 2> /dev/null; }
        #' @brief Open an error message window using Zenity
        #' @param[in] $1 Specify the message
        win_err() { zenity --error --height=200 --text="${1:-}" --title='Error' --width=800 2> /dev/null; }
        #' @brief Open an info window using Zenity
        #' @param[in] $1 Specify the message
        win_info() { zenity --info --height=200 --text="${1:-}" --title='Information' --width=800 2> /dev/null; }
        #' @brief Open a password window using Zenity
        #' @param[in] $1 Specify the message
        #' @param[in] $2 Optional parameter for specifying the window-title; The default is `Enter Password`
        #' @param[out] The entered password
        win_pswd() { zenity --password --height=200 --text="${1:-}" --title="${2:-Enter Password}" --width=800 2> /dev/null; }
        #' @brief Open a warning message window using Zenity
        #' @param[in] $1 Specify the message
        win_warn() { zenity --height=200 --text="${1:-}" --title='Warning' --warning --width=800 2> /dev/null; }
    fi

    if [ -x "$(command -v notify-send)" ]; then
        #' @brief Show an alert notification
        #' @param[in] $1 Specify the message
        alert() { notify-send --expire-time=4000 --icon='important' --urgency='critical'; }
        #' @brief Show a message notification
        #' @param[in] $1 Specify the message
        desktopmsg() { notify-send --expire-time=4000 --icon='info' --urgency='low'; }
    fi

fi


# INTERACTIVE SHELL #


# If not running interactively, then do not do anything
if [ -z "${PS1}" ]; then
    export isinteractive='false'
    return
else
    case "$-" in
        *'i'*) export isinteractive='true';;
        *) export isinteractive='false'; return;;
    esac
fi
SHELL_IS_INTERACTIVE=1
readonly SHELL_IS_INTERACTIVE
export SHELL_IS_INTERACTIVE


# SHELL SETTINGS #


[ -n "${DEBUG:-}" ] && set -u
HISTCONTROL=erasedups:ignoreboth:ignoredups:ignorespace
export HISTSIZE=40
export HISTFILESIZE=40
if [ "$PROFILE_SHELL" = 'bash' ] && [ -n "$(command -v shopt)" ]; then
    shopt -s checkwinsize
    shopt -s extglob
    shopt -s histappend
    [ ! "$PLATFORM" = 'darwin' ] && shopt -s globstar
fi
if [ "$TERM" = 'Apple_Terminal' ]; then
    setopt combiningchars
    disable log
fi
set +o noglob || true
set +o verbose || true

# Make `less` more friendly for non-text input files
[ -n "$(command -v lesspipe)" ] && eval "$(SHELL=/bin/sh lesspipe)"


# MISCELLANEOUS FEATURES #


# Provide Apropos if Unavailable
[ -z "$(command -v apropos)" ] && alias apropos='man -k'

# Sudo Hint
if [ ! -e "${HOME}/.sudo_as_admin_successful" ] && [ ! -e "${HOME}/.hushlogin" ]; then
    case " $(groups) " in
        *' admin '*|*' sudo '*)
            printf 'To run a command as administrator (user "root"), use "sudo <command>".\nSee "man sudo_root" for details.\n'
        ;;
    esac
fi

# Use the `command-not-found` package (if installed)
if [ -x /usr/lib/command-not-found ]; then
    command_not_found_handle() { /usr/lib/command-not-found -- "$1"; return $?; }
elif [ -x /usr/lib/command-not-found ]; then
    command_not_found_handle() { /usr/share/command-not-found/command-not-found -- "$1"; return $?; }
else
    command_not_found_handle() { printf '%s: command not found\n' "$1" >&2; return 127; }
fi

#' Function used to obtain data from HTTP servers
httpget() {
    if [ -x "$(command -v curl)" ]; then
        curl -A curl -s "$@"
    elif [ -x "$(command -v fetch)" ]; then
        fetch -q "$@"
    elif [ -x "$(command -v http)" ]; then
        http -b GET "$@"
    elif [ -x "$(command -v wget)" ]; then
        wget --no-cache --no-cookies --no-dns-cache --quiet -O - "$@"
    else
        printf 'ERROR: Either curl, wget, httpie, or fetch must be installed!\n' >&2
        return 1
    fi
}


#' Return the first parameter to the power of the second parameter
pow() {
    [ "$#" -lt 2 ] && return 1
    echo "$(($1 ** $2))"
}


# COLORIZED TERMINAL #


if [ -n "${TERM:-}" ]; then
    case "$TERM" in
        [aEKx]'term'*|'gnome'*|'hurd'|'konsole'*|'linux'|'mach-'*'color'|'screen-256color'*|'xterm') color_prompt='yes';;
        'ansi'|*'color'*|'cygwin'|'interix'*|'putty'*|'rxvt'*|'wsvt'*|'X11'*) color_prompt='yes';;
        'termix'|'kitty'|'mosh'|'iterm2'|'panteon'|'tinyterm'|'mintty') color_prompt='yes';;
        *) color_prompt='no';;  # cons25, cons25-debian, dumb, mach*, pcansi, screen*, sun, vt*
    esac  # ls /lib/terminfo/*
elif [ -n "${COLORTERM:-}" ]; then
    if [ -n "$(command -v tput)" ] && tput setaf 1 2>&1 /dev/null; then
        #' Color support present; assume it is compliant with Ecma-48 (ISO/IEC-6429)
        color_prompt='yes'
    else
        color_prompt=''
    fi
fi
[ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ] && debian_chroot="$(cat /etc/debian_chroot)"
[ -z "${debian_chroot:-}" ] && [ ! -r /etc/debian_chroot ] && debian_chroot=''
PS1=''
# Enable color support for various commands
if [ -n "${color_prompt:-}" ] && [ "$color_prompt" = 'yes' ]; then
    if [ "$(id -u)" -eq 0 ]; then
        PS1='\[\033[0m\]${debian_chroot:+($debian_chroot)}\[\033[0m\]\[\033[01;32m\]\u\[\033[0m\]@\[\033[01;33m\]\h\[\033[0m\]:\[\033[01;34m\]\w\[\033[0m\]# '
    else
        PS1='\[\033[0m\]${debian_chroot:+($debian_chroot)}\[\033[0m\]\[\033[01;32m\]\u\[\033[0m\]@\[\033[01;33m\]\h\[\033[0m\]:\[\033[01;34m\]\w\[\033[0m\]\$ '
    fi
    alias grep='grep --color=auto'
    alias cgrep='grep --color=always'
    if [ -x "$(command -v egrep)" ]; then
        alias egrep='egrep --color=auto'
    else
        alias egrep='grep -E --color=auto'
    fi
    if [ -x "$(command -v fgrep)" ]; then
        alias fgrep='fgrep --color=auto'
    else
        alias fgrep='grep -F --color=auto'
    fi
    export LESS_TERMCAP_mb=$'\033[1;32m'  #' Start blinking
    export LESS_TERMCAP_md=$'\033[1;32m'  #' Start bold mode
    export LESS_TERMCAP_me=$'\033[0m'  #' End all mode
    export LESS_TERMCAP_se=$'\033[0m'  #' End standout mode
    export LESS_TERMCAP_so=$'\033[01;33m'  #' Start standout mode
    export LESS_TERMCAP_ue=$'\033[0m'  #' End underlining
    export LESS_TERMCAP_us=$'\033[1;4;31m'  #' Start underlining
else  # No color support
    if [ "$(id -u)" -eq 0 ]; then
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w# '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
fi
unset color_prompt

# Enable color support for `ls`
if [ -x "$(command -v dircolors)" ]; then
    export CLICOLOR=1
    if [ -r "${HOME}/.dircolors" ]; then
        eval "$(dircolors -b "${HOME}/.dircolors")"
    else
        eval "$(dircolors -b)"
    fi
    [ -n "$(command -v dir)" ] && alias dir='dir --color=auto'
    if [ ! "$OSFAMILY" = 'bsd' ]; then
        alias ls='ls --color=auto'
    fi
    [ -n "$(command -v vdir)" ] && alias vdir='vdir --color=auto'
fi


# PARALLEL TASKS #


runmultitask() {
    for _task in "$@"; do
        $_task &
    done
    wait > /dev/null
}


# SPECIAL GLOBALS #


if [ ! -f /etc/geoprofile_disable ]; then

    if [ -z "${AREA_CODE:-}" ]; then
        if [ -f /etc/area_code ]; then
            AREA_CODE="$(cat /etc/area_code)"
        else
            AREA_CODE="$(httpget ipinfo.io/phone)"
        fi
    fi

    if [ -z "${CITY:-}" ]; then
        if [ -f /etc/city ]; then
            CITY="$(cat /etc/city)"
        else
            CITY="$(httpget ipinfo.io/city)"
        fi
    fi

    if [ -z "${COUNTRY:-}" ]; then
        if [ -f /etc/country ]; then
            COUNTRY="$(cat /etc/country)"
        else
            COUNTRY="$(httpget ipinfo.io/country)"
        fi
    fi

    if [ -z "${ISP:-}" ]; then
        if [ -f /etc/isp ]; then
            ISP="$(cat /etc/isp)"
        else
            ISP="$(httpget ipinfo.io/org | cut -d ' ' -f 2-)"
        fi
    fi

    if [ -z "${LOCATION:-}" ]; then
        if [ -f /etc/location ]; then
            LOCATION="$(cat /etc/location)"
        else
            LOCATION="$(httpget ipinfo.io/loc)"
        fi
    fi

    if [ -z "${POSTAL:-}" ]; then
        if [ -f /etc/postal ]; then
            POSTAL="$(cat /etc/postal)"
        else
            POSTAL="$(httpget ipinfo.io/postal)"
        fi
    fi

    if [ -z "${REGION:-}" ]; then
        if [ -f /etc/region ]; then
            REGION="$(cat /etc/region)"
        else
            REGION="$(httpget ipinfo.io/region)"
        fi
    fi


    #' Print the physical location of the system
    mygeo() { printf 'Location: %s\nCountry: %s\nRegion: %s\nCity: %s\nZip Code: %s\nPhone Area Code: %s\n' "$LOCATION" "$COUNTRY" "$REGION" "$CITY" "$POSTAL" "$AREA_CODE"; }

fi


# AUTOCOMPLETE #


if [ "$PROFILE_SHELL" = 'bash' ] && [ -n "${SHELL_IS_INTERACTIVE:-}" ] && [ -n "$(command -v mapfile)" ] && [ -n "$(command -v complete)" ]; then
    # Source/Import the Bash autocompletion feature
    if [ -r /etc/bash_completion ]; then
        . /etc/bash_completion
    elif [ -r /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    fi
    # Autocomplete make targets
    if [ -n "$(command -v make)" ]; then
        _make_target_tmp() { make -p -q -s | sed '/^.+:=.*$/d; /^#.*$/d; /^\-.*$/d;' | grep -o -E '^[a-zA-Z0-9_\-]+:.*$' | cut -d ':' -f 1 | awk "/^${1}/"; }
        _make_target_autocomplete() { tmpfile="/tmp/$(rndfname).tmp"; _make_target_tmp "$2" > "$tmpfile"; mapfile -t COMPREPLY < "$tmpfile"; rm "$tmpfile"; }
        if [ -n "$(command -v _make_autocomplete)" ]; then
            complete -F _make_target_autocomplete -o nospace make
            readonly -f _make_target_autocomplete
        fi
    fi
fi


# LOAD SHELL RC MODULES #


# Load system/global shell extension modules
if [ -d /etc/shell_ext_modules ]; then
    for file in /etc/shell_ext_modules/*; do
        [ -r "${file}" ] && . "${file}"
    done
# Load shell extension modules located in the same directory as this code
elif [ ! -d /etc/shell_ext_modules ] && [ -n "${BASH_SOURCE:-}" ]; then
    curdir="$(dirname "${BASH_SOURCE[0]}")"
    for file in "${curdir}/shell_ext_modules"/*; do
        [ -r "${file}" ] && . "${file}"
    done
fi

# Load user shell extension modules
if [ -d "${HOME}/.local/shell_ext_modules" ]; then
    for file in "${HOME}/.shell_ext_modules/"*; do
        [ -r "${file}" ] && . "${file}"
    done
fi


# LOAD USER'S SHELL STARTUP FILES #


if [ -n "${HOME:-}" ]; then
    [ -r "${HOME}/.bash_aliases" ] && . "${HOME}/.bash_aliases"
    [ -r "${HOME}/.sh_aliases" ] && . "${HOME}/.sh_aliases"
    [ "$PROFILE_SHELL" = 'bash' ] && [ -r "${HOME}/.bashrc" ] && . "${HOME}/.bashrc"
fi
