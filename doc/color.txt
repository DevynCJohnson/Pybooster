Help on module color:

NAME
    color

DESCRIPTION
    @brief Color Manipulations
    @file color.py
    @package pybooster.color
    @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
    @copyright LGPLv3
    @version 2016.03.25
    
    @section LICENSE
    GNU Lesser General Public License v3
    Copyright (c) Devyn Collier Johnson, All rights reserved.
    
    The PyBooster Library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3.0 of the License, or (at your option) any later version.
    
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public
    License along with this library.

FUNCTIONS
    cmy2cmyk(_cyan:float, _magenta:float, _yellow:float) -> tuple
        CMY -> CMYK
    
    cmy2rgb(_c:float, _m:float, _y:float, _out_float:bool=True) -> tuple
        CMY -> RGB
    
    cmyk2cmy(_cyan:float, _magenta:float, _yellow:float, _black:float) -> tuple
        CMYK -> CMY
    
    cmyk2rgb(_cyan:float, _magenta:float, _yellow:float, _black:float) -> tuple
        CMYK -> RGB
    
    cmyk2rgbbyte(_cyan:float, _magenta:float, _yellow:float, _black:float) -> tuple
        CMYK -> RGB byte-array
    
    getvalue(m1:float, m2:float, hue:float) -> float
        Get value from hue
    
    hls2hsv(hue:float, light:float, sat:float) -> tuple
        HLS -> HSV
    
    hls2rgb(h:float, l:float, s:float) -> tuple
        HLS -> RGB
    
    hsi2rgb(_hue:float, _sat:float, _intensity:float) -> tuple
        HSI -> RGB
    
    hsi2rgbbyte(_hue:float, _sat:float, _intensity:float) -> tuple
        HSI -> RGB byte array
    
    hsv2hls(_hue:float, _sat:float, _value:float) -> tuple
        HSV -> HLS
    
    hsv2rgb(h:float, s:float, v:float) -> tuple
        HSV -> RGB
    
    html2hex(_html:str) -> tuple
        HTML notation -> hex notation
    
    html2rgb(_html:str) -> tuple
        HTML notation (#f6a797) -> RGB (byte array - 0-255)
    
    huedegree2huefloat(_hue:int) -> float
        Hue in degrees -> Hue as a float
    
    huefloat2huedegree(_hue:float) -> int
        Hue as a float -> Hue in degrees
    
    hunterlab2xyz(_hl:float, _ha:float, _hb:float) -> tuple
        Hunter Lab -> XYZ
    
    rgb2cmy(_red, _green, _blue, _float:bool=True) -> tuple
        RGB -> CMY
    
    rgb2cmyk(r:float, g:float, b:float) -> tuple
        RGB -> CMYK
    
    rgb2hex(r:float, g:float, b:float) -> tuple
        RGB (byte array - 0-255) -> hex notation
    
    rgb2hls(r:float, g:float, b:float) -> tuple
        RGB -> HLS
    
    rgb2hsi(_red:float, _green:float, _blue:float) -> tuple
        RGB -> HSI
    
    rgb2hsv(_red:float, _green:float, _blue:float) -> tuple
        RGB -> HSV
    
    rgb2html(_red:float, _green:float, _blue:float) -> str
        RGB -> HTML notation
    
    rgb2rgba(_red:float, _green:float, _blue:float, _bytearray:bool=False) -> tuple
        RGB -> RGBA
    
    rgb2rgbf(_red:float, _green:float, _blue:float) -> tuple
        RGB Integer -> RGB Float
    
    rgb2xyz(_red:float, _green:float, _blue:float, _float:bool=True) -> tuple
        RGB -> XYZ
    
    rgb2yiq(_red:float, _green:float, _blue:float) -> tuple
        RGB -> YIQ
    
    rgba2rgb(_red:float, _green:float, _blue:float) -> tuple
        RGBA -> RGB
    
    rgbf2rgb(_red:float, _green:float, _blue:float) -> tuple
        RGB Float -> RGB Integer
    
    roundrgb(_r:float, _g:float, _b:float) -> tuple
        Round RGB float-points (like 245.649915) to integer (246)
    
    shorthand2sixdigit(_shorthand:str) -> str
        Shorthand HTML notation (#789) -> 6-digit HTML notation (#778899)
    
    xyz2hunterlab(_x:float, _y:float, _z:float) -> tuple
        XYZ -> Hunter Lab
    
    xyz2rgb(_x:float, _y:float, _z:float) -> tuple
        XYZ -> RGB
    
    xyz2rgb_int(_x:float, _y:float, _z:float) -> tuple
        XYZ -> RGB as an integer
    
    yiq2rgb(_y:float, _i:float, _q:float) -> tuple
        YIQ -> RGB

DATA
    __all__ = ['cmy2cmyk', 'cmy2rgb', 'cmyk2cmy', 'cmyk2rgb', 'cmyk2rgbbyt...

FILE
    /media/collier/PROGRAMMING/PROJECTS/PyBooster/pybooster/color.py


