Help on module strtools:

NAME
    strtools

DESCRIPTION
    @brief Functions for various string and character manipulations
    @file strtools.py
    @package pybooster.strtools
    @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
    @copyright LGPLv3
    @version 2016.03.25
    
    @section DESCRIPTION
    This library contains
     - Constants for various characters and character ranges
     - Functions for various string and character manipulations
     - Ascii, Hex (\x*), UTF-8 (\u*), UTF-16BE/UTF-32 (\U*), HTML-Entities (&#*;)
    
    C-escapes = JS-escapes = HTML-named-ref = decimal ncr = hex ncr
    
    '\U0001d4c3' = '\ud835\udcc3' = &nscr; =  &#120003; =  &#x1D4C3;
    
    '\U0001d4a9' = '\ud835\udca9' = &Nscr; = &#119977; = &#x1D4A9;
    
    
    unicode+hex = 0x notation = css = utf16 = utf8 = uri%
    
    U+1D4C3 = 0x1D4C3 = D4C3 = D835 DCC3 = F0 9D 93 83 = %F0%9D%93%83
    
    U+1D4A9 = 0x1D4A9 = D4A9 = D835 DCA9 = F0 9D 92 A9 = %F0%9D%92%A9
    
    
    @section VARIABLES
     - _refnum: stores an HTML reference number as a string (&#38;)
     - _refname: stores an HTML name entity as a string (&amp;)
     - _name: stores an unicode character name
     - _char: stores a single character or an escape sequence (\x26)
     - _str: stores a string/text
     - _int: stores an integer
     - _hex: stores a hex sequence as an integer, str, or escape sequence
     - _oct: stores an octal sequence as an integer, str, or escape sequence
     - _bin: stores a binary sequence as an integer, str, or escape sequence
     - _bytes: stores a bytes-type object
     - _dict: specify a dictionary
     - _search: a value to find
     - _assert: indicate that some condition be met
     - _numbase: specify the base of the number ('2'=binary; '16'=hex; etc.)
     - _escape: boolean; "True" (the default) makes a function escape the output
     - _endian: specify endian (little/big); default is the native value
     - _encoding: specify encoding; the default value is "utf8"
    
    @section LICENSE
    GNU Lesser General Public License v3
    Copyright (c) Devyn Collier Johnson, All rights reserved.
    
    The PyBooster Library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3.0 of the License, or (at your option) any later version.
    
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public
    License along with this library.

FUNCTIONS
    binint2char(_bin:int, _escape:bool=True) -> str
        Convert an binary integer to a character
        
        binint2char(0b100110) => \U00000026
        binint2char(0b100110, False) => &
    
    binstr2char(_bin:str, _escape:bool=True) -> str
        Convert a binary number (as a string) to a character
        
        binstr2char('0b100110') => \U00000026
        binstr2char(0b100110) => \U00000026
        binstr2char('100110', False) => &
    
    bubble2text(_str:str) -> str
        Convert bubble text to a plain-text string
        
        >>> bubble2text('Ⓣⓗⓘⓢ ⓘⓢ ⓐ ⓣⓔⓢⓣ.⃝')
        'This is a test.'
        >>> bubble2text('Ⓣⓗⓘⓢ ⓘⓢ ⓐ ⓢⓔⓒⓞⓝⓓ (⃝ ②ⓝⓓ)⃝  ⓣⓔⓢⓣ.⃝ ')
        'This is a second (2nd) test.'
        >>> bubble2text('Ⓣⓔⓢⓣⓘⓝⓖ ⓥⓐⓡⓘⓞⓤⓢ ⓒⓗⓐⓡⓐⓒⓣⓔⓡⓢ:⃝  €⃝ ,⃝  *⃝ ,⃝  Ω⃝ ,⃝  ᾲ⃝ ,⃝  ⓐⓝⓓ ⛽⃝ .⃝ ')
        'Testing various characters: €, *, Ω, ᾲ, and ⛽.'
    
    bytes2str(_bytes:bytes, _encoding:str='utf8') -> str
        Convert bytes to strings
    
    cap(_str:str) -> str
        Capitalize the beginning of each word
        
        >>> cap('this is a test.')
        'This Is A Test.'
    
    char2hexstr(_char:str) -> str
        Convert a character(s) to hex-numbers as a str
    
    char2int(_char:str) -> int
        Convert a character to an integer
    
    char2intstr(_char:str) -> int
        Convert a character(s) to decimal integers as a str
    
    char2noeschex(_char:str) -> str
        Convert a character to a hex string lacking divisions or escapes
        
        >>> char2noeschex('&')
        '26'
    
    endletters(_str:str) -> str
        Keep the first and last letter of a single word
        
        >>> endletters('Test')
        'Tt'
    
    escape(_str)
        Escape special characters that cause syntax errors
        
        >>> escape('String with "special" characters')
        'String with &#34;special&#34; characters'
    
    expandhexescape(_hex:str) -> str
        Convert a 16-bit hex escape to a 32-bit hex escape (\\uhhhh) => (\\Uhhhhhhhh)
        
        >>> expandhexescape('\\u202f')
        '\\U0000202f'
    
    explode(_str:str) -> str
        Insert a space between each character
        
        >>> explode('this is a test.')
        ' t h i s   i s   a   t e s t . '
    
    findescapes(_str:str) -> list
        Find character hex escapes in a string
        
        Return a list of the escapes
        Return an empty list if none are found
        
        >>> findescapes('This is a \\u202f test.')
        ['\\u202f', [...]]
    
    firstletters(_str:str) -> str
        Remove the last letter of a single word
        
        >>> firstletters('Test')
        'Tes'
    
    formal(_str:str) -> str
        Change the capitalization to the format used in titles
        
        >>> formal('this is a test.')
        'This Is A Test.'
    
    fval(_dict:dict, _search) -> str
        Search a dictionary by value and stop on first instance
        
        This searches key values that are tuples, lists, or strings.
        Returns the key (if found); else returns empty string
    
    fvalhtml(_search:str, _type:str) -> str
        Search a dict by value to find the paired value; Stop on first instance
        
        For example, this finds '&#38;' or '&amp;' and returns the other value
        Returns HTML entity if found; else return empty string
    
    hasbraille(_str:str) -> bool
        Does this string contain Braille characters
        
        >>> hasbraille('ἀἁ⠀⠁⠂⠃δεζ')
        True
        >>> hasbraille('qwerty⠀⠁⠂⠃ἀαβγζ')
        True
        >>> hasbraille('0123ἀβ⠀⠁⠂⠃εζ')
        True
        >>> hasbraille('qwerty')
        False
        >>> hasbraille('0123')
        False
    
    hasgreek(_str:str) -> bool
        Does this string contain Greek letters
        
        >>> hasgreek('ἀἁἂαβγδεζ')
        True
        >>> hasgreek('qwerty')
        False
        >>> hasgreek('0123')
        False
        >>> hasgreek('qwertyἀἁἂαβγδεζ')
        True
        >>> hasgreek('0123ἀἁἂαβγδεζ')
        True
    
    hashexescape(_str:str) -> bool
        Test if the string contains a character hex escape
    
    hex2cssnot(_hex:str) -> str
        Convert hexadecimal to CSS Notation (D4C3)
    
    hex2unicodehex(_hex:str) -> str
        Convert hexadecimal to Unicode+Hex Notation
    
    hexint2char(_hex:int, _escape:bool=True) -> str
        Convert a hex integer to a character
        
        hexint2char(0x26) => \U00000026
        hexint2char(0x26, False) => &
    
    hexncr2char(_refname:str) -> str
        Wrapper for refnum2char()
    
    hexstr2bytearray(_hex:str) -> bytearray
        Convert a hex string to a bytearray
    
    hexstr2char(_hex:str, _escape:bool=True) -> str
        Convert a hex number (as a string) to a character
        
        hexstr2char('0x26') => \U00000026
        hexstr2char(0x26) => \U00000026
        hexstr2char('26', False) => &
    
    htmlentities(_data:str) -> str
        Replace HTML Reference Entities with characters
        
        >>> htmlentities('This &apos;is&apos; a test (&pi;, &dollar;, &#98;).')
        "This 'is' a test (π, $, b)."
    
    htmlescape(_str:str, quote:bool=True)
        Replace special characters "&", "<", and ">" to HTML-escapes
        
        If the optional flag quote is true (default), double quote (") and
        single quote (') characters are also escaped.
        
        >>> htmlescape('This <b>is</b> a "test" (&).')
        'This &lt;b&gt;is&lt;/b&gt; a &quot;test&quot; (&amp;).'
        >>> htmlescape('This <b>is</b> a "test" (&).', False)
        'This &lt;b&gt;is&lt;/b&gt; a "test" (&amp;).'
    
    htmlunescape(_str:str)
        Unescape &, ', ", <, and >
        
        >>> htmlunescape('This &#x3c;b&#62;is&lt;/b&gt; a &#34;test&quot; (&amp;).')
        'This <b>is</b> a "test" (&).'
        >>> htmlunescape('This &lt;b&gt;is&lt;/b&gt; a &quot;test&quot; (&amp;).')
        'This <b>is</b> a "test" (&).'
    
    implode(_str:str) -> str
        Remove a space from between each character
        
        >>> implode('this is a test.')
        'thisisatest.'
        >>> implode(' t h i s   i s   a   t e s t . ')
        'this is a test.'
    
    insert_character(_str:str, _char:str, index:int) -> str
        Insert a character at the specified point of a string
    
    int2char(_int, _numbase:str='10', _escape:bool=True) -> str
        Convert an integer (as a str or int type) to a character
        
        The integer may be decimal, hex, octal, or binary
        By default, the returned value is escaped unicode (\U0000000)
        int2char(_int, _numbase, _escape) => str
        _int - number to convert to a character
        _numbase - Specify the int's base (2, 8, 10, 16)
        _escape - False = No escapes; True = Escapes
        int2char(38) => \U00000026
        int2char('38') => \U00000026
        int2char('0x26') => \U00000026
        int2char(0x26) => \U00000026
        int2char('26', '16') => \U00000026
        int2char('26', '16', False) => &
    
    int2hexbytes(_int:int, _length:int=2, _endian:str='little', _signed:bool=False) -> str
        Convert int to bytes represented as an escaped hex string
        If byteorder is "big", the most significant byte is at the beginning of the byte array.
        If byteorder is "little", the most significant byte is at the end of the byte array.
    
    int2ncr(_int:int) -> str
        Wrapper for int2refnum()
    
    int2refnum(_int:int) -> str
        Convert an integer to Decimal-NCR/HTML-Entity (&#38;)
    
    int2utf16(_int:int, _endian:str='little') -> str
        Convert an integer to a character
    
    int2utf32(_int:int, _endian:str='little') -> str
        Convert an integer to a character
    
    isascii(_str:str) -> bool
        Test if a character is within the Ascii limit
        
        >>> isascii('B')
        True
        >>> isascii('b')
        True
        >>> isascii('1')
        True
        >>> isascii('€')
        False
        >>> isascii('ἀ')
        False
        >>> isascii('€')
        False
    
    isbraille(_str:str) -> bool
        Test if the character is a Braille character
        
        >>> isbraille('⠀')
        True
        >>> isbraille('⠃')
        True
        >>> isbraille('q')
        False
        >>> isbraille('0')
        False
    
    isctrlascii(_str:str) -> bool
        Test if a character is within the Control Ascii limit
        
        >>> isctrlascii('\r')
        True
        >>> isctrlascii('\n')
        True
        >>> isctrlascii('\a')
        True
        >>> isctrlascii('\0')
        True
        >>> isctrlascii('ἀ')
        False
        >>> isctrlascii('€')
        False
    
    isextascii(_str:str) -> bool
        Test if a character is within the Extended Ascii limit
    
    isgreek(_str:str) -> bool
        Test if the character is a Greek letter
        
        >>> isgreek('Γ')
        True
        >>> isgreek('Α')
        True
        >>> isgreek('ᾁ')
        True
        >>> isgreek('ὴ')
        True
        >>> isgreek('q')
        False
        >>> isgreek('0')
        False
    
    isprntascii(_str:str) -> bool
        Test if a character is within the Printable Ascii limit
        
        >>> isprntascii('1')
        True
        >>> isprntascii('q')
        True
        >>> isprntascii('€')
        False
    
    isstrascii(_str:str) -> bool
        Test if a string is within the Ascii limit
        
        >>> isstrascii('B')
        True
        >>> isstrascii('b')
        True
        >>> isstrascii('123')
        True
        >>> isstrascii('qwerty')
        True
        >>> isstrascii('ἀ')
        False
        >>> isstrascii('€')
        False
        >>> isstrascii('123ἀqwerty')
        False
    
    isstrbraille(_str:str) -> bool
        Is this a string of Braille characters
        
        >>> isstrbraille('⠀⠁⠂⠃')
        True
        >>> isstrbraille('⠀')
        True
        >>> isstrbraille('qwerty')
        False
        >>> isstrbraille('0123')
        False
        >>> isstrbraille('qwerty⠀⠁⠂⠃ᾂὴ')
        False
        >>> isstrbraille('0123ΓὟᾬ⠀⠁⠂⠃')
        False
    
    isstrctrlascii(_str:str) -> bool
        Test if a string is within the Control Ascii limit
        
        >>> isstrctrlascii('\r')
        True
        >>> isstrctrlascii('\a')
        True
        >>> isstrctrlascii('\a\0')
        True
        >>> isstrctrlascii('qwerty\n')
        False
        >>> isstrctrlascii('ἀ')
        False
        >>> isstrctrlascii('qwerty')
        False
        >>> isstrctrlascii('€')
        False
    
    isstrextascii(_str:str) -> bool
        Test if a string is within the Extended Ascii limit
    
    isstrgreek(_str:str) -> bool
        Is this a string of Greek letters
        
        >>> isstrgreek('ΓὟᾬἄαξχΦᾁᾂὴ')
        True
        >>> isstrgreek('Γ')
        True
        >>> isstrgreek('Α')
        True
        >>> isstrgreek('αξχΦᾁᾂὴ')
        True
        >>> isstrgreek('qwerty')
        False
        >>> isstrgreek('0123')
        False
        >>> isstrgreek('qwertyΓὟᾬἄαξχΦᾁᾂὴ')
        False
        >>> isstrgreek('0123ΓὟᾬἄαξχΦᾁᾂὴ')
        False
    
    isstrprntascii(_str:str) -> bool
        Test if a string is within the Printable Ascii limit
        
        >>> isstrprntascii('1')
        True
        >>> isstrprntascii('123')
        True
        >>> isstrprntascii('qwerty')
        True
        >>> isstrprntascii('€')
        False
        >>> isstrprntascii('€qwerty')
        False
    
    isunicode(_str:str) -> bool
        Test if a string is within the Unicode limit
    
    isutf16(_str:str) -> bool
        Test if a string is within the UTF16 limit
    
    isutf8(_str:str) -> bool
        Test if a string is within the UTF8 limit
        
        >>> isutf8('a')
        True
        >>> isutf8('ἀ')
        True
    
    lastletters(_str:str) -> str
        Remove the first letter of a single word
        
        >>> lastletters('Test')
        'est'
    
    lowercase(_str:str) -> str
        Turn a string in lowercase
        
        >>> lowercase('THIS IS A TEST.')
        'this is a test.'
    
    middleletters(_str:str) -> str
        Remove the first and last letter of a single word
        
        >>> middleletters('Test')
        'es'
    
    name2char(_name:str) -> str
        Convert a Unicode name to a character
        
        If the name is invalid, an empty string is returned
    
    ncr2char(_refname:str) -> str
        Wrapper for refnum2char()
    
    ncr2int(_refnum:str) -> int
        Decorator for refnum2int()
    
    ncr2refname(_refnum:str) -> str
        Wrapper for refnum2refname()
    
    noescape(_hex:str) -> str
        Remove escapes from a single character hex string (\U00000026, \u0026, \x26)
    
    noescutf8hex(_hex:str) -> str
        Remove escapes from UTF-8 hex strings (\\x26)
        
        >>> noescutf8hex('\\x26')
        '&'
    
    num2ordinal(_str:str) -> str
        Convert numbers to ordinals
        
        >>> num2ordinal('21')
        'twenty-first'
    
    octint2char(_oct:int, _escape:bool=True) -> str
        Convert an octal integer to a character
        
        octint2char(0o46) => \U00000026
        octint2char(0o46, False) => &
    
    octstr2char(_oct:str, _escape:bool=True) -> str
        Convert an octal number (as a string) to a character
        
        octstr2char('0o46') => \U00000026
        octstr2char(0o46) => \U00000026
        octstr2char('46', False) => &
    
    ordinal2num(_str:str) -> str
        Convert ordinals to numbers
        
        >>> ordinal2num('twenty-first')
        '21'
    
    presentlist(_list:list) -> str
        Convert a list to a string without the brackets and quotes
    
    refname2char(_refname:str, _escape:bool=True) -> str
        Convert HTML entity name (&amp;) to character (&)
    
    refname2ncr(_refname:str) -> str
        Alias for refname2refnum()
    
    refname2refnum(_refname:str)
        Convert HTML entity name (&amp;) to Decimal-NCR/HTML-Entity (&#38;)
    
    refnum2char(_refnum:str, _escape:bool=True) -> str
        Convert HTML entity number (&#38; or &#x26;) to character (&)
    
    refnum2int(_refnum:str) -> int
        Convert Decimal-NCR/HTML-Entity (&#38;) to an integer
    
    refnum2refname(_refnum:str) -> str
        Convert Decimal-NCR/HTML-Entity (&#38;) to HTML entity name (&amp;)
    
    replacecurlycommas(_str:str) -> str
        Replace curly commas with a regular comma (፣ ، 、 ، ◌̦ ︐ ︑ ꛵ ᠂ ‍̓ )
        
        >>> replacecurlycommas('This is، a test.')
        'This is, a test.'
    
    replacecurlyquotes(_str:str) -> str
        Replace curly quotes with straight-quotes (“ ” ‘ ’ ” ′ ″ ‴ ″)
        
        >>> replacecurlyquotes('This is a “test”.')
        'This is a "test".'
    
    rmbyteshexesc(_str:bytes) -> str
        Remove hex escapes (b'\x80abc' => abc) from byte strings; return str
        
        >>> rmbyteshexesc(b'\x80abc')
        'abc'
    
    rmcurlycommas(_str:str) -> str
        Remove curly commas (፣ ، 、 ، ◌̦ ︐ ︑ ꛵ ᠂ ‍̓ )
        
        >>> rmcurlycommas('This is، a test.')
        'This is a test.'
    
    rmcurlyquotes(_str:str) -> str
        Remove curly quotes (“ ” ‘ ’ ” ′ ″ ‴ ″)
        
        >>> rmcurlyquotes('This is a “test”.')
        'This is a test.'
    
    rmpunct(_str:str) -> str
        Remove end-of-sentence punctuation
        
        >>> rmpunct('this is a test.')
        'this is a test'
        >>> rmpunct('‽word¿ text.')
        'word text'
    
    rplbyteshexesc(_str:bytes) -> str
        Replace hex escapes (b'\x26abc' => &abc) in byte strings; return str
        
        >>> rplbyteshexesc(b'\x26abc')
        '&abc'
    
    sentence(_str:str) -> str
        Capitalization the beginning of each sentence
        
        >>> sentence('this IS A TEST.')
        'This is a test.'
    
    shrink_esc_utf16to8(_hex:str) -> str
        Shrink a 16-bit hex escape to a 8-bit hex escape (\\uhhhh) => (\\xhh)
        
        >>> shrink_esc_utf16to8('\\u002f')
        '\\x2f'
    
    shrink_esc_utf32to16(_hex:str) -> str
        Shrink a 32-bit hex escape to a 16-bit hex escape (\\Uhhhhhhhh) => (\\uhhhh)
        
        >>> shrink_esc_utf32to16('\\U0000002f')
        '\\u002f'
    
    shrink_esc_utf32to8(_hex:str) -> str
        Shrink a 32-bit hex escape to a 8-bit hex escape (\\Uhhhhhhhh) => (\\xhh)
        
        >>> shrink_esc_utf32to8('\\U0000002f')
        '\\x2f'
    
    splitsentencesstr(_str_of_sentences:str) -> list
        Split a string by sentence
    
    sqlstr(_obj, _strength:int=0) -> str
        Convert an object to a string and format the string to protect against SQL-Injection Attacks
        
        _strength indicates what characters should be removed or escaped
        0 = (Default) Remove curly quotes, commas, and brackets; escape quotes, slashes, and dashes
        1 = Same as 0, but removes characters instead of escaping
        2 = Same as 1, but remove additional characters such as .?!#;&%^:
        3 = Only keep ASCII letters and space
    
    square2text(_str:str) -> str
        Convert square text to a plain-text string
        
        >>> square2text('T⃞ h⃞ i⃞ s⃞  ⃞ (⃞ s⃞ t⃞ r⃞ )⃞  ⃞ i⃞ s⃞  ⃞ a⃞  ⃞ s⃞ a⃞ m⃞ p⃞ l⃞ e⃞  ⃞ t⃞ e⃞ s⃞ t⃞ .⃞ ')
        'This (str) is a sample test.'
        >>> square2text('T⃞ h⃞ i⃞ s⃞   (⃞ s⃞ t⃞ r⃞ )⃞   i⃞ s⃞   a⃞   s⃞ a⃞ m⃞ p⃞ l⃞ e⃞   t⃞ e⃞ s⃞ t⃞ .⃞ ')
        'This (str) is a sample test.'
        >>> square2text('T⃞ e⃞ s⃞ t⃞ i⃞ n⃞ g⃞   v⃞ a⃞ r⃞ i⃞ o⃞ u⃞ s⃞   c⃞ h⃞ a⃞ r⃞ a⃞ c⃞ t⃞ e⃞ r⃞ s⃞ :⃞   €⃞ ,⃞   *⃞ ,⃞   Ω⃞ ,⃞   ᾲ⃞ ,⃞   a⃞ n⃞ d⃞   ⛽⃞ .⃞ ')
        'Testing various characters: €, *, Ω, ᾲ, and ⛽.'
    
    str2bytes(_str:str, _encoding:str='utf8') -> bytes
        Convert strings to bytes
    
    str2hexcolon(_str:str) -> str
        Convert a string to a hex string divided into pairs by colons
        
        >>> str2hexcolon('This is a test.')
        '54:68:69:73:20:69:73:20:61:20:74:65:73:74:2e'
    
    str2noeschex(_char:str) -> str
        Convert a string to a hex string lacking divisions or escapes
        
        >>> str2noeschex('This is a test.')
        '54686973206973206120746573742e'
    
    testref(_data:str) -> bool
        Test if the string contains a character reference
    
    text2bubble(_str:str) -> str
        Convert a plain-text string to bubble text
        
        >>> text2bubble('This (str) is a sample test.')
        'Ⓣⓗⓘⓢ (⃝ ⓢⓣⓡ)⃝  ⓘⓢ ⓐ ⓢⓐⓜⓟⓛⓔ ⓣⓔⓢⓣ.⃝ '
        >>> text2bubble('Testing various characters: €, *, Ω, ᾲ, and ⛽.')
        'Ⓣⓔⓢⓣⓘⓝⓖ ⓥⓐⓡⓘⓞⓤⓢ ⓒⓗⓐⓡⓐⓒⓣⓔⓡⓢ:⃝  €⃝ ,⃝  *⃝ ,⃝  Ω⃝ ,⃝  ᾲ⃝ ,⃝  ⓐⓝⓓ ⛽⃝ .⃝ '
    
    text2square(_str:str, square_spaces:bool=False) -> str
        Convert a plain-text string to square text
        
        >>> text2square('This (str) is a sample test.', True)
        'T⃞ h⃞ i⃞ s⃞  ⃞ (⃞ s⃞ t⃞ r⃞ )⃞  ⃞ i⃞ s⃞  ⃞ a⃞  ⃞ s⃞ a⃞ m⃞ p⃞ l⃞ e⃞  ⃞ t⃞ e⃞ s⃞ t⃞ .⃞ '
        >>> text2square('This (str) is a sample test.')
        'T⃞ h⃞ i⃞ s⃞   (⃞ s⃞ t⃞ r⃞ )⃞   i⃞ s⃞   a⃞   s⃞ a⃞ m⃞ p⃞ l⃞ e⃞   t⃞ e⃞ s⃞ t⃞ .⃞ '
        >>> text2square('Testing various characters: €, *, Ω, ᾲ, and ⛽.')
        'T⃞ e⃞ s⃞ t⃞ i⃞ n⃞ g⃞   v⃞ a⃞ r⃞ i⃞ o⃞ u⃞ s⃞   c⃞ h⃞ a⃞ r⃞ a⃞ c⃞ t⃞ e⃞ r⃞ s⃞ :⃞   €⃞ ,⃞   *⃞ ,⃞   Ω⃞ ,⃞   ᾲ⃞ ,⃞   a⃞ n⃞ d⃞   ⛽⃞ .⃞ '
    
    togglecase(_str:str) -> str
        Convert uppercase to lowercase and vice versa
        
        >>> togglecase('this IS A TEST.')
        'THIS is a test.'
    
    unescape(_str)
        Unescape special characters that cause syntax errors
        
        >>> unescape('String with &#34;special&#34; characters')
        'String with "special" characters'
    
    uppercase(_str:str) -> str
        Turn a string in all caps
        
        >>> uppercase('this is a test.')
        'THIS IS A TEST.'
    
    utf16len(_str:str) -> int
        Get the UTF16 byte-size of a string
    
    utf32len(_str:str) -> int
        Get the UTF32 byte-size of a string
    
    utf7len(_str:str) -> int
        Get the UTF7 byte-size of a string
    
    utf8convchar2hexescape(_char:str) -> str
        Convert a character to a UTF-8 hex string (\xc3\x9e)
    
    utf8convchar2hexstr(_char:str) -> str
        Convert a character to a hex string (0xc30x9e)
    
    utf8convchar2intstr(_char:str) -> int
        Convert a character to an integer string (& => 38)
    
    utf8convchar2uri(_char:str) -> str
        Convert a character to an URI escaped hex sequence (%c3%9e)
    
    utf8len(_str:str) -> int
        Get the UTF8 byte-size of a string

DATA
    AIRPLANE = '✈'
    ARROWS = ('←', '↑', '→', '↓', '↔', '↕', '↖', '↗', '↘', '↙', '↜', '↝', ...
    ASTROLOGY = ('☉', '☽', '☿', '♀', '♁', '♂', '⚳', '♃', '♄', '♅', '⛢', '♆...
    BIOHAZARD = '☣'
    BRAILLE = ('⠀', '⠁', '⠂', '⠃', '⠄', '⠅', '⠆', '⠇', '⠈', '⠉', '⠊', '⠋',...
    BUBBLE = '⃝'
    BUBBLE_TEXT = 'ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ ⓪①...
    CARDS = ('♠', '♡', '♢', '♣', '♤', '♥', '♦', '♧')
    CARDS_10 = ('🂪', '🂺', '🃊', '🃚')
    CARDS_2 = ('🂢', '🂲', '🃂', '🃒')
    CARDS_3 = ('🂣', '🂳', '🃃', '🃓')
    CARDS_4 = ('🂤', '🂴', '🃄', '🃔')
    CARDS_5 = ('🂥', '🂵', '🃅', '🃕')
    CARDS_6 = ('🂦', '🂶', '🃆', '🃖')
    CARDS_7 = ('🂧', '🂷', '🃇', '🃗')
    CARDS_8 = ('🂨', '🂸', '🃈', '🃘')
    CARDS_9 = ('🂩', '🂹', '🃉', '🃙')
    CARDS_ACE = ('🂡', '🂱', '🃁', '🃑')
    CARDS_CHEVALIER = ('🂬', '🂼', '🃌', '🃜')
    CARDS_JACK = ('🂫', '🂻', '🃋', '🃛')
    CARDS_JOKER = ('🃏', '🃟')
    CARDS_KING = ('🂮', '🂾', '🃎', '🃞')
    CARDS_QUEEN = ('🂭', '🂽', '🃍', '🃝')
    CARD_REVERSE = '🂠'
    CHAR_REF = regex.Regex('&#(?:[0-9]+|[Xx][0-9A-Fa-f]+);', flags=regex.V...
    CHAR_REF2 = regex.Regex('&(#[0-9]+;?|#[xX][0-9a-fA-F]+;?|[^\\t\\n\\f <...
    CHESS = ('♔', '♕', '♖', '♗', '♘', '♙', '♚', '♛', '♜', '♝', '♞', '♟')
    CHESS_BLACK = ('♚', '♛', '♜', '♝', '♞', '♟')
    CHESS_WHITE = ('♔', '♕', '♖', '♗', '♘', '♙')
    CODES = {'\t': ('&#9;', '&Tab;'), '\n': ('&#10;', '&NewLine;'), ' ': '...
    CONTROL_SYM = ('␀', '␁', '␂', '␃', '␄', '␅', '␆', '␇', '␈', '␉', '␊', ...
    CONTROL_SYM_NAME = {'ACK': '␆', 'BEL': '␇', 'BS': '␈', 'CAN': '␘', 'CR...
    CURRENCY = ('¤', '₳', '฿', '₵', '¢', '₡', '₢', '$', '₫', '₯', '₠', '€'...
    CYRILLIC_ALPHABET = ('А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И',...
    DICE = ('⚀', '⚁', '⚂', '⚃', '⚄', '⚅')
    DOWN = '↓'
    EJECT = '⏏'
    END_PUNCT = ('…', '¿', '¡', '‽', '⸮')
    ENTITY_REF = regex.Regex('&[0-9A-Za-z]+;', flags=regex.V0)
    ESCTAB = {'"': '&#34;', "'": '&#39;', '(': '&#40;', ')': '&#41;', '[':...
    FACES = ('😁', '😂', '😃', '😄', '😅', '😆', '😇', '😈', '😉', '😊', '😋', '😌', '...
    FUEL_PUMP = '⛽'
    GREEK = ('Α', 'Β', 'Γ', 'Δ', 'Ε', 'Ζ', 'Η', 'Θ', 'Ι', 'Κ', 'Λ', 'Μ', '...
    GREEK_ACCENT = ('Ἀ', 'Ἁ', 'Ἂ', 'Ἃ', 'Ἄ', 'Ἅ', 'Ἆ', 'Ἇ', 'ᾈ', 'ᾉ', 'ᾊ',...
    GREEK_ACCENT_LOWER = ('ἀ', 'ἁ', 'ἂ', 'ἃ', 'ἄ', 'ἅ', 'ἆ', 'ἇ', 'ὰ', 'ά'...
    GREEK_ACCENT_UPPER = ('Ἀ', 'Ἁ', 'Ἂ', 'Ἃ', 'Ἄ', 'Ἅ', 'Ἆ', 'Ἇ', 'ᾈ', 'ᾉ'...
    GREEK_ALL = ('Α', 'Β', 'Γ', 'Δ', 'Ε', 'Ζ', 'Η', 'Θ', 'Ι', 'Κ', 'Λ', 'Μ...
    GREEK_ARCHAIC = ('Ϝ', 'Ϛ', 'Ϟ', 'Ϙ', 'Ϡ', 'ϝ', 'ϛ', 'ϟ', 'ϙ', 'ϡ', 'ϳ'...
    GREEK_ARCHAIC_LOWER = ('ϝ', 'ϛ', 'ϟ', 'ϙ', 'ϡ', 'ϳ', 'ϗ', '϶')
    GREEK_ARCHAIC_UPPER = ('Ϝ', 'Ϛ', 'Ϟ', 'Ϙ', 'Ϡ')
    GREEK_EXTENDED = ('Ἀ', 'Ἁ', 'Ἂ', 'Ἃ', 'Ἄ', 'Ἅ', 'Ἆ', 'Ἇ', 'ᾈ', 'ᾉ', 'ᾊ...
    GREEK_LOWER = ('α', 'β', 'γ', 'δ', 'ε', 'ζ', 'η', 'θ', 'ι', 'κ', 'λ', ...
    GREEK_UPPER = ('Α', 'Β', 'Γ', 'Δ', 'Ε', 'Ζ', 'Η', 'Θ', 'Ι', 'Κ', 'Λ', ...
    HTML5_REF = {'AElig': 'Æ', 'AElig;': 'Æ', 'AMP': '&', 'AMP;': '&', 'Aa...
    INCOMPLETE_REF = regex.Regex('&[#]?[0-9A-Za-z]+', flags=regex.V0)
    INTELLECTUAL_PROPERTY = ('©', '℗', '®', '℠', '™')
    INVALID_CHARREFS = {0: '�', 13: '\r', 128: '€', 129: '\x81', 130: '‚',...
    KEYBOARD = '⌨'
    LEADING_SURROGATE = regex.Regex('[\\ud800-\\udbff]', flags=regex.V0)
    LEFT = '←'
    LOADING = '⌛'
    LOGIC = ('⇒', '→', '⊃', '⇔', '≡', '↔', '¬', '∥', '⊕', '⊻', '⊥', '∃', '...
    LOWER_LIMIT_ASCII_CTRL = 0
    LOWER_LIMIT_ASCII_EXT = 128
    LOWER_LIMIT_ASCII_PRNT = 32
    LOWER_LIMIT_MS_LATIN1 = 129
    MATH = ('÷', '×', '±', '∓', '√', '∛', '∜', '∫', '∮', '∯', '∰', '∴', '∵...
    MEDICINE = '☤'
    MUSIC = ('𝄀', '𝄁', '𝄂', '𝄃', '𝄄', '𝄅', '𝄆', '𝄇', '𝄈', '𝄉', '𝄊', '𝄋', '...
    NAME2INT = {'AElig': 198, 'Aacute': 193, 'Acirc': 194, 'Agrave': 192, ...
    NUMBER_LIST = {'1': 'first', '10': 'tenth', '11': 'eleventh', '12': 't...
    OHMS = 'Ω'
    ORDINAL_LIST = {'eighteenth': '18', 'eighth': '8', 'eleventh': '11', '...
    PARENTHESIS_CHAR = ('⑴', '⑵', '⑶', '⑷', '⑸', '⑹', '⑺', '⑻', '⑼', '⑽', ...
    PLAIN_TEXT = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz 012...
    PLANETS = {'CERES': '⚳', 'EARTH': '♁', 'JUPITER': '♃', 'MARS': '♂', 'M...
    PLAYING_CARDS = ('🂡', '🂱', '🃁', '🃑', '🂢', '🂲', '🃂', '🃒', '🂣', '🂳', '🃃'...
    PLAYING_CARDS_52 = ('🂡', '🂱', '🃁', '🃑', '🂢', '🂲', '🃂', '🃒', '🂣', '🂳', ...
    PLAYING_CARDS_56 = ('🂡', '🂱', '🃁', '🃑', '🂢', '🂲', '🃂', '🃒', '🂣', '🂳', ...
    PRINTABLE = {32: ('20', '040', ' '), 33: ('21', '041', '!'), 34: ('22'...
    RADIATION = '☢'
    RECYCLE = ('♲', '♳', '♴', '♵', '♶', '♷', '♸', '♹', '♺', '♻', '♼', '♽')
    RIGHT = '→'
    SCIENCE = ('⚕', '⚗', '⚘', '⚙', '⚛', '☢', '☣', '☤', '⌬')
    SQUARE = '⃞'
    SUPERSCRIPT_NUM = ('¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹')
    TELEPHONE = '☏'
    TOXIC = '☠'
    TRAILING_SURROGATE = regex.Regex('[\\udc00-\\udfff]', flags=regex.V0)
    TRANS_TAB_BUBBLE2TEST = {32: 32, 9312: 49, 9313: 50, 9314: 51, 9315: 5...
    TRANS_TAB_TEXT2BUBBLE = {32: 32, 48: 9450, 49: 9312, 50: 9313, 51: 931...
    UNESCTAB = {'&#123;': '{', '&#125;': '}', '&#34;': '"', '&#39;': r"\'"...
    UP = '↑'
    UPPER_LIMIT_ASCII_CTRL = 31
    UPPER_LIMIT_ASCII_EXT = 255
    UPPER_LIMIT_ASCII_PRNT = 127
    UPPER_LIMIT_MS_LATIN1 = 159
    UPPER_LIMIT_UNICODE = 1114111
    UPPER_LIMIT_UTF8 = 65535
    WARNING = '⚠'
    ZODIAC = ('♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓')
    ZODIAC_SIGNS = {'Aquarius': '♒', 'Aries': '♈', 'Cancer': '♋', 'Caprico...
    __all__ = ['ORDINAL_LIST', 'NUMBER_LIST', 'INCOMPLETE_REF', 'ENTITY_RE...

FILE
    /media/collier/PROGRAMMING/PROJECTS/PyBooster/pybooster/strtools.py


