Help on module strtools:

NAME
    strtools

DESCRIPTION
    # -*- coding: utf-8 -*-
    # vim:fileencoding=utf-8

FUNCTIONS
    binint2char(_bin:int, _escape:bool=True) -> str
    
    binstr2char(_bin:str, _escape:bool=True) -> str
    
    bubble2text(_str:str) -> str
    
    bytes2str(_bytes:bytes, _encoding:str='utf8') -> str
    
    cap(_str:str) -> str
    
    char2hexstr(_char:str) -> str
    
    char2int(_char:str) -> int
    
    char2intstr(_char:str) -> int
    
    char2noeschex(_char:str) -> str
    
    endletters(_str:str) -> str
    
    escape(_str)
    
    expandhexescape(_hex:str) -> str
    
    explode(_str:str) -> str
    
    findescapes(_str:str) -> list
    
    firstletters(_str:str) -> str
    
    formal(_str:str) -> str
    
    fval(_dict:dict, _search) -> str
    
    fvalhtml(_search:str, _type:str) -> str
    
    hasbraille(_str:str) -> bool
    
    hasgreek(_str:str) -> bool
    
    hashexescape(_str:str) -> bool
    
    hex2cssnot(_hex:str) -> str
    
    hex2unicodehex(_hex:str) -> str
    
    hexint2char(_hex:int, _escape:bool=True) -> str
    
    hexncr2char(_refname:str) -> str
    
    hexstr2bytearray(_hex:str) -> bytearray
    
    hexstr2char(_hex:str, _escape:bool=True) -> str
    
    htmlentities(_data:str) -> str
    
    htmlescape(_str:str, quote:bool=True)
    
    htmlunescape(_str:str)
    
    implode(_str:str) -> str
    
    insert_character(_str:str, _char:str, index:int) -> str
    
    int2char(_int, _numbase:str='10', _escape:bool=True) -> str
    
    int2hexbytes(_int:int, _length:int=2, _endian:str='little', _signed:bool=False) -> str
    
    int2ncr(_int:int) -> str
    
    int2refnum(_int:int) -> str
    
    int2utf16(_int:int, _endian:str='little') -> str
    
    int2utf32(_int:int, _endian:str='little') -> str
    
    isascii(_str:str) -> bool
    
    isbraille(_str:str) -> bool
    
    isctrlascii(_str:str) -> bool
    
    isextascii(_str:str) -> bool
    
    isgreek(_str:str) -> bool
    
    isprntascii(_str:str) -> bool
    
    isstrascii(_str:str) -> bool
    
    isstrbraille(_str:str) -> bool
    
    isstrctrlascii(_str:str) -> bool
    
    isstrextascii(_str:str) -> bool
    
    isstrgreek(_str:str) -> bool
    
    isstrprntascii(_str:str) -> bool
    
    isunicode(_str:str) -> bool
    
    isutf16(_str:str) -> bool
    
    isutf8(_str:str) -> bool
    
    lastletters(_str:str) -> str
    
    lowercase(_str:str) -> str
    
    middleletters(_str:str) -> str
    
    name2char(_name:str) -> str
    
    ncr2char(_refname:str) -> str
    
    ncr2int(_refnum:str) -> int
    
    ncr2refname(_refnum:str) -> str
    
    noescape(_hex:str) -> str
    
    noescutf8hex(_hex:str) -> str
    
    num2ordinal(_str:str) -> str
    
    octint2char(_oct:int, _escape:bool=True) -> str
    
    octstr2char(_oct:str, _escape:bool=True) -> str
    
    ordinal2num(_str:str) -> str
    
    presentlist(_list:list) -> str
    
    refname2char(_refname:str, _escape:bool=True) -> str
    
    refname2ncr(_refname:str) -> str
    
    refname2refnum(_refname:str)
    
    refnum2char(_refnum:str, _escape:bool=True) -> str
    
    refnum2int(_refnum:str) -> int
    
    refnum2refname(_refnum:str) -> str
    
    replacecurlycommas(_str:str) -> str
    
    replacecurlyquotes(_str:str) -> str
    
    rmbyteshexesc(_str:bytes) -> str
    
    rmcurlycommas(_str:str) -> str
    
    rmcurlyquotes(_str:str) -> str
    
    rmpunct(_str:str) -> str
    
    rplbyteshexesc(_str:bytes) -> str
    
    sentence(_str:str) -> str
    
    shrink_esc_utf16to8(_hex:str) -> str
    
    shrink_esc_utf32to16(_hex:str) -> str
    
    shrink_esc_utf32to8(_hex:str) -> str
    
    splitsentencesstr(_str_of_sentences:str) -> list
    
    sqlstr(_obj, _strength:int=0) -> str
    
    square2text(_str:str) -> str
    
    str2bytes(_str:str, _encoding:str='utf8') -> bytes
    
    str2hexcolon(_str:str) -> str
    
    str2noeschex(_char:str) -> str
    
    testref(_data:str) -> bool
    
    text2bubble(_str:str) -> str
    
    text2square(_str:str, square_spaces:bool=False) -> str
    
    togglecase(_str:str) -> str
    
    unescape(_str)
    
    uppercase(_str:str) -> str
    
    utf16len(_str:str) -> int
    
    utf32len(_str:str) -> int
    
    utf7len(_str:str) -> int
    
    utf8convchar2hexescape(_char:str) -> str
    
    utf8convchar2hexstr(_char:str) -> str
    
    utf8convchar2intstr(_char:str) -> int
    
    utf8convchar2uri(_char:str) -> str
    
    utf8len(_str:str) -> int

DATA
    AIRPLANE = '✈'
    ARROWS = ('←', '↑', '→', '↓', '↔', '↕', '↖', '↗', '↘', '↙', '↜', '↝', ...
    ASTROLOGY = ('☉', '☽', '☿', '♀', '♁', '♂', '⚳', '♃', '♄', '♅', '⛢', '♆...
    BIOHAZARD = '☣'
    BRAILLE = ('⠀', '⠁', '⠂', '⠃', '⠄', '⠅', '⠆', '⠇', '⠈', '⠉', '⠊', '⠋',...
    BUBBLE = '⃝'
    BUBBLE_TEXT = 'ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ ⓪①...
    CARDS = ('♠', '♡', '♢', '♣', '♤', '♥', '♦', '♧')
    CARDS_10 = ('🂪', '🂺', '🃊', '🃚')
    CARDS_2 = ('🂢', '🂲', '🃂', '🃒')
    CARDS_3 = ('🂣', '🂳', '🃃', '🃓')
    CARDS_4 = ('🂤', '🂴', '🃄', '🃔')
    CARDS_5 = ('🂥', '🂵', '🃅', '🃕')
    CARDS_6 = ('🂦', '🂶', '🃆', '🃖')
    CARDS_7 = ('🂧', '🂷', '🃇', '🃗')
    CARDS_8 = ('🂨', '🂸', '🃈', '🃘')
    CARDS_9 = ('🂩', '🂹', '🃉', '🃙')
    CARDS_ACE = ('🂡', '🂱', '🃁', '🃑')
    CARDS_CHEVALIER = ('🂬', '🂼', '🃌', '🃜')
    CARDS_JACK = ('🂫', '🂻', '🃋', '🃛')
    CARDS_JOKER = ('🃏', '🃟')
    CARDS_KING = ('🂮', '🂾', '🃎', '🃞')
    CARDS_QUEEN = ('🂭', '🂽', '🃍', '🃝')
    CARD_REVERSE = '🂠'
    CHAR_REF = regex.Regex('&#(?:[0-9]+|[Xx][0-9A-Fa-f]+);', flags=regex.V...
    CHAR_REF2 = regex.Regex('&(#[0-9]+;?|#[xX][0-9a-fA-F]+;?|[^\\t\\n\\f <...
    CHESS = ('♔', '♕', '♖', '♗', '♘', '♙', '♚', '♛', '♜', '♝', '♞', '♟')
    CHESS_BLACK = ('♚', '♛', '♜', '♝', '♞', '♟')
    CHESS_WHITE = ('♔', '♕', '♖', '♗', '♘', '♙')
    CODES = {'\t': ('&#9;', '&Tab;'), '\n': ('&#10;', '&NewLine;'), ' ': '...
    CONTROL_SYM = ('␀', '␁', '␂', '␃', '␄', '␅', '␆', '␇', '␈', '␉', '␊', ...
    CONTROL_SYM_NAME = {'ACK': '␆', 'BEL': '␇', 'BS': '␈', 'CAN': '␘', 'CR...
    CURRENCY = ('¤', '₳', '฿', '₵', '¢', '₡', '₢', '$', '₫', '₯', '₠', '€'...
    CYRILLIC_ALPHABET = ('А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И',...
    DICE = ('⚀', '⚁', '⚂', '⚃', '⚄', '⚅')
    DOWN = '↓'
    EJECT = '⏏'
    END_PUNCT = ('…', '¿', '¡', '‽', '⸮')
    ENTITY_REF = regex.Regex('&[0-9A-Za-z]+;', flags=regex.V0)
    ESCTAB = {'"': '&#34;', "'": '&#39;', '(': '&#40;', ')': '&#41;', '[':...
    FACES = ('😁', '😂', '😃', '😄', '😅', '😆', '😇', '😈', '😉', '😊', '😋', '😌', '...
    FUEL_PUMP = '⛽'
    GREEK = ('Α', 'Β', 'Γ', 'Δ', 'Ε', 'Ζ', 'Η', 'Θ', 'Ι', 'Κ', 'Λ', 'Μ', '...
    GREEK_ACCENT = ('Ἀ', 'Ἁ', 'Ἂ', 'Ἃ', 'Ἄ', 'Ἅ', 'Ἆ', 'Ἇ', 'ᾈ', 'ᾉ', 'ᾊ',...
    GREEK_ACCENT_LOWER = ('ἀ', 'ἁ', 'ἂ', 'ἃ', 'ἄ', 'ἅ', 'ἆ', 'ἇ', 'ὰ', 'ά'...
    GREEK_ACCENT_UPPER = ('Ἀ', 'Ἁ', 'Ἂ', 'Ἃ', 'Ἄ', 'Ἅ', 'Ἆ', 'Ἇ', 'ᾈ', 'ᾉ'...
    GREEK_ALL = ('Α', 'Β', 'Γ', 'Δ', 'Ε', 'Ζ', 'Η', 'Θ', 'Ι', 'Κ', 'Λ', 'Μ...
    GREEK_ARCHAIC = ('Ϝ', 'Ϛ', 'Ϟ', 'Ϙ', 'Ϡ', 'ϝ', 'ϛ', 'ϟ', 'ϙ', 'ϡ', 'ϳ'...
    GREEK_ARCHAIC_LOWER = ('ϝ', 'ϛ', 'ϟ', 'ϙ', 'ϡ', 'ϳ', 'ϗ', '϶')
    GREEK_ARCHAIC_UPPER = ('Ϝ', 'Ϛ', 'Ϟ', 'Ϙ', 'Ϡ')
    GREEK_EXTENDED = ('Ἀ', 'Ἁ', 'Ἂ', 'Ἃ', 'Ἄ', 'Ἅ', 'Ἆ', 'Ἇ', 'ᾈ', 'ᾉ', 'ᾊ...
    GREEK_LOWER = ('α', 'β', 'γ', 'δ', 'ε', 'ζ', 'η', 'θ', 'ι', 'κ', 'λ', ...
    GREEK_UPPER = ('Α', 'Β', 'Γ', 'Δ', 'Ε', 'Ζ', 'Η', 'Θ', 'Ι', 'Κ', 'Λ', ...
    HTML5_REF = {'AElig': 'Æ', 'AElig;': 'Æ', 'AMP': '&', 'AMP;': '&', 'Aa...
    INCOMPLETE_REF = regex.Regex('&[#]?[0-9A-Za-z]+', flags=regex.V0)
    INTELLECTUAL_PROPERTY = ('©', '℗', '®', '℠', '™')
    INVALID_CHARREFS = {0: '�', 13: '\r', 128: '€', 129: '\x81', 130: '‚',...
    KEYBOARD = '⌨'
    LEADING_SURROGATE = regex.Regex('[\\ud800-\\udbff]', flags=regex.V0)
    LEFT = '←'
    LOADING = '⌛'
    LOGIC = ('⇒', '→', '⊃', '⇔', '≡', '↔', '¬', '∥', '⊕', '⊻', '⊥', '∃', '...
    LOWER_LIMIT_ASCII_CTRL = 0
    LOWER_LIMIT_ASCII_EXT = 128
    LOWER_LIMIT_ASCII_PRNT = 32
    LOWER_LIMIT_MS_LATIN1 = 129
    MATH = ('÷', '×', '±', '∓', '√', '∛', '∜', '∫', '∮', '∯', '∰', '∴', '∵...
    MEDICINE = '☤'
    MUSIC = ('𝄀', '𝄁', '𝄂', '𝄃', '𝄄', '𝄅', '𝄆', '𝄇', '𝄈', '𝄉', '𝄊', '𝄋', '...
    NAME2INT = {'AElig': 198, 'Aacute': 193, 'Acirc': 194, 'Agrave': 192, ...
    NUMBER_LIST = {'1': 'first', '10': 'tenth', '11': 'eleventh', '12': 't...
    OHMS = 'Ω'
    ORDINAL_LIST = {'eighteenth': '18', 'eighth': '8', 'eleventh': '11', '...
    PARENTHESIS_CHAR = ('⑴', '⑵', '⑶', '⑷', '⑸', '⑹', '⑺', '⑻', '⑼', '⑽', ...
    PLAIN_TEXT = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz 012...
    PLANETS = {'CERES': '⚳', 'EARTH': '♁', 'JUPITER': '♃', 'MARS': '♂', 'M...
    PLAYING_CARDS = ('🂡', '🂱', '🃁', '🃑', '🂢', '🂲', '🃂', '🃒', '🂣', '🂳', '🃃'...
    PLAYING_CARDS_52 = ('🂡', '🂱', '🃁', '🃑', '🂢', '🂲', '🃂', '🃒', '🂣', '🂳', ...
    PLAYING_CARDS_56 = ('🂡', '🂱', '🃁', '🃑', '🂢', '🂲', '🃂', '🃒', '🂣', '🂳', ...
    PRINTABLE = {32: ('20', '040', ' '), 33: ('21', '041', '!'), 34: ('22'...
    RADIATION = '☢'
    RECYCLE = ('♲', '♳', '♴', '♵', '♶', '♷', '♸', '♹', '♺', '♻', '♼', '♽')
    RIGHT = '→'
    SCIENCE = ('⚕', '⚗', '⚘', '⚙', '⚛', '☢', '☣', '☤', '⌬')
    SQUARE = '⃞'
    SUPERSCRIPT_NUM = ('¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹')
    TELEPHONE = '☏'
    TOXIC = '☠'
    TRAILING_SURROGATE = regex.Regex('[\\udc00-\\udfff]', flags=regex.V0)
    TRANS_TAB_BUBBLE2TEST = {32: 32, 9312: 49, 9313: 50, 9314: 51, 9315: 5...
    TRANS_TAB_TEXT2BUBBLE = {32: 32, 48: 9450, 49: 9312, 50: 9313, 51: 931...
    UNESCTAB = {'&#123;': '{', '&#125;': '}', '&#34;': '"', '&#39;': r"\'"...
    UP = '↑'
    UPPER_LIMIT_ASCII_CTRL = 31
    UPPER_LIMIT_ASCII_EXT = 255
    UPPER_LIMIT_ASCII_PRNT = 127
    UPPER_LIMIT_MS_LATIN1 = 159
    UPPER_LIMIT_UNICODE = 1114111
    UPPER_LIMIT_UTF8 = 65535
    WARNING = '⚠'
    ZODIAC = ('♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓')
    ZODIAC_SIGNS = {'Aquarius': '♒', 'Aries': '♈', 'Cancer': '♋', 'Caprico...
    __all__ = ['ORDINAL_LIST', 'NUMBER_LIST', 'INCOMPLETE_REF', 'ENTITY_RE...

FILE
    /media/collier/PROGRAMMING/PROJECTS/PyBooster/pybooster/strtools.py


