Help on module neuralnet:

NAME
    neuralnet

DESCRIPTION
    @brief A lightweight pure-Python neural network library
    @file neuralnet.py
    @package pybooster.neuralnet
    @author Devyn Collier Johnson <DevynCJohnson@Gmail.com>
    @copyright LGPLv3
    @version 2016.03.25
    
    @section DESCRIPTION
    \code{.py}
    from pybooster.neuralnet import NeuroCode
    
    data = [  # The input and output of an XOR gate
        ([0, 0], [0]),
        ([0, 1], [1]),
        ([1, 0], [1]),
        ([1, 1], [0])
    ]  # Provide sample input and expected output
    
    net = NeuroCode(
        data,
        layers = [4, 3],  # Number of nodes in each hidden layers (between input and output)
        iterations = 40000,   # Maximum training iterations
        rate = 0.1  # Learning rate
    )
    
    net.train()  # Returns (correctness, iterations)
    
    output = net.run([1, 0])  # Execute neuralnet
    
    net.writedump('xor_code.py')  # Save the generated code
    \endcode
    
    @section LICENSE
    GNU Lesser General Public License v3
    Copyright (c) Devyn Collier Johnson, All rights reserved.
    
    The PyBooster Library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3.0 of the License, or (at your option) any later version.
    
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public
    License along with this library.

CLASSES
    builtins.object
        NeuroCode
    
    class NeuroCode(builtins.object)
     |  Neurocode class
     |  
     |  Methods defined here:
     |  
     |  __init__(self, data:list, layers:list, iterations:int=40000, rate:float=0.4)
     |      Initiate Neurocode-learning
     |      
     |      - layers: Hidden neural layers (neurocodes between the input and output layers); Specify the number of hidden layers in the network and the size of each layer. For example, `layers = [3, 4]` makes two hidden layers, the first with 3 nodes and the second with 4 nodes. By default, one hidden layer is used with a size proportionate to the size of the input array.
     |      - error_thresh: Error threshold goal (float less than 1.0)
     |      - rate: Learning rate (float less than 1.0)
     |  
     |  bestof(self, generations:int=16) -> bytes
     |      Return the best neuralnet from the given amount produced as a byte string
     |  
     |  dump(self) -> bytes
     |      Pickle neural-network and compress it using Zlib
     |  
     |  neurocode2cfile(self, _filename:str, _neuroname:str) -> None
     |      Write the Neurocode to a file as C code
     |  
     |  neurocode2javafile(self, _filename:str, _neuroname:str) -> None
     |      Write the Neurocode to a file as Java code
     |  
     |  neurocode2pythonfile(self, _filename:str, _neuroname:str) -> None
     |      Write the Neurocode to a file as Python code
     |  
     |  run(self, _input) -> list
     |      Forward Propagation; Execute neuralnet
     |  
     |  to_c_function(self, fnname:str='nn_run', indent:int=0)
     |      Convert the neural-network to C code
     |  
     |  to_function(self, fnname:str='nn_run', indent:int=0)
     |      Convert the neural-network to Python code
     |  
     |  to_java_method(self, fnname:str='nn_run', static=False, scope='protected', indent:int=4)
     |      Convert the neural-network to Java code
     |  
     |  train(self) -> tuple
     |      Main Neurocode training
     |  
     |  writedump(self, _filename:str) -> None
     |      Pickle neural-network, compress it using Zlib, and then write it to a file
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  load(s)
     |      Load the given compressed+pickled neural-network
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    flatten(_lst:list)
        Flatten list of lists

DATA
    __all__ = ['flatten', 'NeuroCode']

FILE
    /media/collier/PROGRAMMING/PROJECTS/PyBooster/pybooster/neuralnet.py


