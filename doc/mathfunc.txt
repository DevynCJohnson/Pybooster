Help on module mathfunc:

NAME
    mathfunc - Mathematical and Trigonometric Functions

FUNCTIONS
    acot(...)
        acot(radians: float) -> float
        Return the Arc-Cotangent (acot(x)||arccot(x) == atan(1/x))
    
    acoth(...)
        acoth(radians: float) -> float
        Return the Hyperbolic Arc-Cotangent (acoth(x)||arccoth(x) == atanh(1/x))
    
    acsc(...)
        acsc(radians: float) -> float
        Return the Arc-Cosecant (acsc(x)||arccsc(x) == asin(1/x))
    
    acsch(...)
        acsch(radians: float) -> float
        Return the Hyperbolic Arc-Cosecant (acsch(x)||arccsch(x) == asinh(1/x))
    
    arc_angle(...)
        arc_angle(arc_length: float, radius: float) -> float
        Return the angle (in radians) of an arc given arc-length and radius
    
    arccot(...)
        arccot(radians: float) -> float
        Return the Arc-Cotangent (acot(x)||arccot(x) == atan(1/x))
    
    arccoth(...)
        arccoth(radians: float) -> float
        Return the Hyperbolic Arc-Cotangent (acoth(x)||arccoth(x) == atanh(1/x))
    
    arccsc(...)
        arccsc(radians: float) -> float
        Return the Arc-Cosecant (acsc(x)||arccsc(x) == asin(1/x))
    
    arccsch(...)
        arccsch(radians: float) -> float
        Return the Hyperbolic Arc-Cosecant (acsc(x)||arccsch(x) == asinh(1/x))
    
    arcexcot(...)
        arcexcot(radians: float) -> float
        Return the Arc-External Cotangent (arcexcot(x) == atan(1/(x+1)))
    
    arcexcoth(...)
        arcexcoth(radians: float) -> float
        Return the Hyperbolic Arc-External Cotangent [arcexcoth(x) == (1/atanh(x)-1)]
    
    arcexcsc(...)
        arcexcsc(radians: float) -> float
        Return the Arc-External Cosecant (arcexcsc(x) == asin(1/(x+1)))
    
    arcexcsch(...)
        arcexcsch(radians: float) -> float
        Return the Hyperbolic Arc-External Cosecant [arcexcsch(x) == (1/asinh(x)-1)]
    
    arcexsec(...)
        arcexsec(radians: float) -> float
        Return the Arc-External Secant (arcexsec(x) == acos(1/(x+1)))
    
    arcexsech(...)
        arcexsech(radians: float) -> float
        Return the Hyperbolic Arc-External Secant [arcexsech(x) == (1/acosh(x)-1)]
    
    arcsec(...)
        arcsec(radians: float) -> float
        Return the Arc-Secant (asec(x)||arcsec(x) == acos(1/x))
    
    arcsech(...)
        arcsech(radians: float) -> float
        Return the Hyperbolic Arc-Secant (asech(x)||arcsech(x) == acosh(1/x))
    
    arcvercos(...)
        arcvercos(radians: float) -> float
        Return the Arc-Versed Cosine (arcvercos(x) == 1 - asin(x))
    
    arcvercosh(...)
        arcvercosh(radians: float) -> float
        Return the Hyperbolic Arc-Versed Cosine (arcvercosh(x) == 1 - asinh(x))
    
    arcversin(...)
        arcversin(radians: float) -> float
        Return the Arc-Versed Sine (arcversin(x) == 1 - acos(x))
    
    arcversinh(...)
        arcversinh(radians: float) -> float
        Return the Hyperbolic Arc-Versed Sine (arcversinh(x) == 1 - acosh(x))
    
    asec(...)
        asec(radians: float) -> float
        Return the Arc-Secant (asec(x)||arcsec(x) == acos(1/x))
    
    asech(...)
        asech(radians: float) -> float
        Return the Hyperbolic Arc-Secant (asech(x)||arcsech(x) == acosh(1/x))
    
    bit_length(...)
        bit_length(num: int) -> int
        Return the number of bits used to represent the given number
    
    complement_angle_deg(...)
        complement_angle_deg(angle: float) -> float
        Return the complement of an angle (all in degrees)
    
    cos_arcsin(...)
        cos_arcsin(radians: float) -> float
        Return the Cosine of an Arc-Sine [sqrt(1-(x*x))]
    
    cos_arctan(...)
        cos_arctan(radians: float) -> float
        Return the Cosine of an Arc-Tangent [1 / sqrt(1+(x*x))]
    
    cot(...)
        cot(radians: float) -> float
        Return the Cotangent (cot(x) == 1/tan(x))
    
    coth(...)
        coth(radians: float) -> float
        Return the Hyperbolic Cotangent (coth(x) == 1/tanh(x))
    
    crd(...)
        crd(radians: float) -> float
        Return the Chord
    
    csc(...)
        csc(radians: float) -> float
        Return the Cosecant (csc(x) == 1/sin(x))
    
    csch(...)
        csch(radians: float) -> float
        Return the Hyperbolic Cosecant (csch(x) == 1/sinh(x))
    
    doublefactorial(...)
        doublefactorial(num: int) -> float
        Double Factorial (n!!)
    
    excot(...)
        excot(radians: float) -> float
        Return the External Cotangent [excot(x) == (1/tan(x))-1 == cot(x)-1]
    
    excoth(...)
        excoth(radians: float) -> float
        Return the External Hyperbolic Cotangent [excoth(x) == (1/tanh(x)-1)]
    
    excsc(...)
        excsc(radians: float) -> float
        Return the External Cosecant [excsc(x) == (1/sin(x))-1 == csc(x)-1]
    
    excsch(...)
        excsch(radians: float) -> float
        Return the External Hyperbolic Cosecant [excsch(x) == (1/sinh(x)-1)]
    
    exsec(...)
        exsec(radians: float) -> float
        Return the External Secant [exsec(x) == (1/cos(x))-1 == sec(x)-1]
    
    exsech(...)
        exsech(radians: float) -> float
        Return the External Hyperbolic Secant [exsech(x) == (1/cosh(x)-1)]
    
    factorial(...)
        factorial(num: int) -> float
        Factorial (n!)
    
    fib(...)
        fib(num: int) -> int
        Fibonacci Number Generator
        Return the specified Fibonacci Number
    
    float_diff(...)
        float_diff(num1: float, num2: float) -> float
        Return the difference between the two floats
    
    fma(...)
        fma(num1: float, num2: float, num3: float) -> float
        Fused Multiply-Add (num1*num2+num3)
    
    fpclassify(...)
        fpclassify(num: float) -> int
        Return an integer that indicates the type of float
        -1: Error
        0: NaN
        1: Infinity
        2: Zero
        3: Subnormal
        4: Normal
    
    hacoversin(...)
        hacoversin(radians: float) -> float
        Return the Hacoversine (hacoversin(x) == 0.5*(1 - sin(x)))
    
    haversin(...)
        haversin(radians: float) -> float
        Return the Haversine (haversin(x) == 0.5*(1 - cos(x)))
    
    heptagonal_num(...)
        heptagonal_num(num: int) -> int
        Return the Nth Heptagonal Number
    
    hexagonal_num(...)
        hexagonal_num(num: int) -> int
        Return the Nth Hexagonal Number
    
    iscomposite(...)
        iscomposite(num: int) -> bool
        Test if an int is composite
    
    isfloatsquare(...)
        isfloatsquare(num: float) -> bool
        Test if a double is a perfect square
    
    isheptagonal(...)
        isheptagonal(num: int) -> bool
        Test if the given number is a Heptagonal Number
    
    ishexagonal(...)
        ishexagonal(num: int) -> bool
        Test if the given number is a Hexagonal Number
    
    ismersennenumber(...)
        ismersennenumber(num: int) -> bool
        Test if the given number is a Mersenne Number
    
    ismersenneprime(...)
        ismersenneprime(num: int) -> bool
        Test if the given number is a Mersenne Prime
    
    ispoweroftwo(...)
        ispoweroftwo(num: int) -> bool
        Test if the given number is a Power-of-Two
    
    isprime(...)
        isprime(num: int) -> bool
        Test if a signed int is prime
    
    issquare(...)
        issquare(num: int) -> bool
        Test if a number is a perfect square
    
    istriangular(...)
        istriangular(num: int) -> bool
        Test if the given number is a Triangular Number
    
    mersenne_num(...)
        mersenne_num(num: int) -> int
        Return the Nth Mersenne Number
    
    pentatope_num(...)
        pentatope_num(num: int) -> int
        Return the Nth Pentatope Number
    
    pow2(...)
        pow2(num: int) -> int
        Return the power of 2^num, where "num" is a positive integer
    
    pow_ten(...)
        pow_ten(num: int) -> float
        Return the power of 10^num
    
    pow_ten_int(...)
        pow_ten_int(num: int) -> int
        Return the power of 10^num, where 'num' is a positive integer
    
    pow_ten_int_fast(...)
        pow_ten_int_fast(num: int) -> int
        Return the power of 10^num ('num' is a positive integer less than 18)
    
    pow_ten_neg(...)
        pow_ten_neg(num: int) -> float
        Return the power of 10^num for negative exponents
    
    pow_ten_pos(...)
        pow_ten_pos(num: int) -> float
        Return the power of 10^num for positive exponents
    
    pronic(...)
        pronic(num: int) -> int
        Return the Nth Pronic number
    
    quadfactorial(...)
        quadfactorial(num: int) -> float
        Quadruple Factorial - (2n)!/n!
    
    sec(...)
        sec(radians: float) -> float
        Return the Secant (sec(x) == 1/cos(x))
    
    sech(...)
        sech(radians: float) -> float
        Return the Hyperbolic Secant (sech(x) == 1/cosh(x))
    
    sin_arcsec(...)
        sin_arcsec(radians: float) -> float
        Return the Sine of an Arc-Tangent [sqrt((x*x)-1)/x]
    
    sin_arctan(...)
        sin_arctan(radians: float) -> float
        Return the Sine of an Arc-Tangent [x / sqrt(1+(x*x))]
    
    sinpi(...)
        sinpi(num: float) -> float
        Return the Pi Sine of the given number; return 0.0 on error
    
    squareroot(...)
        squareroot(num: float) -> float
        Return the Square-Root of a positive number
    
    superfactorial(...)
        superfactorial(num: int) -> float
        Super-Factorial
    
    supplement_angle_deg(...)
        supplement_angle_deg(angle: float) -> float
        Return the supplement of an angle (all in degrees)
    
    tetrahedral_num(...)
        tetrahedral_num(num: int) -> int
        Return the Nth Tetrahedral Number
    
    triangular_num(...)
        triangular_num(num: int) -> int
        Return the Nth Triangular Number
    
    vercos(...)
        vercos(radians: float) -> float
        Return the Versed Cosine (vercos(x) == 1 - sin(x))
    
    vercosh(...)
        vercosh(radians: float) -> float
        Return the Hyperbolic Versed Cosine (vercosh(x) == 1 - sinh(x))
    
    versin(...)
        versin(radians: float) -> float
        Return the Versed Sine (versin(x) == 1 - cos(x))
    
    versinh(...)
        versinh(radians: float) -> float
        Return the Hyperbolic Versed Sine (versinh(x) == 1 - cosh(x))

FILE
    /media/collier/PROGRAMMING/PROJECTS/PyBooster/pybooster/mathfunc.cpython-34m.so


